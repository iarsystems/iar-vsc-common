//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');

import ttypes = require('./shared_types');
import DcResultConstant = ttypes.DcResultConstant
import ExprFormat = ttypes.ExprFormat
import ContextType = ttypes.ContextType
import AccessType = ttypes.AccessType
import CSpyException = ttypes.CSpyException
import Id = ttypes.Id
import Success = ttypes.Success
import Zone = ttypes.Zone
import ZoneInfo = ttypes.ZoneInfo
import Location = ttypes.Location
import SourceLocation = ttypes.SourceLocation
import SourceRange = ttypes.SourceRange
import Symbol = ttypes.Symbol
import ContextRef = ttypes.ContextRef
import ContextInfo = ttypes.ContextInfo
import StackSettings = ttypes.StackSettings
import Breakpoint = ttypes.Breakpoint
import PropertyTreeItem = ttypes.PropertyTreeItem
import Capabilities = ttypes.Capabilities

declare class Client {
  #output: thrift.TTransport;
  #pClass: thrift.TProtocol;
  #_seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  isAlive(): Q.Promise<void>;

  isAlive(callback?: (error: void, response: void)=>void): void;
}

declare class Processor {
  #_handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_isAlive(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
