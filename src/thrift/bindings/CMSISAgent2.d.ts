/// <reference path="HeartbeatService.d.ts" />
//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import shared_ttypes = require('./shared_types');


import ttypes = require('./cmsisagent_types');
import OutputType = ttypes.OutputType
import FileCategory = ttypes.FileCategory
import CMSISPACK_AGENT2_SERVICE = ttypes.CMSISPACK_AGENT2_SERVICE
import CMSISPACK_AGENT2_EVENTLISTENER_SERVICE = ttypes.CMSISPACK_AGENT2_EVENTLISTENER_SERVICE
import PROJECT_ADDED = ttypes.PROJECT_ADDED
import PROJECT_REMOVED = ttypes.PROJECT_REMOVED
import PROJECT_UPDATED = ttypes.PROJECT_UPDATED
import PACKS_UPDATED = ttypes.PACKS_UPDATED
import PACKS_RELOADED = ttypes.PACKS_RELOADED
import PROTOCOL_VERSION = ttypes.PROTOCOL_VERSION
import CMSISAgentException = ttypes.CMSISAgentException
import FileInfo = ttypes.FileInfo
import ComponentInfo = ttypes.ComponentInfo
import CompileInfo = ttypes.CompileInfo
import ProcessorInfo = ttypes.ProcessorInfo
import DeviceInfo = ttypes.DeviceInfo
import ValidationStatus = ttypes.ValidationStatus
import Api = ttypes.Api
import FileInPack = ttypes.FileInPack
import RteFile = ttypes.RteFile
import RteEvent = ttypes.RteEvent
import HeartbeatService = require('./HeartbeatService');

declare class Client extends HeartbeatService.Client {
  #output: thrift.TTransport;
  #pClass: thrift.TProtocol;
  #_seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  loadProject(ewpfile: string, rteConfigFile: string): Q.Promise<void>;

  loadProject(ewpfile: string, rteConfigFile: string, callback?: (error: ttypes.CMSISAgentException, response: void)=>void): void;

  createNewProject(ewpfile: string, outputType: OutputType): Q.Promise<void>;

  createNewProject(ewpfile: string, outputType: OutputType, callback?: (error: ttypes.CMSISAgentException, response: void)=>void): void;

  shutdown(): Q.Promise<void>;

  shutdown(callback?: (error: ttypes.CMSISAgentException, response: void)=>void): void;

  activate(project: string): Q.Promise<void>;

  activate(project: string, callback?: (error: ttypes.CMSISAgentException, response: void)=>void): void;

  getComponentInfo(rte: string): Q.Promise<ComponentInfo[]>;

  getComponentInfo(rte: string, callback?: (error: ttypes.CMSISAgentException, response: ComponentInfo[])=>void): void;

  getValidationStatus(rte: string): Q.Promise<ValidationStatus[]>;

  getValidationStatus(rte: string, callback?: (error: ttypes.CMSISAgentException, response: ValidationStatus[])=>void): void;

  getApis(rte: string): Q.Promise<Api[]>;

  getApis(rte: string, callback?: (error: ttypes.CMSISAgentException, response: Api[])=>void): void;

  getDeviceInfo(rte: string): Q.Promise<DeviceInfo>;

  getDeviceInfo(rte: string, callback?: (error: ttypes.CMSISAgentException, response: DeviceInfo)=>void): void;

  getPathToPack(packId: string): Q.Promise<string>;

  getPathToPack(packId: string, callback?: (error: ttypes.CMSISAgentException, response: string)=>void): void;

  getPackIdFromPath(fileInPack: string): Q.Promise<FileInPack>;

  getPackIdFromPath(fileInPack: string, callback?: (error: ttypes.CMSISAgentException, response: FileInPack)=>void): void;

  getRteFiles(projectName: string): Q.Promise<RteFile[]>;

  getRteFiles(projectName: string, callback?: (error: ttypes.CMSISAgentException, response: RteFile[])=>void): void;

  openDeviceDialog(projectName: string): Q.Promise<void>;

  openDeviceDialog(projectName: string, callback?: (error: ttypes.CMSISAgentException, response: void)=>void): void;
}

declare class Processor extends HeartbeatService.Processor {
  #_handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_loadProject(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_createNewProject(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_shutdown(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_activate(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getComponentInfo(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getValidationStatus(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getApis(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getDeviceInfo(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getPathToPack(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getPackIdFromPath(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getRteFiles(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_openDeviceDialog(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
