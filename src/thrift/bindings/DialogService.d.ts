/// <reference path="HeartbeatService.d.ts" />
//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import shared_ttypes = require('./shared_types');
import listwindow_ttypes = require('./listwindow_types');


import ttypes = require('./dialogs_types');
import DIALOG_SERVICE = ttypes.DIALOG_SERVICE
import HeartbeatService = require('./HeartbeatService');

/**
 * This is a small service able to evaluate current state of a dialog.
 */
declare class Client extends HeartbeatService.Client {
  #output: thrift.TTransport;
  #pClass: thrift.TProtocol;
  #_seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  SetValue(itemId: string, items: shared_ttypes.PropertyTreeItem): Q.Promise<boolean>;

  SetValue(itemId: string, items: shared_ttypes.PropertyTreeItem, callback?: (error: void, response: boolean)=>void): void;

  GetState(itemId: string): Q.Promise<listwindow_ttypes.ToolbarItemState>;

  GetState(itemId: string, callback?: (error: void, response: listwindow_ttypes.ToolbarItemState)=>void): void;
}

declare class Processor extends HeartbeatService.Processor {
  #_handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_SetValue(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_GetState(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
