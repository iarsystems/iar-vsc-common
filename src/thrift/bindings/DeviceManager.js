//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var shared_ttypes = require('./shared_types');


var ttypes = require('./devicemanager_types');
//HELPER FUNCTIONS AND STRUCTURES

var DeviceManager_getRepositoriesForToolchain_args = function(args) {
  this.toolchainId = null;
  if (args) {
    if (args.toolchainId !== undefined && args.toolchainId !== null) {
      this.toolchainId = args.toolchainId;
    }
  }
};
DeviceManager_getRepositoriesForToolchain_args.prototype = {};
DeviceManager_getRepositoriesForToolchain_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.toolchainId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceManager_getRepositoriesForToolchain_args.prototype.write = function(output) {
  output.writeStructBegin('DeviceManager_getRepositoriesForToolchain_args');
  if (this.toolchainId !== null && this.toolchainId !== undefined) {
    output.writeFieldBegin('toolchainId', Thrift.Type.STRING, 1);
    output.writeString(this.toolchainId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceManager_getRepositoriesForToolchain_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.DeviceManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Repository]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
DeviceManager_getRepositoriesForToolchain_result.prototype = {};
DeviceManager_getRepositoriesForToolchain_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new ttypes.Repository();
          elem3.read(input);
          this.success.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.DeviceManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceManager_getRepositoriesForToolchain_result.prototype.write = function(output) {
  output.writeStructBegin('DeviceManager_getRepositoriesForToolchain_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter4 in this.success) {
      if (this.success.hasOwnProperty(iter4)) {
        iter4 = this.success[iter4];
        iter4.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceManager_getDevicesForRepository_args = function(args) {
  this.repository = null;
  if (args) {
    if (args.repository !== undefined && args.repository !== null) {
      this.repository = new ttypes.Repository(args.repository);
    }
  }
};
DeviceManager_getDevicesForRepository_args.prototype = {};
DeviceManager_getDevicesForRepository_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.repository = new ttypes.Repository();
        this.repository.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceManager_getDevicesForRepository_args.prototype.write = function(output) {
  output.writeStructBegin('DeviceManager_getDevicesForRepository_args');
  if (this.repository !== null && this.repository !== undefined) {
    output.writeFieldBegin('repository', Thrift.Type.STRUCT, 1);
    this.repository.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceManager_getDevicesForRepository_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.DeviceManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.Device]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
DeviceManager_getDevicesForRepository_result.prototype = {};
DeviceManager_getDevicesForRepository_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp36 = input.readMapBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var key8 = null;
          var val9 = null;
          key8 = input.readString();
          val9 = new ttypes.Device();
          val9.read(input);
          this.success[key8] = val9;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.DeviceManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceManager_getDevicesForRepository_result.prototype.write = function(output) {
  output.writeStructBegin('DeviceManager_getDevicesForRepository_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter10 in this.success) {
      if (this.success.hasOwnProperty(kiter10)) {
        var viter11 = this.success[kiter10];
        output.writeString(kiter10);
        viter11.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceManager_addRepository_args = function(args) {
  this.repository = null;
  if (args) {
    if (args.repository !== undefined && args.repository !== null) {
      this.repository = new ttypes.Repository(args.repository);
    }
  }
};
DeviceManager_addRepository_args.prototype = {};
DeviceManager_addRepository_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.repository = new ttypes.Repository();
        this.repository.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceManager_addRepository_args.prototype.write = function(output) {
  output.writeStructBegin('DeviceManager_addRepository_args');
  if (this.repository !== null && this.repository !== undefined) {
    output.writeFieldBegin('repository', Thrift.Type.STRUCT, 1);
    this.repository.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceManager_addRepository_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.DeviceManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
DeviceManager_addRepository_result.prototype = {};
DeviceManager_addRepository_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.DeviceManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceManager_addRepository_result.prototype.write = function(output) {
  output.writeStructBegin('DeviceManager_addRepository_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceManager_addRepositoryForLocalPath_args = function(args) {
  this.localPath = null;
  this.toolchainId = null;
  this.displayName = null;
  if (args) {
    if (args.localPath !== undefined && args.localPath !== null) {
      this.localPath = args.localPath;
    }
    if (args.toolchainId !== undefined && args.toolchainId !== null) {
      this.toolchainId = args.toolchainId;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
  }
};
DeviceManager_addRepositoryForLocalPath_args.prototype = {};
DeviceManager_addRepositoryForLocalPath_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.localPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toolchainId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceManager_addRepositoryForLocalPath_args.prototype.write = function(output) {
  output.writeStructBegin('DeviceManager_addRepositoryForLocalPath_args');
  if (this.localPath !== null && this.localPath !== undefined) {
    output.writeFieldBegin('localPath', Thrift.Type.STRING, 1);
    output.writeString(this.localPath);
    output.writeFieldEnd();
  }
  if (this.toolchainId !== null && this.toolchainId !== undefined) {
    output.writeFieldBegin('toolchainId', Thrift.Type.STRING, 2);
    output.writeString(this.toolchainId);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 3);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceManager_addRepositoryForLocalPath_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.DeviceManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Repository(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
DeviceManager_addRepositoryForLocalPath_result.prototype = {};
DeviceManager_addRepositoryForLocalPath_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Repository();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.DeviceManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceManager_addRepositoryForLocalPath_result.prototype.write = function(output) {
  output.writeStructBegin('DeviceManager_addRepositoryForLocalPath_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceManager_removeRepositoryForUri_args = function(args) {
  this.uri = null;
  this.toolchainId = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
    if (args.toolchainId !== undefined && args.toolchainId !== null) {
      this.toolchainId = args.toolchainId;
    }
  }
};
DeviceManager_removeRepositoryForUri_args.prototype = {};
DeviceManager_removeRepositoryForUri_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toolchainId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceManager_removeRepositoryForUri_args.prototype.write = function(output) {
  output.writeStructBegin('DeviceManager_removeRepositoryForUri_args');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.toolchainId !== null && this.toolchainId !== undefined) {
    output.writeFieldBegin('toolchainId', Thrift.Type.STRING, 2);
    output.writeString(this.toolchainId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceManager_removeRepositoryForUri_result = function(args) {
};
DeviceManager_removeRepositoryForUri_result.prototype = {};
DeviceManager_removeRepositoryForUri_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceManager_removeRepositoryForUri_result.prototype.write = function(output) {
  output.writeStructBegin('DeviceManager_removeRepositoryForUri_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceManager_removeRepository_args = function(args) {
  this.repo = null;
  if (args) {
    if (args.repo !== undefined && args.repo !== null) {
      this.repo = new ttypes.Repository(args.repo);
    }
  }
};
DeviceManager_removeRepository_args.prototype = {};
DeviceManager_removeRepository_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.repo = new ttypes.Repository();
        this.repo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceManager_removeRepository_args.prototype.write = function(output) {
  output.writeStructBegin('DeviceManager_removeRepository_args');
  if (this.repo !== null && this.repo !== undefined) {
    output.writeFieldBegin('repo', Thrift.Type.STRUCT, 1);
    this.repo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceManager_removeRepository_result = function(args) {
};
DeviceManager_removeRepository_result.prototype = {};
DeviceManager_removeRepository_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceManager_removeRepository_result.prototype.write = function(output) {
  output.writeStructBegin('DeviceManager_removeRepository_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceManager_addRepositoriesFromToolchains_args = function(args) {
};
DeviceManager_addRepositoriesFromToolchains_args.prototype = {};
DeviceManager_addRepositoriesFromToolchains_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceManager_addRepositoriesFromToolchains_args.prototype.write = function(output) {
  output.writeStructBegin('DeviceManager_addRepositoriesFromToolchains_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceManager_addRepositoriesFromToolchains_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Thrift.copyList, ttypes.Repository]);
    }
  }
};
DeviceManager_addRepositoriesFromToolchains_result.prototype = {};
DeviceManager_addRepositoriesFromToolchains_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp313 = input.readMapBegin();
        var _size12 = _rtmp313.size || 0;
        for (var _i14 = 0; _i14 < _size12; ++_i14) {
          var key15 = null;
          var val16 = null;
          key15 = input.readString();
          val16 = [];
          var _rtmp318 = input.readListBegin();
          var _size17 = _rtmp318.size || 0;
          for (var _i19 = 0; _i19 < _size17; ++_i19) {
            var elem20 = null;
            elem20 = new ttypes.Repository();
            elem20.read(input);
            val16.push(elem20);
          }
          input.readListEnd();
          this.success[key15] = val16;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceManager_addRepositoriesFromToolchains_result.prototype.write = function(output) {
  output.writeStructBegin('DeviceManager_addRepositoriesFromToolchains_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter21 in this.success) {
      if (this.success.hasOwnProperty(kiter21)) {
        var viter22 = this.success[kiter21];
        output.writeString(kiter21);
        output.writeListBegin(Thrift.Type.STRUCT, viter22.length);
        for (var iter23 in viter22) {
          if (viter22.hasOwnProperty(iter23)) {
            iter23 = viter22[iter23];
            iter23.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceManagerClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
DeviceManagerClient.prototype = {};
DeviceManagerClient.prototype.seqid = function() { return this._seqid; };
DeviceManagerClient.prototype.new_seqid = function() { return this._seqid += 1; };

DeviceManagerClient.prototype.getRepositoriesForToolchain = function(toolchainId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRepositoriesForToolchain(toolchainId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRepositoriesForToolchain(toolchainId);
  }
};

DeviceManagerClient.prototype.send_getRepositoriesForToolchain = function(toolchainId) {
  var output = new this.pClass(this.output);
  var params = {
    toolchainId: toolchainId
  };
  var args = new DeviceManager_getRepositoriesForToolchain_args(params);
  try {
    output.writeMessageBegin('getRepositoriesForToolchain', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DeviceManagerClient.prototype.recv_getRepositoriesForToolchain = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DeviceManager_getRepositoriesForToolchain_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRepositoriesForToolchain failed: unknown result');
};

DeviceManagerClient.prototype.getDevicesForRepository = function(repository, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDevicesForRepository(repository);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDevicesForRepository(repository);
  }
};

DeviceManagerClient.prototype.send_getDevicesForRepository = function(repository) {
  var output = new this.pClass(this.output);
  var params = {
    repository: repository
  };
  var args = new DeviceManager_getDevicesForRepository_args(params);
  try {
    output.writeMessageBegin('getDevicesForRepository', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DeviceManagerClient.prototype.recv_getDevicesForRepository = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DeviceManager_getDevicesForRepository_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDevicesForRepository failed: unknown result');
};

DeviceManagerClient.prototype.addRepository = function(repository, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addRepository(repository);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addRepository(repository);
  }
};

DeviceManagerClient.prototype.send_addRepository = function(repository) {
  var output = new this.pClass(this.output);
  var params = {
    repository: repository
  };
  var args = new DeviceManager_addRepository_args(params);
  try {
    output.writeMessageBegin('addRepository', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DeviceManagerClient.prototype.recv_addRepository = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DeviceManager_addRepository_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DeviceManagerClient.prototype.addRepositoryForLocalPath = function(localPath, toolchainId, displayName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addRepositoryForLocalPath(localPath, toolchainId, displayName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addRepositoryForLocalPath(localPath, toolchainId, displayName);
  }
};

DeviceManagerClient.prototype.send_addRepositoryForLocalPath = function(localPath, toolchainId, displayName) {
  var output = new this.pClass(this.output);
  var params = {
    localPath: localPath,
    toolchainId: toolchainId,
    displayName: displayName
  };
  var args = new DeviceManager_addRepositoryForLocalPath_args(params);
  try {
    output.writeMessageBegin('addRepositoryForLocalPath', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DeviceManagerClient.prototype.recv_addRepositoryForLocalPath = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DeviceManager_addRepositoryForLocalPath_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addRepositoryForLocalPath failed: unknown result');
};

DeviceManagerClient.prototype.removeRepositoryForUri = function(uri, toolchainId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeRepositoryForUri(uri, toolchainId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeRepositoryForUri(uri, toolchainId);
  }
};

DeviceManagerClient.prototype.send_removeRepositoryForUri = function(uri, toolchainId) {
  var output = new this.pClass(this.output);
  var params = {
    uri: uri,
    toolchainId: toolchainId
  };
  var args = new DeviceManager_removeRepositoryForUri_args(params);
  try {
    output.writeMessageBegin('removeRepositoryForUri', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DeviceManagerClient.prototype.recv_removeRepositoryForUri = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DeviceManager_removeRepositoryForUri_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

DeviceManagerClient.prototype.removeRepository = function(repo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeRepository(repo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeRepository(repo);
  }
};

DeviceManagerClient.prototype.send_removeRepository = function(repo) {
  var output = new this.pClass(this.output);
  var params = {
    repo: repo
  };
  var args = new DeviceManager_removeRepository_args(params);
  try {
    output.writeMessageBegin('removeRepository', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DeviceManagerClient.prototype.recv_removeRepository = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DeviceManager_removeRepository_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

DeviceManagerClient.prototype.addRepositoriesFromToolchains = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addRepositoriesFromToolchains();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addRepositoriesFromToolchains();
  }
};

DeviceManagerClient.prototype.send_addRepositoriesFromToolchains = function() {
  var output = new this.pClass(this.output);
  var args = new DeviceManager_addRepositoriesFromToolchains_args();
  try {
    output.writeMessageBegin('addRepositoriesFromToolchains', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DeviceManagerClient.prototype.recv_addRepositoriesFromToolchains = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DeviceManager_addRepositoriesFromToolchains_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addRepositoriesFromToolchains failed: unknown result');
};
var DeviceManagerProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
DeviceManagerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
DeviceManagerProcessor.prototype.process_getRepositoriesForToolchain = function(seqid, input, output) {
  var args = new DeviceManager_getRepositoriesForToolchain_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRepositoriesForToolchain.length === 1) {
    Q.fcall(this._handler.getRepositoriesForToolchain.bind(this._handler),
      args.toolchainId
    ).then(function(result) {
      var result_obj = new DeviceManager_getRepositoriesForToolchain_result({success: result});
      output.writeMessageBegin("getRepositoriesForToolchain", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.DeviceManagerError) {
        result = new DeviceManager_getRepositoriesForToolchain_result(err);
        output.writeMessageBegin("getRepositoriesForToolchain", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRepositoriesForToolchain", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getRepositoriesForToolchain(args.toolchainId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DeviceManagerError) {
        result_obj = new DeviceManager_getRepositoriesForToolchain_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRepositoriesForToolchain", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRepositoriesForToolchain", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DeviceManagerProcessor.prototype.process_getDevicesForRepository = function(seqid, input, output) {
  var args = new DeviceManager_getDevicesForRepository_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDevicesForRepository.length === 1) {
    Q.fcall(this._handler.getDevicesForRepository.bind(this._handler),
      args.repository
    ).then(function(result) {
      var result_obj = new DeviceManager_getDevicesForRepository_result({success: result});
      output.writeMessageBegin("getDevicesForRepository", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.DeviceManagerError) {
        result = new DeviceManager_getDevicesForRepository_result(err);
        output.writeMessageBegin("getDevicesForRepository", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDevicesForRepository", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getDevicesForRepository(args.repository, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DeviceManagerError) {
        result_obj = new DeviceManager_getDevicesForRepository_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDevicesForRepository", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDevicesForRepository", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DeviceManagerProcessor.prototype.process_addRepository = function(seqid, input, output) {
  var args = new DeviceManager_addRepository_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addRepository.length === 1) {
    Q.fcall(this._handler.addRepository.bind(this._handler),
      args.repository
    ).then(function(result) {
      var result_obj = new DeviceManager_addRepository_result({success: result});
      output.writeMessageBegin("addRepository", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.DeviceManagerError) {
        result = new DeviceManager_addRepository_result(err);
        output.writeMessageBegin("addRepository", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addRepository", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.addRepository(args.repository, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DeviceManagerError) {
        result_obj = new DeviceManager_addRepository_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addRepository", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addRepository", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DeviceManagerProcessor.prototype.process_addRepositoryForLocalPath = function(seqid, input, output) {
  var args = new DeviceManager_addRepositoryForLocalPath_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addRepositoryForLocalPath.length === 3) {
    Q.fcall(this._handler.addRepositoryForLocalPath.bind(this._handler),
      args.localPath,
      args.toolchainId,
      args.displayName
    ).then(function(result) {
      var result_obj = new DeviceManager_addRepositoryForLocalPath_result({success: result});
      output.writeMessageBegin("addRepositoryForLocalPath", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.DeviceManagerError) {
        result = new DeviceManager_addRepositoryForLocalPath_result(err);
        output.writeMessageBegin("addRepositoryForLocalPath", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addRepositoryForLocalPath", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.addRepositoryForLocalPath(args.localPath, args.toolchainId, args.displayName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DeviceManagerError) {
        result_obj = new DeviceManager_addRepositoryForLocalPath_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addRepositoryForLocalPath", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addRepositoryForLocalPath", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DeviceManagerProcessor.prototype.process_removeRepositoryForUri = function(seqid, input, output) {
  var args = new DeviceManager_removeRepositoryForUri_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeRepositoryForUri.length === 2) {
    Q.fcall(this._handler.removeRepositoryForUri.bind(this._handler),
      args.uri,
      args.toolchainId
    ).then(function(result) {
      var result_obj = new DeviceManager_removeRepositoryForUri_result({success: result});
      output.writeMessageBegin("removeRepositoryForUri", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("removeRepositoryForUri", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.removeRepositoryForUri(args.uri, args.toolchainId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new DeviceManager_removeRepositoryForUri_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeRepositoryForUri", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeRepositoryForUri", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DeviceManagerProcessor.prototype.process_removeRepository = function(seqid, input, output) {
  var args = new DeviceManager_removeRepository_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeRepository.length === 1) {
    Q.fcall(this._handler.removeRepository.bind(this._handler),
      args.repo
    ).then(function(result) {
      var result_obj = new DeviceManager_removeRepository_result({success: result});
      output.writeMessageBegin("removeRepository", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("removeRepository", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.removeRepository(args.repo, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new DeviceManager_removeRepository_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeRepository", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeRepository", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DeviceManagerProcessor.prototype.process_addRepositoriesFromToolchains = function(seqid, input, output) {
  var args = new DeviceManager_addRepositoriesFromToolchains_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addRepositoriesFromToolchains.length === 0) {
    Q.fcall(this._handler.addRepositoriesFromToolchains.bind(this._handler)
    ).then(function(result) {
      var result_obj = new DeviceManager_addRepositoriesFromToolchains_result({success: result});
      output.writeMessageBegin("addRepositoriesFromToolchains", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("addRepositoriesFromToolchains", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.addRepositoriesFromToolchains(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new DeviceManager_addRepositoriesFromToolchains_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addRepositoriesFromToolchains", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addRepositoriesFromToolchains", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
