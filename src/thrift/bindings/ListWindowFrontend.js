//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var ServiceRegistry_ttypes = require('./ServiceRegistry_types');
var shared_ttypes = require('./shared_types');


var ttypes = require('./listwindow_types');
//HELPER FUNCTIONS AND STRUCTURES

var ListWindowFrontend_notify_args = function(args) {
  this.note = null;
  if (args) {
    if (args.note !== undefined && args.note !== null) {
      this.note = new ttypes.Note(args.note);
    }
  }
};
ListWindowFrontend_notify_args.prototype = {};
ListWindowFrontend_notify_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new ttypes.Note();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowFrontend_notify_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowFrontend_notify_args');
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 1);
    this.note.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowFrontend_notify_result = function(args) {
};
ListWindowFrontend_notify_result.prototype = {};
ListWindowFrontend_notify_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowFrontend_notify_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowFrontend_notify_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowFrontend_notifyToolbar_args = function(args) {
  this.note = null;
  if (args) {
    if (args.note !== undefined && args.note !== null) {
      this.note = new ttypes.ToolbarNote(args.note);
    }
  }
};
ListWindowFrontend_notifyToolbar_args.prototype = {};
ListWindowFrontend_notifyToolbar_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new ttypes.ToolbarNote();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowFrontend_notifyToolbar_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowFrontend_notifyToolbar_args');
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 1);
    this.note.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowFrontend_notifyToolbar_result = function(args) {
};
ListWindowFrontend_notifyToolbar_result.prototype = {};
ListWindowFrontend_notifyToolbar_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowFrontend_notifyToolbar_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowFrontend_notifyToolbar_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowFrontendClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
ListWindowFrontendClient.prototype = {};
ListWindowFrontendClient.prototype.seqid = function() { return this._seqid; };
ListWindowFrontendClient.prototype.new_seqid = function() { return this._seqid += 1; };

ListWindowFrontendClient.prototype.notify = function(note, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_notify(note);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_notify(note);
  }
};

ListWindowFrontendClient.prototype.send_notify = function(note) {
  var output = new this.pClass(this.output);
  var params = {
    note: note
  };
  var args = new ListWindowFrontend_notify_args(params);
  try {
    output.writeMessageBegin('notify', Thrift.MessageType.ONEWAY, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    this.output.flush();
    var callback = this._reqs[this.seqid()] || function() {};
    delete this._reqs[this.seqid()];
    callback(null);
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowFrontendClient.prototype.notifyToolbar = function(note, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_notifyToolbar(note);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_notifyToolbar(note);
  }
};

ListWindowFrontendClient.prototype.send_notifyToolbar = function(note) {
  var output = new this.pClass(this.output);
  var params = {
    note: note
  };
  var args = new ListWindowFrontend_notifyToolbar_args(params);
  try {
    output.writeMessageBegin('notifyToolbar', Thrift.MessageType.ONEWAY, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    this.output.flush();
    var callback = this._reqs[this.seqid()] || function() {};
    delete this._reqs[this.seqid()];
    callback(null);
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};
var ListWindowFrontendProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
ListWindowFrontendProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
ListWindowFrontendProcessor.prototype.process_notify = function(seqid, input, output) {
  var args = new ListWindowFrontend_notify_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.notify(args.note);
};
ListWindowFrontendProcessor.prototype.process_notifyToolbar = function(seqid, input, output) {
  var args = new ListWindowFrontend_notifyToolbar_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.notifyToolbar(args.note);
};
