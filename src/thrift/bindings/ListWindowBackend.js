//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var ServiceRegistry_ttypes = require('./ServiceRegistry_types');
var shared_ttypes = require('./shared_types');


var HeartbeatService = require('./HeartbeatService');
var HeartbeatServiceClient = HeartbeatService.Client;
var HeartbeatServiceProcessor = HeartbeatService.Processor;
var ttypes = require('./listwindow_types');
//HELPER FUNCTIONS AND STRUCTURES

var ListWindowBackend_connect_args = function(args) {
  this.listener = null;
  if (args) {
    if (args.listener !== undefined && args.listener !== null) {
      this.listener = new ServiceRegistry_ttypes.ServiceLocation(args.listener);
    }
  }
};
ListWindowBackend_connect_args.prototype = {};
ListWindowBackend_connect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.listener = new ServiceRegistry_ttypes.ServiceLocation();
        this.listener.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_connect_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_connect_args');
  if (this.listener !== null && this.listener !== undefined) {
    output.writeFieldBegin('listener', Thrift.Type.STRUCT, 1);
    this.listener.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_connect_result = function(args) {
};
ListWindowBackend_connect_result.prototype = {};
ListWindowBackend_connect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_connect_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_connect_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_disconnect_args = function(args) {
};
ListWindowBackend_disconnect_args.prototype = {};
ListWindowBackend_disconnect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_disconnect_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_disconnect_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_disconnect_result = function(args) {
};
ListWindowBackend_disconnect_result.prototype = {};
ListWindowBackend_disconnect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_disconnect_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_disconnect_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setContentStorageFile_args = function(args) {
  this.filename = null;
  if (args) {
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
  }
};
ListWindowBackend_setContentStorageFile_args.prototype = {};
ListWindowBackend_setContentStorageFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setContentStorageFile_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setContentStorageFile_args');
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 1);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setContentStorageFile_result = function(args) {
};
ListWindowBackend_setContentStorageFile_result.prototype = {};
ListWindowBackend_setContentStorageFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setContentStorageFile_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setContentStorageFile_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getNumberOfRows_args = function(args) {
};
ListWindowBackend_getNumberOfRows_args.prototype = {};
ListWindowBackend_getNumberOfRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getNumberOfRows_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getNumberOfRows_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getNumberOfRows_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_getNumberOfRows_result.prototype = {};
ListWindowBackend_getNumberOfRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getNumberOfRows_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getNumberOfRows_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getRow_args = function(args) {
  this.index = null;
  if (args) {
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
  }
};
ListWindowBackend_getRow_args.prototype = {};
ListWindowBackend_getRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.index = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getRow_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getRow_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I64, 1);
    output.writeI64(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getRow_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Row(args.success);
    }
  }
};
ListWindowBackend_getRow_result.prototype = {};
ListWindowBackend_getRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Row();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getRow_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getRow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setVisibleRows_args = function(args) {
  this.first = null;
  this.last = null;
  if (args) {
    if (args.first !== undefined && args.first !== null) {
      this.first = args.first;
    }
    if (args.last !== undefined && args.last !== null) {
      this.last = args.last;
    }
  }
};
ListWindowBackend_setVisibleRows_args.prototype = {};
ListWindowBackend_setVisibleRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.first = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.last = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setVisibleRows_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setVisibleRows_args');
  if (this.first !== null && this.first !== undefined) {
    output.writeFieldBegin('first', Thrift.Type.I64, 1);
    output.writeI64(this.first);
    output.writeFieldEnd();
  }
  if (this.last !== null && this.last !== undefined) {
    output.writeFieldBegin('last', Thrift.Type.I64, 2);
    output.writeI64(this.last);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setVisibleRows_result = function(args) {
};
ListWindowBackend_setVisibleRows_result.prototype = {};
ListWindowBackend_setVisibleRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setVisibleRows_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setVisibleRows_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_show_args = function(args) {
  this.on = null;
  if (args) {
    if (args.on !== undefined && args.on !== null) {
      this.on = args.on;
    }
  }
};
ListWindowBackend_show_args.prototype = {};
ListWindowBackend_show_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.on = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_show_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_show_args');
  if (this.on !== null && this.on !== undefined) {
    output.writeFieldBegin('on', Thrift.Type.BOOL, 1);
    output.writeBool(this.on);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_show_result = function(args) {
};
ListWindowBackend_show_result.prototype = {};
ListWindowBackend_show_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_show_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_show_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getColumnInfo_args = function(args) {
};
ListWindowBackend_getColumnInfo_args.prototype = {};
ListWindowBackend_getColumnInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getColumnInfo_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getColumnInfo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getColumnInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Column]);
    }
  }
};
ListWindowBackend_getColumnInfo_result.prototype = {};
ListWindowBackend_getColumnInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp341 = input.readListBegin();
        var _size40 = _rtmp341.size || 0;
        for (var _i42 = 0; _i42 < _size40; ++_i42) {
          var elem43 = null;
          elem43 = new ttypes.Column();
          elem43.read(input);
          this.success.push(elem43);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getColumnInfo_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getColumnInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter44 in this.success) {
      if (this.success.hasOwnProperty(iter44)) {
        iter44 = this.success[iter44];
        iter44.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getListSpec_args = function(args) {
};
ListWindowBackend_getListSpec_args.prototype = {};
ListWindowBackend_getListSpec_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getListSpec_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getListSpec_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getListSpec_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ListSpec(args.success);
    }
  }
};
ListWindowBackend_getListSpec_result.prototype = {};
ListWindowBackend_getListSpec_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ListSpec();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getListSpec_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getListSpec_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_toggleExpansion_args = function(args) {
  this.index = null;
  if (args) {
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
  }
};
ListWindowBackend_toggleExpansion_args.prototype = {};
ListWindowBackend_toggleExpansion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.index = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_toggleExpansion_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_toggleExpansion_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I64, 1);
    output.writeI64(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_toggleExpansion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_toggleExpansion_result.prototype = {};
ListWindowBackend_toggleExpansion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_toggleExpansion_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_toggleExpansion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_toggleCheckmark_args = function(args) {
  this.index = null;
  if (args) {
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
  }
};
ListWindowBackend_toggleCheckmark_args.prototype = {};
ListWindowBackend_toggleCheckmark_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.index = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_toggleCheckmark_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_toggleCheckmark_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I64, 1);
    output.writeI64(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_toggleCheckmark_result = function(args) {
};
ListWindowBackend_toggleCheckmark_result.prototype = {};
ListWindowBackend_toggleCheckmark_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_toggleCheckmark_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_toggleCheckmark_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getContextMenu_args = function(args) {
  this.row = null;
  this.col = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
  }
};
ListWindowBackend_getContextMenu_args.prototype = {};
ListWindowBackend_getContextMenu_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getContextMenu_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getContextMenu_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 2);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getContextMenu_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.MenuItem]);
    }
  }
};
ListWindowBackend_getContextMenu_result.prototype = {};
ListWindowBackend_getContextMenu_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp346 = input.readListBegin();
        var _size45 = _rtmp346.size || 0;
        for (var _i47 = 0; _i47 < _size45; ++_i47) {
          var elem48 = null;
          elem48 = new ttypes.MenuItem();
          elem48.read(input);
          this.success.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getContextMenu_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getContextMenu_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter49 in this.success) {
      if (this.success.hasOwnProperty(iter49)) {
        iter49 = this.success[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_handleContextMenu_args = function(args) {
  this.command = null;
  if (args) {
    if (args.command !== undefined && args.command !== null) {
      this.command = args.command;
    }
  }
};
ListWindowBackend_handleContextMenu_args.prototype = {};
ListWindowBackend_handleContextMenu_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.command = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_handleContextMenu_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_handleContextMenu_args');
  if (this.command !== null && this.command !== undefined) {
    output.writeFieldBegin('command', Thrift.Type.I32, 1);
    output.writeI32(this.command);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_handleContextMenu_result = function(args) {
};
ListWindowBackend_handleContextMenu_result.prototype = {};
ListWindowBackend_handleContextMenu_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_handleContextMenu_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_handleContextMenu_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getDisplayName_args = function(args) {
};
ListWindowBackend_getDisplayName_args.prototype = {};
ListWindowBackend_getDisplayName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getDisplayName_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getDisplayName_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getDisplayName_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_getDisplayName_result.prototype = {};
ListWindowBackend_getDisplayName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getDisplayName_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getDisplayName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_scroll_args = function(args) {
  this.op = null;
  this.first = null;
  this.last = null;
  if (args) {
    if (args.op !== undefined && args.op !== null) {
      this.op = args.op;
    }
    if (args.first !== undefined && args.first !== null) {
      this.first = args.first;
    }
    if (args.last !== undefined && args.last !== null) {
      this.last = args.last;
    }
  }
};
ListWindowBackend_scroll_args.prototype = {};
ListWindowBackend_scroll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.op = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.first = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.last = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_scroll_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_scroll_args');
  if (this.op !== null && this.op !== undefined) {
    output.writeFieldBegin('op', Thrift.Type.I32, 1);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.first !== null && this.first !== undefined) {
    output.writeFieldBegin('first', Thrift.Type.I64, 2);
    output.writeI64(this.first);
    output.writeFieldEnd();
  }
  if (this.last !== null && this.last !== undefined) {
    output.writeFieldBegin('last', Thrift.Type.I64, 3);
    output.writeI64(this.last);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_scroll_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_scroll_result.prototype = {};
ListWindowBackend_scroll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_scroll_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_scroll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_click_args = function(args) {
  this.row = null;
  this.col = null;
  this.flag = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
    if (args.flag !== undefined && args.flag !== null) {
      this.flag = args.flag;
    }
  }
};
ListWindowBackend_click_args.prototype = {};
ListWindowBackend_click_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.flag = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_click_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_click_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 2);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  if (this.flag !== null && this.flag !== undefined) {
    output.writeFieldBegin('flag', Thrift.Type.I32, 3);
    output.writeI32(this.flag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_click_result = function(args) {
};
ListWindowBackend_click_result.prototype = {};
ListWindowBackend_click_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_click_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_click_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_doubleClick_args = function(args) {
  this.row = null;
  this.col = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
  }
};
ListWindowBackend_doubleClick_args.prototype = {};
ListWindowBackend_doubleClick_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_doubleClick_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_doubleClick_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 2);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_doubleClick_result = function(args) {
};
ListWindowBackend_doubleClick_result.prototype = {};
ListWindowBackend_doubleClick_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_doubleClick_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_doubleClick_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getEditableString_args = function(args) {
  this.row = null;
  this.col = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
  }
};
ListWindowBackend_getEditableString_args.prototype = {};
ListWindowBackend_getEditableString_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getEditableString_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getEditableString_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 2);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getEditableString_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.EditInfo(args.success);
    }
  }
};
ListWindowBackend_getEditableString_result.prototype = {};
ListWindowBackend_getEditableString_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.EditInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getEditableString_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getEditableString_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setValue_args = function(args) {
  this.row = null;
  this.col = null;
  this.value = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
ListWindowBackend_setValue_args.prototype = {};
ListWindowBackend_setValue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setValue_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setValue_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 2);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setValue_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_setValue_result.prototype = {};
ListWindowBackend_setValue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setValue_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setValue_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getSelection_args = function(args) {
};
ListWindowBackend_getSelection_args.prototype = {};
ListWindowBackend_getSelection_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getSelection_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getSelection_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getSelection_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.SelRange]);
    }
  }
};
ListWindowBackend_getSelection_result.prototype = {};
ListWindowBackend_getSelection_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp351 = input.readListBegin();
        var _size50 = _rtmp351.size || 0;
        for (var _i52 = 0; _i52 < _size50; ++_i52) {
          var elem53 = null;
          elem53 = new ttypes.SelRange();
          elem53.read(input);
          this.success.push(elem53);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getSelection_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getSelection_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter54 in this.success) {
      if (this.success.hasOwnProperty(iter54)) {
        iter54 = this.success[iter54];
        iter54.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolTip_args = function(args) {
  this.row = null;
  this.col = null;
  this.pos = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
    if (args.pos !== undefined && args.pos !== null) {
      this.pos = args.pos;
    }
  }
};
ListWindowBackend_getToolTip_args.prototype = {};
ListWindowBackend_getToolTip_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pos = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolTip_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolTip_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 2);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  if (this.pos !== null && this.pos !== undefined) {
    output.writeFieldBegin('pos', Thrift.Type.I32, 3);
    output.writeI32(this.pos);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolTip_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Tooltip(args.success);
    }
  }
};
ListWindowBackend_getToolTip_result.prototype = {};
ListWindowBackend_getToolTip_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Tooltip();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolTip_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolTip_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_drop_args = function(args) {
  this.row = null;
  this.col = null;
  this.text = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
  }
};
ListWindowBackend_drop_args.prototype = {};
ListWindowBackend_drop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_drop_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_drop_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 2);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 3);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_drop_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_drop_result.prototype = {};
ListWindowBackend_drop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_drop_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_drop_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_dropLocal_args = function(args) {
  this.row = null;
  this.col = null;
  this.text = null;
  this.srcRow = null;
  this.srcCol = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.srcRow !== undefined && args.srcRow !== null) {
      this.srcRow = args.srcRow;
    }
    if (args.srcCol !== undefined && args.srcCol !== null) {
      this.srcCol = args.srcCol;
    }
  }
};
ListWindowBackend_dropLocal_args.prototype = {};
ListWindowBackend_dropLocal_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.srcRow = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.srcCol = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_dropLocal_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_dropLocal_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 2);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 3);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.srcRow !== null && this.srcRow !== undefined) {
    output.writeFieldBegin('srcRow', Thrift.Type.I64, 4);
    output.writeI64(this.srcRow);
    output.writeFieldEnd();
  }
  if (this.srcCol !== null && this.srcCol !== undefined) {
    output.writeFieldBegin('srcCol', Thrift.Type.I32, 5);
    output.writeI32(this.srcCol);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_dropLocal_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_dropLocal_result.prototype = {};
ListWindowBackend_dropLocal_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_dropLocal_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_dropLocal_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getDrag_args = function(args) {
  this.row = null;
  this.col = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
  }
};
ListWindowBackend_getDrag_args.prototype = {};
ListWindowBackend_getDrag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getDrag_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getDrag_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 2);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getDrag_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Drag(args.success);
    }
  }
};
ListWindowBackend_getDrag_result.prototype = {};
ListWindowBackend_getDrag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Drag();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getDrag_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getDrag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getHelpTag_args = function(args) {
};
ListWindowBackend_getHelpTag_args.prototype = {};
ListWindowBackend_getHelpTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getHelpTag_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getHelpTag_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getHelpTag_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.HelpTag(args.success);
    }
  }
};
ListWindowBackend_getHelpTag_result.prototype = {};
ListWindowBackend_getHelpTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.HelpTag();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getHelpTag_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getHelpTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_columnClick_args = function(args) {
  this.col = null;
  if (args) {
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
  }
};
ListWindowBackend_columnClick_args.prototype = {};
ListWindowBackend_columnClick_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_columnClick_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_columnClick_args');
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 1);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_columnClick_result = function(args) {
};
ListWindowBackend_columnClick_result.prototype = {};
ListWindowBackend_columnClick_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_columnClick_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_columnClick_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_handleChar_args = function(args) {
  this.c = null;
  this.repeat = null;
  if (args) {
    if (args.c !== undefined && args.c !== null) {
      this.c = args.c;
    }
    if (args.repeat !== undefined && args.repeat !== null) {
      this.repeat = args.repeat;
    }
  }
};
ListWindowBackend_handleChar_args.prototype = {};
ListWindowBackend_handleChar_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.c = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.repeat = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_handleChar_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_handleChar_args');
  if (this.c !== null && this.c !== undefined) {
    output.writeFieldBegin('c', Thrift.Type.I32, 1);
    output.writeI32(this.c);
    output.writeFieldEnd();
  }
  if (this.repeat !== null && this.repeat !== undefined) {
    output.writeFieldBegin('repeat', Thrift.Type.I32, 2);
    output.writeI32(this.repeat);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_handleChar_result = function(args) {
};
ListWindowBackend_handleChar_result.prototype = {};
ListWindowBackend_handleChar_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_handleChar_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_handleChar_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_handleKeyDown_args = function(args) {
  this.c = null;
  this.repeat = null;
  this.shift = null;
  this.ctrl = null;
  if (args) {
    if (args.c !== undefined && args.c !== null) {
      this.c = args.c;
    }
    if (args.repeat !== undefined && args.repeat !== null) {
      this.repeat = args.repeat;
    }
    if (args.shift !== undefined && args.shift !== null) {
      this.shift = args.shift;
    }
    if (args.ctrl !== undefined && args.ctrl !== null) {
      this.ctrl = args.ctrl;
    }
  }
};
ListWindowBackend_handleKeyDown_args.prototype = {};
ListWindowBackend_handleKeyDown_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.c = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.repeat = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.shift = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.ctrl = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_handleKeyDown_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_handleKeyDown_args');
  if (this.c !== null && this.c !== undefined) {
    output.writeFieldBegin('c', Thrift.Type.I32, 1);
    output.writeI32(this.c);
    output.writeFieldEnd();
  }
  if (this.repeat !== null && this.repeat !== undefined) {
    output.writeFieldBegin('repeat', Thrift.Type.I32, 2);
    output.writeI32(this.repeat);
    output.writeFieldEnd();
  }
  if (this.shift !== null && this.shift !== undefined) {
    output.writeFieldBegin('shift', Thrift.Type.BOOL, 3);
    output.writeBool(this.shift);
    output.writeFieldEnd();
  }
  if (this.ctrl !== null && this.ctrl !== undefined) {
    output.writeFieldBegin('ctrl', Thrift.Type.BOOL, 4);
    output.writeBool(this.ctrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_handleKeyDown_result = function(args) {
};
ListWindowBackend_handleKeyDown_result.prototype = {};
ListWindowBackend_handleKeyDown_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_handleKeyDown_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_handleKeyDown_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_keyNavigate_args = function(args) {
  this.op = null;
  this.repeat = null;
  this.flags = null;
  this.rowsInPage = null;
  if (args) {
    if (args.op !== undefined && args.op !== null) {
      this.op = args.op;
    }
    if (args.repeat !== undefined && args.repeat !== null) {
      this.repeat = args.repeat;
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = args.flags;
    }
    if (args.rowsInPage !== undefined && args.rowsInPage !== null) {
      this.rowsInPage = args.rowsInPage;
    }
  }
};
ListWindowBackend_keyNavigate_args.prototype = {};
ListWindowBackend_keyNavigate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.op = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.repeat = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.flags = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.rowsInPage = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_keyNavigate_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_keyNavigate_args');
  if (this.op !== null && this.op !== undefined) {
    output.writeFieldBegin('op', Thrift.Type.I32, 1);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.repeat !== null && this.repeat !== undefined) {
    output.writeFieldBegin('repeat', Thrift.Type.I32, 2);
    output.writeI32(this.repeat);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I32, 3);
    output.writeI32(this.flags);
    output.writeFieldEnd();
  }
  if (this.rowsInPage !== null && this.rowsInPage !== undefined) {
    output.writeFieldBegin('rowsInPage', Thrift.Type.I32, 4);
    output.writeI32(this.rowsInPage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_keyNavigate_result = function(args) {
};
ListWindowBackend_keyNavigate_result.prototype = {};
ListWindowBackend_keyNavigate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_keyNavigate_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_keyNavigate_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_toggleMoreOrLess_args = function(args) {
  this.row = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
  }
};
ListWindowBackend_toggleMoreOrLess_args.prototype = {};
ListWindowBackend_toggleMoreOrLess_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_toggleMoreOrLess_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_toggleMoreOrLess_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_toggleMoreOrLess_result = function(args) {
};
ListWindowBackend_toggleMoreOrLess_result.prototype = {};
ListWindowBackend_toggleMoreOrLess_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_toggleMoreOrLess_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_toggleMoreOrLess_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_dropOutsideContent_args = function(args) {
};
ListWindowBackend_dropOutsideContent_args.prototype = {};
ListWindowBackend_dropOutsideContent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_dropOutsideContent_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_dropOutsideContent_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_dropOutsideContent_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_dropOutsideContent_result.prototype = {};
ListWindowBackend_dropOutsideContent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_dropOutsideContent_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_dropOutsideContent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_isSliding_args = function(args) {
};
ListWindowBackend_isSliding_args.prototype = {};
ListWindowBackend_isSliding_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_isSliding_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_isSliding_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_isSliding_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_isSliding_result.prototype = {};
ListWindowBackend_isSliding_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_isSliding_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_isSliding_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getChunkInfo_args = function(args) {
};
ListWindowBackend_getChunkInfo_args.prototype = {};
ListWindowBackend_getChunkInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getChunkInfo_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getChunkInfo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getChunkInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ChunkInfo(args.success);
    }
  }
};
ListWindowBackend_getChunkInfo_result.prototype = {};
ListWindowBackend_getChunkInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChunkInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getChunkInfo_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getChunkInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_addAfter_args = function(args) {
  this.minToAdd = null;
  this.maxToTrim = null;
  if (args) {
    if (args.minToAdd !== undefined && args.minToAdd !== null) {
      this.minToAdd = args.minToAdd;
    }
    if (args.maxToTrim !== undefined && args.maxToTrim !== null) {
      this.maxToTrim = args.maxToTrim;
    }
  }
};
ListWindowBackend_addAfter_args.prototype = {};
ListWindowBackend_addAfter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.minToAdd = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maxToTrim = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_addAfter_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_addAfter_args');
  if (this.minToAdd !== null && this.minToAdd !== undefined) {
    output.writeFieldBegin('minToAdd', Thrift.Type.I32, 1);
    output.writeI32(this.minToAdd);
    output.writeFieldEnd();
  }
  if (this.maxToTrim !== null && this.maxToTrim !== undefined) {
    output.writeFieldBegin('maxToTrim', Thrift.Type.I32, 2);
    output.writeI32(this.maxToTrim);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_addAfter_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AddRowsResult(args.success);
    }
  }
};
ListWindowBackend_addAfter_result.prototype = {};
ListWindowBackend_addAfter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AddRowsResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_addAfter_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_addAfter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_addBefore_args = function(args) {
  this.minToAdd = null;
  this.maxToTrim = null;
  if (args) {
    if (args.minToAdd !== undefined && args.minToAdd !== null) {
      this.minToAdd = args.minToAdd;
    }
    if (args.maxToTrim !== undefined && args.maxToTrim !== null) {
      this.maxToTrim = args.maxToTrim;
    }
  }
};
ListWindowBackend_addBefore_args.prototype = {};
ListWindowBackend_addBefore_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.minToAdd = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maxToTrim = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_addBefore_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_addBefore_args');
  if (this.minToAdd !== null && this.minToAdd !== undefined) {
    output.writeFieldBegin('minToAdd', Thrift.Type.I32, 1);
    output.writeI32(this.minToAdd);
    output.writeFieldEnd();
  }
  if (this.maxToTrim !== null && this.maxToTrim !== undefined) {
    output.writeFieldBegin('maxToTrim', Thrift.Type.I32, 2);
    output.writeI32(this.maxToTrim);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_addBefore_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AddRowsResult(args.success);
    }
  }
};
ListWindowBackend_addBefore_result.prototype = {};
ListWindowBackend_addBefore_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AddRowsResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_addBefore_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_addBefore_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_navigateToFraction_args = function(args) {
  this.fraction = null;
  this.chunkPos = null;
  this.minLines = null;
  if (args) {
    if (args.fraction !== undefined && args.fraction !== null) {
      this.fraction = args.fraction;
    }
    if (args.chunkPos !== undefined && args.chunkPos !== null) {
      this.chunkPos = args.chunkPos;
    }
    if (args.minLines !== undefined && args.minLines !== null) {
      this.minLines = args.minLines;
    }
  }
};
ListWindowBackend_navigateToFraction_args.prototype = {};
ListWindowBackend_navigateToFraction_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.fraction = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.chunkPos = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.minLines = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_navigateToFraction_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_navigateToFraction_args');
  if (this.fraction !== null && this.fraction !== undefined) {
    output.writeFieldBegin('fraction', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.fraction);
    output.writeFieldEnd();
  }
  if (this.chunkPos !== null && this.chunkPos !== undefined) {
    output.writeFieldBegin('chunkPos', Thrift.Type.I32, 3);
    output.writeI32(this.chunkPos);
    output.writeFieldEnd();
  }
  if (this.minLines !== null && this.minLines !== undefined) {
    output.writeFieldBegin('minLines', Thrift.Type.I32, 2);
    output.writeI32(this.minLines);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_navigateToFraction_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.NavigateResult(args.success);
    }
  }
};
ListWindowBackend_navigateToFraction_result.prototype = {};
ListWindowBackend_navigateToFraction_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.NavigateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_navigateToFraction_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_navigateToFraction_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_navigateTo_args = function(args) {
  this.toWhat = null;
  this.chunkPos = null;
  this.minLines = null;
  if (args) {
    if (args.toWhat !== undefined && args.toWhat !== null) {
      this.toWhat = args.toWhat;
    }
    if (args.chunkPos !== undefined && args.chunkPos !== null) {
      this.chunkPos = args.chunkPos;
    }
    if (args.minLines !== undefined && args.minLines !== null) {
      this.minLines = args.minLines;
    }
  }
};
ListWindowBackend_navigateTo_args.prototype = {};
ListWindowBackend_navigateTo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.toWhat = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.chunkPos = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.minLines = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_navigateTo_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_navigateTo_args');
  if (this.toWhat !== null && this.toWhat !== undefined) {
    output.writeFieldBegin('toWhat', Thrift.Type.STRING, 1);
    output.writeString(this.toWhat);
    output.writeFieldEnd();
  }
  if (this.chunkPos !== null && this.chunkPos !== undefined) {
    output.writeFieldBegin('chunkPos', Thrift.Type.I32, 3);
    output.writeI32(this.chunkPos);
    output.writeFieldEnd();
  }
  if (this.minLines !== null && this.minLines !== undefined) {
    output.writeFieldBegin('minLines', Thrift.Type.I32, 2);
    output.writeI32(this.minLines);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_navigateTo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.NavigateResult(args.success);
    }
  }
};
ListWindowBackend_navigateTo_result.prototype = {};
ListWindowBackend_navigateTo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.NavigateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_navigateTo_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_navigateTo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getSel_args = function(args) {
};
ListWindowBackend_getSel_args.prototype = {};
ListWindowBackend_getSel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getSel_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getSel_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getSel_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SelectionResult(args.success);
    }
  }
};
ListWindowBackend_getSel_result.prototype = {};
ListWindowBackend_getSel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SelectionResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getSel_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getSel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setSel_args = function(args) {
  this.row = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
  }
};
ListWindowBackend_setSel_args.prototype = {};
ListWindowBackend_setSel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.row = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setSel_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setSel_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I32, 1);
    output.writeI32(this.row);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setSel_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SelectionResult(args.success);
    }
  }
};
ListWindowBackend_setSel_result.prototype = {};
ListWindowBackend_setSel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SelectionResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setSel_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setSel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_keyNav_args = function(args) {
  this.op = null;
  this.repeat = null;
  this.rowsInPage = null;
  if (args) {
    if (args.op !== undefined && args.op !== null) {
      this.op = args.op;
    }
    if (args.repeat !== undefined && args.repeat !== null) {
      this.repeat = args.repeat;
    }
    if (args.rowsInPage !== undefined && args.rowsInPage !== null) {
      this.rowsInPage = args.rowsInPage;
    }
  }
};
ListWindowBackend_keyNav_args.prototype = {};
ListWindowBackend_keyNav_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.op = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.repeat = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.rowsInPage = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_keyNav_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_keyNav_args');
  if (this.op !== null && this.op !== undefined) {
    output.writeFieldBegin('op', Thrift.Type.I32, 1);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.repeat !== null && this.repeat !== undefined) {
    output.writeFieldBegin('repeat', Thrift.Type.I32, 2);
    output.writeI32(this.repeat);
    output.writeFieldEnd();
  }
  if (this.rowsInPage !== null && this.rowsInPage !== undefined) {
    output.writeFieldBegin('rowsInPage', Thrift.Type.I32, 3);
    output.writeI32(this.rowsInPage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_keyNav_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_keyNav_result.prototype = {};
ListWindowBackend_keyNav_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_keyNav_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_keyNav_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolbarDefinition_args = function(args) {
};
ListWindowBackend_getToolbarDefinition_args.prototype = {};
ListWindowBackend_getToolbarDefinition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolbarDefinition_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolbarDefinition_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolbarDefinition_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_getToolbarDefinition_result.prototype = {};
ListWindowBackend_getToolbarDefinition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolbarDefinition_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolbarDefinition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setToolbarItemValue_args = function(args) {
  this.id = null;
  this.property = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.property !== undefined && args.property !== null) {
      this.property = args.property;
    }
  }
};
ListWindowBackend_setToolbarItemValue_args.prototype = {};
ListWindowBackend_setToolbarItemValue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.property = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setToolbarItemValue_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setToolbarItemValue_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.property !== null && this.property !== undefined) {
    output.writeFieldBegin('property', Thrift.Type.STRING, 2);
    output.writeString(this.property);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setToolbarItemValue_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_setToolbarItemValue_result.prototype = {};
ListWindowBackend_setToolbarItemValue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setToolbarItemValue_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setToolbarItemValue_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolbarItemValue_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
ListWindowBackend_getToolbarItemValue_args.prototype = {};
ListWindowBackend_getToolbarItemValue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolbarItemValue_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolbarItemValue_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolbarItemValue_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_getToolbarItemValue_result.prototype = {};
ListWindowBackend_getToolbarItemValue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolbarItemValue_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolbarItemValue_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolbarItemState_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
ListWindowBackend_getToolbarItemState_args.prototype = {};
ListWindowBackend_getToolbarItemState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolbarItemState_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolbarItemState_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolbarItemState_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ToolbarItemState(args.success);
    }
  }
};
ListWindowBackend_getToolbarItemState_result.prototype = {};
ListWindowBackend_getToolbarItemState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ToolbarItemState();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolbarItemState_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolbarItemState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolbarItemTooltip_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
ListWindowBackend_getToolbarItemTooltip_args.prototype = {};
ListWindowBackend_getToolbarItemTooltip_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolbarItemTooltip_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolbarItemTooltip_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolbarItemTooltip_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_getToolbarItemTooltip_result.prototype = {};
ListWindowBackend_getToolbarItemTooltip_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolbarItemTooltip_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolbarItemTooltip_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackendClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
Thrift.inherits(ListWindowBackendClient, HeartbeatServiceClient);
ListWindowBackendClient.prototype.seqid = function() { return this._seqid; };
ListWindowBackendClient.prototype.new_seqid = function() { return this._seqid += 1; };

ListWindowBackendClient.prototype.connect = function(listener, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_connect(listener);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_connect(listener);
  }
};

ListWindowBackendClient.prototype.send_connect = function(listener) {
  var output = new this.pClass(this.output);
  var params = {
    listener: listener
  };
  var args = new ListWindowBackend_connect_args(params);
  try {
    output.writeMessageBegin('connect', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_connect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_connect_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ListWindowBackendClient.prototype.disconnect = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disconnect();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disconnect();
  }
};

ListWindowBackendClient.prototype.send_disconnect = function() {
  var output = new this.pClass(this.output);
  var args = new ListWindowBackend_disconnect_args();
  try {
    output.writeMessageBegin('disconnect', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_disconnect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_disconnect_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ListWindowBackendClient.prototype.setContentStorageFile = function(filename, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setContentStorageFile(filename);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setContentStorageFile(filename);
  }
};

ListWindowBackendClient.prototype.send_setContentStorageFile = function(filename) {
  var output = new this.pClass(this.output);
  var params = {
    filename: filename
  };
  var args = new ListWindowBackend_setContentStorageFile_args(params);
  try {
    output.writeMessageBegin('setContentStorageFile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_setContentStorageFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_setContentStorageFile_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ListWindowBackendClient.prototype.getNumberOfRows = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNumberOfRows();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNumberOfRows();
  }
};

ListWindowBackendClient.prototype.send_getNumberOfRows = function() {
  var output = new this.pClass(this.output);
  var args = new ListWindowBackend_getNumberOfRows_args();
  try {
    output.writeMessageBegin('getNumberOfRows', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getNumberOfRows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_getNumberOfRows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNumberOfRows failed: unknown result');
};

ListWindowBackendClient.prototype.getRow = function(index, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRow(index);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRow(index);
  }
};

ListWindowBackendClient.prototype.send_getRow = function(index) {
  var output = new this.pClass(this.output);
  var params = {
    index: index
  };
  var args = new ListWindowBackend_getRow_args(params);
  try {
    output.writeMessageBegin('getRow', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_getRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRow failed: unknown result');
};

ListWindowBackendClient.prototype.setVisibleRows = function(first, last, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setVisibleRows(first, last);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setVisibleRows(first, last);
  }
};

ListWindowBackendClient.prototype.send_setVisibleRows = function(first, last) {
  var output = new this.pClass(this.output);
  var params = {
    first: first,
    last: last
  };
  var args = new ListWindowBackend_setVisibleRows_args(params);
  try {
    output.writeMessageBegin('setVisibleRows', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_setVisibleRows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_setVisibleRows_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ListWindowBackendClient.prototype.show = function(on, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_show(on);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_show(on);
  }
};

ListWindowBackendClient.prototype.send_show = function(on) {
  var output = new this.pClass(this.output);
  var params = {
    on: on
  };
  var args = new ListWindowBackend_show_args(params);
  try {
    output.writeMessageBegin('show', Thrift.MessageType.ONEWAY, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    this.output.flush();
    var callback = this._reqs[this.seqid()] || function() {};
    delete this._reqs[this.seqid()];
    callback(null);
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.getColumnInfo = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getColumnInfo();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getColumnInfo();
  }
};

ListWindowBackendClient.prototype.send_getColumnInfo = function() {
  var output = new this.pClass(this.output);
  var args = new ListWindowBackend_getColumnInfo_args();
  try {
    output.writeMessageBegin('getColumnInfo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getColumnInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_getColumnInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getColumnInfo failed: unknown result');
};

ListWindowBackendClient.prototype.getListSpec = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getListSpec();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getListSpec();
  }
};

ListWindowBackendClient.prototype.send_getListSpec = function() {
  var output = new this.pClass(this.output);
  var args = new ListWindowBackend_getListSpec_args();
  try {
    output.writeMessageBegin('getListSpec', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getListSpec = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_getListSpec_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getListSpec failed: unknown result');
};

ListWindowBackendClient.prototype.toggleExpansion = function(index, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_toggleExpansion(index);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_toggleExpansion(index);
  }
};

ListWindowBackendClient.prototype.send_toggleExpansion = function(index) {
  var output = new this.pClass(this.output);
  var params = {
    index: index
  };
  var args = new ListWindowBackend_toggleExpansion_args(params);
  try {
    output.writeMessageBegin('toggleExpansion', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_toggleExpansion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_toggleExpansion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('toggleExpansion failed: unknown result');
};

ListWindowBackendClient.prototype.toggleCheckmark = function(index, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_toggleCheckmark(index);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_toggleCheckmark(index);
  }
};

ListWindowBackendClient.prototype.send_toggleCheckmark = function(index) {
  var output = new this.pClass(this.output);
  var params = {
    index: index
  };
  var args = new ListWindowBackend_toggleCheckmark_args(params);
  try {
    output.writeMessageBegin('toggleCheckmark', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_toggleCheckmark = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_toggleCheckmark_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ListWindowBackendClient.prototype.getContextMenu = function(row, col, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getContextMenu(row, col);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getContextMenu(row, col);
  }
};

ListWindowBackendClient.prototype.send_getContextMenu = function(row, col) {
  var output = new this.pClass(this.output);
  var params = {
    row: row,
    col: col
  };
  var args = new ListWindowBackend_getContextMenu_args(params);
  try {
    output.writeMessageBegin('getContextMenu', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getContextMenu = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_getContextMenu_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContextMenu failed: unknown result');
};

ListWindowBackendClient.prototype.handleContextMenu = function(command, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_handleContextMenu(command);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_handleContextMenu(command);
  }
};

ListWindowBackendClient.prototype.send_handleContextMenu = function(command) {
  var output = new this.pClass(this.output);
  var params = {
    command: command
  };
  var args = new ListWindowBackend_handleContextMenu_args(params);
  try {
    output.writeMessageBegin('handleContextMenu', Thrift.MessageType.ONEWAY, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    this.output.flush();
    var callback = this._reqs[this.seqid()] || function() {};
    delete this._reqs[this.seqid()];
    callback(null);
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.getDisplayName = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDisplayName();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDisplayName();
  }
};

ListWindowBackendClient.prototype.send_getDisplayName = function() {
  var output = new this.pClass(this.output);
  var args = new ListWindowBackend_getDisplayName_args();
  try {
    output.writeMessageBegin('getDisplayName', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getDisplayName = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_getDisplayName_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDisplayName failed: unknown result');
};

ListWindowBackendClient.prototype.scroll = function(op, first, last, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scroll(op, first, last);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scroll(op, first, last);
  }
};

ListWindowBackendClient.prototype.send_scroll = function(op, first, last) {
  var output = new this.pClass(this.output);
  var params = {
    op: op,
    first: first,
    last: last
  };
  var args = new ListWindowBackend_scroll_args(params);
  try {
    output.writeMessageBegin('scroll', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_scroll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_scroll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scroll failed: unknown result');
};

ListWindowBackendClient.prototype.click = function(row, col, flag, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_click(row, col, flag);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_click(row, col, flag);
  }
};

ListWindowBackendClient.prototype.send_click = function(row, col, flag) {
  var output = new this.pClass(this.output);
  var params = {
    row: row,
    col: col,
    flag: flag
  };
  var args = new ListWindowBackend_click_args(params);
  try {
    output.writeMessageBegin('click', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_click = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_click_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ListWindowBackendClient.prototype.doubleClick = function(row, col, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_doubleClick(row, col);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_doubleClick(row, col);
  }
};

ListWindowBackendClient.prototype.send_doubleClick = function(row, col) {
  var output = new this.pClass(this.output);
  var params = {
    row: row,
    col: col
  };
  var args = new ListWindowBackend_doubleClick_args(params);
  try {
    output.writeMessageBegin('doubleClick', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_doubleClick = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_doubleClick_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ListWindowBackendClient.prototype.getEditableString = function(row, col, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getEditableString(row, col);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getEditableString(row, col);
  }
};

ListWindowBackendClient.prototype.send_getEditableString = function(row, col) {
  var output = new this.pClass(this.output);
  var params = {
    row: row,
    col: col
  };
  var args = new ListWindowBackend_getEditableString_args(params);
  try {
    output.writeMessageBegin('getEditableString', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getEditableString = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_getEditableString_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getEditableString failed: unknown result');
};

ListWindowBackendClient.prototype.setValue = function(row, col, value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setValue(row, col, value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setValue(row, col, value);
  }
};

ListWindowBackendClient.prototype.send_setValue = function(row, col, value) {
  var output = new this.pClass(this.output);
  var params = {
    row: row,
    col: col,
    value: value
  };
  var args = new ListWindowBackend_setValue_args(params);
  try {
    output.writeMessageBegin('setValue', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_setValue = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_setValue_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setValue failed: unknown result');
};

ListWindowBackendClient.prototype.getSelection = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSelection();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSelection();
  }
};

ListWindowBackendClient.prototype.send_getSelection = function() {
  var output = new this.pClass(this.output);
  var args = new ListWindowBackend_getSelection_args();
  try {
    output.writeMessageBegin('getSelection', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getSelection = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_getSelection_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSelection failed: unknown result');
};

ListWindowBackendClient.prototype.getToolTip = function(row, col, pos, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getToolTip(row, col, pos);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getToolTip(row, col, pos);
  }
};

ListWindowBackendClient.prototype.send_getToolTip = function(row, col, pos) {
  var output = new this.pClass(this.output);
  var params = {
    row: row,
    col: col,
    pos: pos
  };
  var args = new ListWindowBackend_getToolTip_args(params);
  try {
    output.writeMessageBegin('getToolTip', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getToolTip = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_getToolTip_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getToolTip failed: unknown result');
};

ListWindowBackendClient.prototype.drop = function(row, col, text, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop(row, col, text);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop(row, col, text);
  }
};

ListWindowBackendClient.prototype.send_drop = function(row, col, text) {
  var output = new this.pClass(this.output);
  var params = {
    row: row,
    col: col,
    text: text
  };
  var args = new ListWindowBackend_drop_args(params);
  try {
    output.writeMessageBegin('drop', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_drop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_drop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('drop failed: unknown result');
};

ListWindowBackendClient.prototype.dropLocal = function(row, col, text, srcRow, srcCol, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_dropLocal(row, col, text, srcRow, srcCol);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_dropLocal(row, col, text, srcRow, srcCol);
  }
};

ListWindowBackendClient.prototype.send_dropLocal = function(row, col, text, srcRow, srcCol) {
  var output = new this.pClass(this.output);
  var params = {
    row: row,
    col: col,
    text: text,
    srcRow: srcRow,
    srcCol: srcCol
  };
  var args = new ListWindowBackend_dropLocal_args(params);
  try {
    output.writeMessageBegin('dropLocal', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_dropLocal = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_dropLocal_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('dropLocal failed: unknown result');
};

ListWindowBackendClient.prototype.getDrag = function(row, col, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDrag(row, col);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDrag(row, col);
  }
};

ListWindowBackendClient.prototype.send_getDrag = function(row, col) {
  var output = new this.pClass(this.output);
  var params = {
    row: row,
    col: col
  };
  var args = new ListWindowBackend_getDrag_args(params);
  try {
    output.writeMessageBegin('getDrag', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getDrag = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_getDrag_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDrag failed: unknown result');
};

ListWindowBackendClient.prototype.getHelpTag = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getHelpTag();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getHelpTag();
  }
};

ListWindowBackendClient.prototype.send_getHelpTag = function() {
  var output = new this.pClass(this.output);
  var args = new ListWindowBackend_getHelpTag_args();
  try {
    output.writeMessageBegin('getHelpTag', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getHelpTag = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_getHelpTag_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getHelpTag failed: unknown result');
};

ListWindowBackendClient.prototype.columnClick = function(col, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_columnClick(col);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_columnClick(col);
  }
};

ListWindowBackendClient.prototype.send_columnClick = function(col) {
  var output = new this.pClass(this.output);
  var params = {
    col: col
  };
  var args = new ListWindowBackend_columnClick_args(params);
  try {
    output.writeMessageBegin('columnClick', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_columnClick = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_columnClick_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ListWindowBackendClient.prototype.handleChar = function(c, repeat, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_handleChar(c, repeat);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_handleChar(c, repeat);
  }
};

ListWindowBackendClient.prototype.send_handleChar = function(c, repeat) {
  var output = new this.pClass(this.output);
  var params = {
    c: c,
    repeat: repeat
  };
  var args = new ListWindowBackend_handleChar_args(params);
  try {
    output.writeMessageBegin('handleChar', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_handleChar = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_handleChar_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ListWindowBackendClient.prototype.handleKeyDown = function(c, repeat, shift, ctrl, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_handleKeyDown(c, repeat, shift, ctrl);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_handleKeyDown(c, repeat, shift, ctrl);
  }
};

ListWindowBackendClient.prototype.send_handleKeyDown = function(c, repeat, shift, ctrl) {
  var output = new this.pClass(this.output);
  var params = {
    c: c,
    repeat: repeat,
    shift: shift,
    ctrl: ctrl
  };
  var args = new ListWindowBackend_handleKeyDown_args(params);
  try {
    output.writeMessageBegin('handleKeyDown', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_handleKeyDown = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_handleKeyDown_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ListWindowBackendClient.prototype.keyNavigate = function(op, repeat, flags, rowsInPage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_keyNavigate(op, repeat, flags, rowsInPage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_keyNavigate(op, repeat, flags, rowsInPage);
  }
};

ListWindowBackendClient.prototype.send_keyNavigate = function(op, repeat, flags, rowsInPage) {
  var output = new this.pClass(this.output);
  var params = {
    op: op,
    repeat: repeat,
    flags: flags,
    rowsInPage: rowsInPage
  };
  var args = new ListWindowBackend_keyNavigate_args(params);
  try {
    output.writeMessageBegin('keyNavigate', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_keyNavigate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_keyNavigate_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ListWindowBackendClient.prototype.toggleMoreOrLess = function(row, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_toggleMoreOrLess(row);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_toggleMoreOrLess(row);
  }
};

ListWindowBackendClient.prototype.send_toggleMoreOrLess = function(row) {
  var output = new this.pClass(this.output);
  var params = {
    row: row
  };
  var args = new ListWindowBackend_toggleMoreOrLess_args(params);
  try {
    output.writeMessageBegin('toggleMoreOrLess', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_toggleMoreOrLess = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_toggleMoreOrLess_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ListWindowBackendClient.prototype.dropOutsideContent = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_dropOutsideContent();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_dropOutsideContent();
  }
};

ListWindowBackendClient.prototype.send_dropOutsideContent = function() {
  var output = new this.pClass(this.output);
  var args = new ListWindowBackend_dropOutsideContent_args();
  try {
    output.writeMessageBegin('dropOutsideContent', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_dropOutsideContent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_dropOutsideContent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('dropOutsideContent failed: unknown result');
};

ListWindowBackendClient.prototype.isSliding = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isSliding();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isSliding();
  }
};

ListWindowBackendClient.prototype.send_isSliding = function() {
  var output = new this.pClass(this.output);
  var args = new ListWindowBackend_isSliding_args();
  try {
    output.writeMessageBegin('isSliding', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_isSliding = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_isSliding_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isSliding failed: unknown result');
};

ListWindowBackendClient.prototype.getChunkInfo = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getChunkInfo();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getChunkInfo();
  }
};

ListWindowBackendClient.prototype.send_getChunkInfo = function() {
  var output = new this.pClass(this.output);
  var args = new ListWindowBackend_getChunkInfo_args();
  try {
    output.writeMessageBegin('getChunkInfo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getChunkInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_getChunkInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChunkInfo failed: unknown result');
};

ListWindowBackendClient.prototype.addAfter = function(minToAdd, maxToTrim, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addAfter(minToAdd, maxToTrim);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addAfter(minToAdd, maxToTrim);
  }
};

ListWindowBackendClient.prototype.send_addAfter = function(minToAdd, maxToTrim) {
  var output = new this.pClass(this.output);
  var params = {
    minToAdd: minToAdd,
    maxToTrim: maxToTrim
  };
  var args = new ListWindowBackend_addAfter_args(params);
  try {
    output.writeMessageBegin('addAfter', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_addAfter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_addAfter_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addAfter failed: unknown result');
};

ListWindowBackendClient.prototype.addBefore = function(minToAdd, maxToTrim, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addBefore(minToAdd, maxToTrim);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addBefore(minToAdd, maxToTrim);
  }
};

ListWindowBackendClient.prototype.send_addBefore = function(minToAdd, maxToTrim) {
  var output = new this.pClass(this.output);
  var params = {
    minToAdd: minToAdd,
    maxToTrim: maxToTrim
  };
  var args = new ListWindowBackend_addBefore_args(params);
  try {
    output.writeMessageBegin('addBefore', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_addBefore = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_addBefore_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addBefore failed: unknown result');
};

ListWindowBackendClient.prototype.navigateToFraction = function(fraction, chunkPos, minLines, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_navigateToFraction(fraction, chunkPos, minLines);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_navigateToFraction(fraction, chunkPos, minLines);
  }
};

ListWindowBackendClient.prototype.send_navigateToFraction = function(fraction, chunkPos, minLines) {
  var output = new this.pClass(this.output);
  var params = {
    fraction: fraction,
    chunkPos: chunkPos,
    minLines: minLines
  };
  var args = new ListWindowBackend_navigateToFraction_args(params);
  try {
    output.writeMessageBegin('navigateToFraction', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_navigateToFraction = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_navigateToFraction_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('navigateToFraction failed: unknown result');
};

ListWindowBackendClient.prototype.navigateTo = function(toWhat, chunkPos, minLines, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_navigateTo(toWhat, chunkPos, minLines);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_navigateTo(toWhat, chunkPos, minLines);
  }
};

ListWindowBackendClient.prototype.send_navigateTo = function(toWhat, chunkPos, minLines) {
  var output = new this.pClass(this.output);
  var params = {
    toWhat: toWhat,
    chunkPos: chunkPos,
    minLines: minLines
  };
  var args = new ListWindowBackend_navigateTo_args(params);
  try {
    output.writeMessageBegin('navigateTo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_navigateTo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_navigateTo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('navigateTo failed: unknown result');
};

ListWindowBackendClient.prototype.getSel = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSel();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSel();
  }
};

ListWindowBackendClient.prototype.send_getSel = function() {
  var output = new this.pClass(this.output);
  var args = new ListWindowBackend_getSel_args();
  try {
    output.writeMessageBegin('getSel', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getSel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_getSel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSel failed: unknown result');
};

ListWindowBackendClient.prototype.setSel = function(row, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setSel(row);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setSel(row);
  }
};

ListWindowBackendClient.prototype.send_setSel = function(row) {
  var output = new this.pClass(this.output);
  var params = {
    row: row
  };
  var args = new ListWindowBackend_setSel_args(params);
  try {
    output.writeMessageBegin('setSel', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_setSel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_setSel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setSel failed: unknown result');
};

ListWindowBackendClient.prototype.keyNav = function(op, repeat, rowsInPage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_keyNav(op, repeat, rowsInPage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_keyNav(op, repeat, rowsInPage);
  }
};

ListWindowBackendClient.prototype.send_keyNav = function(op, repeat, rowsInPage) {
  var output = new this.pClass(this.output);
  var params = {
    op: op,
    repeat: repeat,
    rowsInPage: rowsInPage
  };
  var args = new ListWindowBackend_keyNav_args(params);
  try {
    output.writeMessageBegin('keyNav', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_keyNav = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_keyNav_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('keyNav failed: unknown result');
};

ListWindowBackendClient.prototype.getToolbarDefinition = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getToolbarDefinition();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getToolbarDefinition();
  }
};

ListWindowBackendClient.prototype.send_getToolbarDefinition = function() {
  var output = new this.pClass(this.output);
  var args = new ListWindowBackend_getToolbarDefinition_args();
  try {
    output.writeMessageBegin('getToolbarDefinition', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getToolbarDefinition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_getToolbarDefinition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getToolbarDefinition failed: unknown result');
};

ListWindowBackendClient.prototype.setToolbarItemValue = function(id, property, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setToolbarItemValue(id, property);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setToolbarItemValue(id, property);
  }
};

ListWindowBackendClient.prototype.send_setToolbarItemValue = function(id, property) {
  var output = new this.pClass(this.output);
  var params = {
    id: id,
    property: property
  };
  var args = new ListWindowBackend_setToolbarItemValue_args(params);
  try {
    output.writeMessageBegin('setToolbarItemValue', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_setToolbarItemValue = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_setToolbarItemValue_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setToolbarItemValue failed: unknown result');
};

ListWindowBackendClient.prototype.getToolbarItemValue = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getToolbarItemValue(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getToolbarItemValue(id);
  }
};

ListWindowBackendClient.prototype.send_getToolbarItemValue = function(id) {
  var output = new this.pClass(this.output);
  var params = {
    id: id
  };
  var args = new ListWindowBackend_getToolbarItemValue_args(params);
  try {
    output.writeMessageBegin('getToolbarItemValue', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getToolbarItemValue = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_getToolbarItemValue_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getToolbarItemValue failed: unknown result');
};

ListWindowBackendClient.prototype.getToolbarItemState = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getToolbarItemState(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getToolbarItemState(id);
  }
};

ListWindowBackendClient.prototype.send_getToolbarItemState = function(id) {
  var output = new this.pClass(this.output);
  var params = {
    id: id
  };
  var args = new ListWindowBackend_getToolbarItemState_args(params);
  try {
    output.writeMessageBegin('getToolbarItemState', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getToolbarItemState = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_getToolbarItemState_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getToolbarItemState failed: unknown result');
};

ListWindowBackendClient.prototype.getToolbarItemTooltip = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getToolbarItemTooltip(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getToolbarItemTooltip(id);
  }
};

ListWindowBackendClient.prototype.send_getToolbarItemTooltip = function(id) {
  var output = new this.pClass(this.output);
  var params = {
    id: id
  };
  var args = new ListWindowBackend_getToolbarItemTooltip_args(params);
  try {
    output.writeMessageBegin('getToolbarItemTooltip', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getToolbarItemTooltip = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ListWindowBackend_getToolbarItemTooltip_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getToolbarItemTooltip failed: unknown result');
};
var ListWindowBackendProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
Thrift.inherits(ListWindowBackendProcessor, HeartbeatServiceProcessor);
ListWindowBackendProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
ListWindowBackendProcessor.prototype.process_connect = function(seqid, input, output) {
  var args = new ListWindowBackend_connect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.connect.length === 1) {
    Q.fcall(this._handler.connect.bind(this._handler),
      args.listener
    ).then(function(result) {
      var result_obj = new ListWindowBackend_connect_result({success: result});
      output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("connect", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.connect(args.listener, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_connect_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("connect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_disconnect = function(seqid, input, output) {
  var args = new ListWindowBackend_disconnect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disconnect.length === 0) {
    Q.fcall(this._handler.disconnect.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ListWindowBackend_disconnect_result({success: result});
      output.writeMessageBegin("disconnect", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("disconnect", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.disconnect(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_disconnect_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("disconnect", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disconnect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_setContentStorageFile = function(seqid, input, output) {
  var args = new ListWindowBackend_setContentStorageFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setContentStorageFile.length === 1) {
    Q.fcall(this._handler.setContentStorageFile.bind(this._handler),
      args.filename
    ).then(function(result) {
      var result_obj = new ListWindowBackend_setContentStorageFile_result({success: result});
      output.writeMessageBegin("setContentStorageFile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("setContentStorageFile", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setContentStorageFile(args.filename, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_setContentStorageFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setContentStorageFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setContentStorageFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_getNumberOfRows = function(seqid, input, output) {
  var args = new ListWindowBackend_getNumberOfRows_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getNumberOfRows.length === 0) {
    Q.fcall(this._handler.getNumberOfRows.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ListWindowBackend_getNumberOfRows_result({success: result});
      output.writeMessageBegin("getNumberOfRows", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getNumberOfRows", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getNumberOfRows(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_getNumberOfRows_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getNumberOfRows", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNumberOfRows", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_getRow = function(seqid, input, output) {
  var args = new ListWindowBackend_getRow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRow.length === 1) {
    Q.fcall(this._handler.getRow.bind(this._handler),
      args.index
    ).then(function(result) {
      var result_obj = new ListWindowBackend_getRow_result({success: result});
      output.writeMessageBegin("getRow", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getRow", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getRow(args.index, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_getRow_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRow", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_setVisibleRows = function(seqid, input, output) {
  var args = new ListWindowBackend_setVisibleRows_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setVisibleRows.length === 2) {
    Q.fcall(this._handler.setVisibleRows.bind(this._handler),
      args.first,
      args.last
    ).then(function(result) {
      var result_obj = new ListWindowBackend_setVisibleRows_result({success: result});
      output.writeMessageBegin("setVisibleRows", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("setVisibleRows", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setVisibleRows(args.first, args.last, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_setVisibleRows_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setVisibleRows", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setVisibleRows", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_show = function(seqid, input, output) {
  var args = new ListWindowBackend_show_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.show(args.on);
};
ListWindowBackendProcessor.prototype.process_getColumnInfo = function(seqid, input, output) {
  var args = new ListWindowBackend_getColumnInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getColumnInfo.length === 0) {
    Q.fcall(this._handler.getColumnInfo.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ListWindowBackend_getColumnInfo_result({success: result});
      output.writeMessageBegin("getColumnInfo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getColumnInfo", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getColumnInfo(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_getColumnInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getColumnInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getColumnInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_getListSpec = function(seqid, input, output) {
  var args = new ListWindowBackend_getListSpec_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getListSpec.length === 0) {
    Q.fcall(this._handler.getListSpec.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ListWindowBackend_getListSpec_result({success: result});
      output.writeMessageBegin("getListSpec", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getListSpec", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getListSpec(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_getListSpec_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getListSpec", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getListSpec", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_toggleExpansion = function(seqid, input, output) {
  var args = new ListWindowBackend_toggleExpansion_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.toggleExpansion.length === 1) {
    Q.fcall(this._handler.toggleExpansion.bind(this._handler),
      args.index
    ).then(function(result) {
      var result_obj = new ListWindowBackend_toggleExpansion_result({success: result});
      output.writeMessageBegin("toggleExpansion", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("toggleExpansion", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.toggleExpansion(args.index, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_toggleExpansion_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("toggleExpansion", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("toggleExpansion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_toggleCheckmark = function(seqid, input, output) {
  var args = new ListWindowBackend_toggleCheckmark_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.toggleCheckmark.length === 1) {
    Q.fcall(this._handler.toggleCheckmark.bind(this._handler),
      args.index
    ).then(function(result) {
      var result_obj = new ListWindowBackend_toggleCheckmark_result({success: result});
      output.writeMessageBegin("toggleCheckmark", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("toggleCheckmark", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.toggleCheckmark(args.index, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_toggleCheckmark_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("toggleCheckmark", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("toggleCheckmark", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_getContextMenu = function(seqid, input, output) {
  var args = new ListWindowBackend_getContextMenu_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getContextMenu.length === 2) {
    Q.fcall(this._handler.getContextMenu.bind(this._handler),
      args.row,
      args.col
    ).then(function(result) {
      var result_obj = new ListWindowBackend_getContextMenu_result({success: result});
      output.writeMessageBegin("getContextMenu", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getContextMenu", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getContextMenu(args.row, args.col, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_getContextMenu_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getContextMenu", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getContextMenu", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_handleContextMenu = function(seqid, input, output) {
  var args = new ListWindowBackend_handleContextMenu_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.handleContextMenu(args.command);
};
ListWindowBackendProcessor.prototype.process_getDisplayName = function(seqid, input, output) {
  var args = new ListWindowBackend_getDisplayName_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDisplayName.length === 0) {
    Q.fcall(this._handler.getDisplayName.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ListWindowBackend_getDisplayName_result({success: result});
      output.writeMessageBegin("getDisplayName", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getDisplayName", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getDisplayName(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_getDisplayName_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDisplayName", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDisplayName", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_scroll = function(seqid, input, output) {
  var args = new ListWindowBackend_scroll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scroll.length === 3) {
    Q.fcall(this._handler.scroll.bind(this._handler),
      args.op,
      args.first,
      args.last
    ).then(function(result) {
      var result_obj = new ListWindowBackend_scroll_result({success: result});
      output.writeMessageBegin("scroll", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("scroll", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.scroll(args.op, args.first, args.last, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_scroll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("scroll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scroll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_click = function(seqid, input, output) {
  var args = new ListWindowBackend_click_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.click.length === 3) {
    Q.fcall(this._handler.click.bind(this._handler),
      args.row,
      args.col,
      args.flag
    ).then(function(result) {
      var result_obj = new ListWindowBackend_click_result({success: result});
      output.writeMessageBegin("click", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("click", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.click(args.row, args.col, args.flag, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_click_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("click", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("click", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_doubleClick = function(seqid, input, output) {
  var args = new ListWindowBackend_doubleClick_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.doubleClick.length === 2) {
    Q.fcall(this._handler.doubleClick.bind(this._handler),
      args.row,
      args.col
    ).then(function(result) {
      var result_obj = new ListWindowBackend_doubleClick_result({success: result});
      output.writeMessageBegin("doubleClick", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("doubleClick", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.doubleClick(args.row, args.col, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_doubleClick_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("doubleClick", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("doubleClick", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_getEditableString = function(seqid, input, output) {
  var args = new ListWindowBackend_getEditableString_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getEditableString.length === 2) {
    Q.fcall(this._handler.getEditableString.bind(this._handler),
      args.row,
      args.col
    ).then(function(result) {
      var result_obj = new ListWindowBackend_getEditableString_result({success: result});
      output.writeMessageBegin("getEditableString", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getEditableString", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getEditableString(args.row, args.col, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_getEditableString_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getEditableString", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getEditableString", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_setValue = function(seqid, input, output) {
  var args = new ListWindowBackend_setValue_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setValue.length === 3) {
    Q.fcall(this._handler.setValue.bind(this._handler),
      args.row,
      args.col,
      args.value
    ).then(function(result) {
      var result_obj = new ListWindowBackend_setValue_result({success: result});
      output.writeMessageBegin("setValue", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("setValue", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setValue(args.row, args.col, args.value, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_setValue_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setValue", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setValue", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_getSelection = function(seqid, input, output) {
  var args = new ListWindowBackend_getSelection_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSelection.length === 0) {
    Q.fcall(this._handler.getSelection.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ListWindowBackend_getSelection_result({success: result});
      output.writeMessageBegin("getSelection", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getSelection", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getSelection(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_getSelection_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getSelection", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSelection", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_getToolTip = function(seqid, input, output) {
  var args = new ListWindowBackend_getToolTip_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getToolTip.length === 3) {
    Q.fcall(this._handler.getToolTip.bind(this._handler),
      args.row,
      args.col,
      args.pos
    ).then(function(result) {
      var result_obj = new ListWindowBackend_getToolTip_result({success: result});
      output.writeMessageBegin("getToolTip", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getToolTip", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getToolTip(args.row, args.col, args.pos, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_getToolTip_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getToolTip", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getToolTip", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_drop = function(seqid, input, output) {
  var args = new ListWindowBackend_drop_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop.length === 3) {
    Q.fcall(this._handler.drop.bind(this._handler),
      args.row,
      args.col,
      args.text
    ).then(function(result) {
      var result_obj = new ListWindowBackend_drop_result({success: result});
      output.writeMessageBegin("drop", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("drop", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.drop(args.row, args.col, args.text, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_drop_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("drop", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("drop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_dropLocal = function(seqid, input, output) {
  var args = new ListWindowBackend_dropLocal_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.dropLocal.length === 5) {
    Q.fcall(this._handler.dropLocal.bind(this._handler),
      args.row,
      args.col,
      args.text,
      args.srcRow,
      args.srcCol
    ).then(function(result) {
      var result_obj = new ListWindowBackend_dropLocal_result({success: result});
      output.writeMessageBegin("dropLocal", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("dropLocal", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.dropLocal(args.row, args.col, args.text, args.srcRow, args.srcCol, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_dropLocal_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("dropLocal", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("dropLocal", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_getDrag = function(seqid, input, output) {
  var args = new ListWindowBackend_getDrag_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDrag.length === 2) {
    Q.fcall(this._handler.getDrag.bind(this._handler),
      args.row,
      args.col
    ).then(function(result) {
      var result_obj = new ListWindowBackend_getDrag_result({success: result});
      output.writeMessageBegin("getDrag", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getDrag", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getDrag(args.row, args.col, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_getDrag_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDrag", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDrag", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_getHelpTag = function(seqid, input, output) {
  var args = new ListWindowBackend_getHelpTag_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getHelpTag.length === 0) {
    Q.fcall(this._handler.getHelpTag.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ListWindowBackend_getHelpTag_result({success: result});
      output.writeMessageBegin("getHelpTag", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getHelpTag", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getHelpTag(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_getHelpTag_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getHelpTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getHelpTag", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_columnClick = function(seqid, input, output) {
  var args = new ListWindowBackend_columnClick_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.columnClick.length === 1) {
    Q.fcall(this._handler.columnClick.bind(this._handler),
      args.col
    ).then(function(result) {
      var result_obj = new ListWindowBackend_columnClick_result({success: result});
      output.writeMessageBegin("columnClick", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("columnClick", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.columnClick(args.col, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_columnClick_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("columnClick", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("columnClick", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_handleChar = function(seqid, input, output) {
  var args = new ListWindowBackend_handleChar_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.handleChar.length === 2) {
    Q.fcall(this._handler.handleChar.bind(this._handler),
      args.c,
      args.repeat
    ).then(function(result) {
      var result_obj = new ListWindowBackend_handleChar_result({success: result});
      output.writeMessageBegin("handleChar", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("handleChar", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.handleChar(args.c, args.repeat, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_handleChar_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("handleChar", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("handleChar", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_handleKeyDown = function(seqid, input, output) {
  var args = new ListWindowBackend_handleKeyDown_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.handleKeyDown.length === 4) {
    Q.fcall(this._handler.handleKeyDown.bind(this._handler),
      args.c,
      args.repeat,
      args.shift,
      args.ctrl
    ).then(function(result) {
      var result_obj = new ListWindowBackend_handleKeyDown_result({success: result});
      output.writeMessageBegin("handleKeyDown", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("handleKeyDown", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.handleKeyDown(args.c, args.repeat, args.shift, args.ctrl, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_handleKeyDown_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("handleKeyDown", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("handleKeyDown", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_keyNavigate = function(seqid, input, output) {
  var args = new ListWindowBackend_keyNavigate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.keyNavigate.length === 4) {
    Q.fcall(this._handler.keyNavigate.bind(this._handler),
      args.op,
      args.repeat,
      args.flags,
      args.rowsInPage
    ).then(function(result) {
      var result_obj = new ListWindowBackend_keyNavigate_result({success: result});
      output.writeMessageBegin("keyNavigate", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("keyNavigate", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.keyNavigate(args.op, args.repeat, args.flags, args.rowsInPage, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_keyNavigate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("keyNavigate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("keyNavigate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_toggleMoreOrLess = function(seqid, input, output) {
  var args = new ListWindowBackend_toggleMoreOrLess_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.toggleMoreOrLess.length === 1) {
    Q.fcall(this._handler.toggleMoreOrLess.bind(this._handler),
      args.row
    ).then(function(result) {
      var result_obj = new ListWindowBackend_toggleMoreOrLess_result({success: result});
      output.writeMessageBegin("toggleMoreOrLess", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("toggleMoreOrLess", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.toggleMoreOrLess(args.row, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_toggleMoreOrLess_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("toggleMoreOrLess", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("toggleMoreOrLess", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_dropOutsideContent = function(seqid, input, output) {
  var args = new ListWindowBackend_dropOutsideContent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.dropOutsideContent.length === 0) {
    Q.fcall(this._handler.dropOutsideContent.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ListWindowBackend_dropOutsideContent_result({success: result});
      output.writeMessageBegin("dropOutsideContent", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("dropOutsideContent", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.dropOutsideContent(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_dropOutsideContent_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("dropOutsideContent", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("dropOutsideContent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_isSliding = function(seqid, input, output) {
  var args = new ListWindowBackend_isSliding_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isSliding.length === 0) {
    Q.fcall(this._handler.isSliding.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ListWindowBackend_isSliding_result({success: result});
      output.writeMessageBegin("isSliding", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("isSliding", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.isSliding(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_isSliding_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isSliding", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isSliding", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_getChunkInfo = function(seqid, input, output) {
  var args = new ListWindowBackend_getChunkInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getChunkInfo.length === 0) {
    Q.fcall(this._handler.getChunkInfo.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ListWindowBackend_getChunkInfo_result({success: result});
      output.writeMessageBegin("getChunkInfo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getChunkInfo", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getChunkInfo(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_getChunkInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getChunkInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getChunkInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_addAfter = function(seqid, input, output) {
  var args = new ListWindowBackend_addAfter_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addAfter.length === 2) {
    Q.fcall(this._handler.addAfter.bind(this._handler),
      args.minToAdd,
      args.maxToTrim
    ).then(function(result) {
      var result_obj = new ListWindowBackend_addAfter_result({success: result});
      output.writeMessageBegin("addAfter", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("addAfter", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.addAfter(args.minToAdd, args.maxToTrim, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_addAfter_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addAfter", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addAfter", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_addBefore = function(seqid, input, output) {
  var args = new ListWindowBackend_addBefore_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addBefore.length === 2) {
    Q.fcall(this._handler.addBefore.bind(this._handler),
      args.minToAdd,
      args.maxToTrim
    ).then(function(result) {
      var result_obj = new ListWindowBackend_addBefore_result({success: result});
      output.writeMessageBegin("addBefore", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("addBefore", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.addBefore(args.minToAdd, args.maxToTrim, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_addBefore_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addBefore", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addBefore", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_navigateToFraction = function(seqid, input, output) {
  var args = new ListWindowBackend_navigateToFraction_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.navigateToFraction.length === 3) {
    Q.fcall(this._handler.navigateToFraction.bind(this._handler),
      args.fraction,
      args.chunkPos,
      args.minLines
    ).then(function(result) {
      var result_obj = new ListWindowBackend_navigateToFraction_result({success: result});
      output.writeMessageBegin("navigateToFraction", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("navigateToFraction", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.navigateToFraction(args.fraction, args.chunkPos, args.minLines, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_navigateToFraction_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("navigateToFraction", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("navigateToFraction", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_navigateTo = function(seqid, input, output) {
  var args = new ListWindowBackend_navigateTo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.navigateTo.length === 3) {
    Q.fcall(this._handler.navigateTo.bind(this._handler),
      args.toWhat,
      args.chunkPos,
      args.minLines
    ).then(function(result) {
      var result_obj = new ListWindowBackend_navigateTo_result({success: result});
      output.writeMessageBegin("navigateTo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("navigateTo", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.navigateTo(args.toWhat, args.chunkPos, args.minLines, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_navigateTo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("navigateTo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("navigateTo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_getSel = function(seqid, input, output) {
  var args = new ListWindowBackend_getSel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSel.length === 0) {
    Q.fcall(this._handler.getSel.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ListWindowBackend_getSel_result({success: result});
      output.writeMessageBegin("getSel", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getSel", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getSel(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_getSel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getSel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_setSel = function(seqid, input, output) {
  var args = new ListWindowBackend_setSel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setSel.length === 1) {
    Q.fcall(this._handler.setSel.bind(this._handler),
      args.row
    ).then(function(result) {
      var result_obj = new ListWindowBackend_setSel_result({success: result});
      output.writeMessageBegin("setSel", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("setSel", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setSel(args.row, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_setSel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setSel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setSel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_keyNav = function(seqid, input, output) {
  var args = new ListWindowBackend_keyNav_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.keyNav.length === 3) {
    Q.fcall(this._handler.keyNav.bind(this._handler),
      args.op,
      args.repeat,
      args.rowsInPage
    ).then(function(result) {
      var result_obj = new ListWindowBackend_keyNav_result({success: result});
      output.writeMessageBegin("keyNav", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("keyNav", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.keyNav(args.op, args.repeat, args.rowsInPage, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_keyNav_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("keyNav", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("keyNav", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_getToolbarDefinition = function(seqid, input, output) {
  var args = new ListWindowBackend_getToolbarDefinition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getToolbarDefinition.length === 0) {
    Q.fcall(this._handler.getToolbarDefinition.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ListWindowBackend_getToolbarDefinition_result({success: result});
      output.writeMessageBegin("getToolbarDefinition", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getToolbarDefinition", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getToolbarDefinition(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_getToolbarDefinition_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getToolbarDefinition", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getToolbarDefinition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_setToolbarItemValue = function(seqid, input, output) {
  var args = new ListWindowBackend_setToolbarItemValue_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setToolbarItemValue.length === 2) {
    Q.fcall(this._handler.setToolbarItemValue.bind(this._handler),
      args.id,
      args.property
    ).then(function(result) {
      var result_obj = new ListWindowBackend_setToolbarItemValue_result({success: result});
      output.writeMessageBegin("setToolbarItemValue", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("setToolbarItemValue", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setToolbarItemValue(args.id, args.property, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_setToolbarItemValue_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setToolbarItemValue", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setToolbarItemValue", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_getToolbarItemValue = function(seqid, input, output) {
  var args = new ListWindowBackend_getToolbarItemValue_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getToolbarItemValue.length === 1) {
    Q.fcall(this._handler.getToolbarItemValue.bind(this._handler),
      args.id
    ).then(function(result) {
      var result_obj = new ListWindowBackend_getToolbarItemValue_result({success: result});
      output.writeMessageBegin("getToolbarItemValue", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getToolbarItemValue", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getToolbarItemValue(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_getToolbarItemValue_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getToolbarItemValue", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getToolbarItemValue", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_getToolbarItemState = function(seqid, input, output) {
  var args = new ListWindowBackend_getToolbarItemState_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getToolbarItemState.length === 1) {
    Q.fcall(this._handler.getToolbarItemState.bind(this._handler),
      args.id
    ).then(function(result) {
      var result_obj = new ListWindowBackend_getToolbarItemState_result({success: result});
      output.writeMessageBegin("getToolbarItemState", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getToolbarItemState", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getToolbarItemState(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_getToolbarItemState_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getToolbarItemState", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getToolbarItemState", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ListWindowBackendProcessor.prototype.process_getToolbarItemTooltip = function(seqid, input, output) {
  var args = new ListWindowBackend_getToolbarItemTooltip_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getToolbarItemTooltip.length === 1) {
    Q.fcall(this._handler.getToolbarItemTooltip.bind(this._handler),
      args.id
    ).then(function(result) {
      var result_obj = new ListWindowBackend_getToolbarItemTooltip_result({success: result});
      output.writeMessageBegin("getToolbarItemTooltip", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getToolbarItemTooltip", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getToolbarItemTooltip(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ListWindowBackend_getToolbarItemTooltip_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getToolbarItemTooltip", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getToolbarItemTooltip", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
