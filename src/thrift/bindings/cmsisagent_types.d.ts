//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import shared_ttypes = require('./shared_types');



declare enum OutputType {
  exe = 0,
  lib = 1,
}

declare enum FileCategory {
  kDoc = 0,
  kHeader = 1,
  kInclude = 2,
  kLibrary = 3,
  kObject = 4,
  kSource = 5,
  kSourceC = 6,
  kSourceCpp = 7,
  kSourceAsm = 8,
  kLinkerScript = 9,
  kUtility = 10,
  kImage = 11,
  kOther = 12,
}

declare class FileInfo {
  public name: string;
  public attr: string;
  public category: FileCategory;
  public isGenerated: boolean;
  public projectRelativePath: string;

    constructor(args?: { name: string; attr: string; category: FileCategory; isGenerated: boolean; projectRelativePath: string; });
  read(input: Object): void;
  write(input: Object): void;
}

declare class ComponentInfo {
  public deviceClass: string;
  public group: string;
  public vendor: string;
  public version: string;
  public variant: string;
  public sub: string;
  public generator: string;
  public id: string;
  public packId: string;
  public rteComponentsH: string;
  public selectedCount: number;
  public sourceFiles: FileInfo[];

    constructor(args?: { deviceClass: string; group: string; vendor: string; version: string; variant: string; sub: string; generator: string; id: string; packId: string; rteComponentsH: string; selectedCount: number; sourceFiles: FileInfo[]; });
  read(input: Object): void;
  write(input: Object): void;
}

declare class CompileInfo {
  public Pname: string;
  public header: string;
  public define: string;

    constructor(args?: { Pname: string; header: string; define: string; });
  read(input: Object): void;
  write(input: Object): void;
}

declare class ProcessorInfo {
  public Pname: string;
  public Dvendor: string;
  public Dcore: string;
  public Dfpu: string;
  public Dmpu: string;
  public Dendian: string;
  public Dclock: string;
  public DcoreVersion: string;

    constructor(args?: { Pname: string; Dvendor: string; Dcore: string; Dfpu: string; Dmpu: string; Dendian: string; Dclock: string; DcoreVersion: string; });
  read(input: Object): void;
  write(input: Object): void;
}

declare class DeviceInfo {
  public id: string;
  public name: string;
  public packId: string;
  public family: string;
  public vendor: string;
  public subFamily: string;
  public variant: string;
  public compile: CompileInfo[];
  public processor: ProcessorInfo[];

    constructor(args?: { id: string; name: string; packId: string; family: string; vendor: string; subFamily: string; variant: string; compile: CompileInfo[]; processor: ProcessorInfo[]; });
  read(input: Object): void;
  write(input: Object): void;
}

declare class ValidationStatus {
  public id: string;
  public result: string;
  public fulfilled: boolean;
  public description: string;
  public children: ValidationStatus[];

    constructor(args?: { id: string; result: string; fulfilled: boolean; description: string; children: ValidationStatus[]; });
  read(input: Object): void;
  write(input: Object): void;
}

declare class Api {
  public componentClass: string;
  public group: string;
  public apiVersion: string;
  public vendor: string;
  public packId: string;
  public exclusive: boolean;
  public description: string;
  public files: FileInfo[];

    constructor(args?: { componentClass: string; group: string; apiVersion: string; vendor: string; packId: string; exclusive: boolean; description: string; files: FileInfo[]; });
  read(input: Object): void;
  write(input: Object): void;
}

declare class FileInPack {
  public packId: string;
  public subPath: string;

    constructor(args?: { packId: string; subPath: string; });
  read(input: Object): void;
  write(input: Object): void;
}

declare class RteFile {
  public packId: string;
  public projectRelativePath: string;
  public packPath: string;
  public packRelativePath: string;
  public componentId: string;
  public category: FileCategory;
  public attr: string;
  public isGenerated: boolean;

    constructor(args?: { packId: string; projectRelativePath: string; packPath: string; packRelativePath: string; componentId: string; category: FileCategory; attr: string; isGenerated: boolean; });
  read(input: Object): void;
  write(input: Object): void;
}

declare class CMSISAgentException extends Thrift.TException {
  public message: string;

    constructor(args?: { message: string; });
  read(input: Object): void;
  write(input: Object): void;
}

declare class RteEvent {
  public topic: string;
  public projectName: string;
  public ewpFile: string;
  public data: string;

    constructor(args?: { topic: string; projectName: string; ewpFile: string; data: string; });
  read(input: Object): void;
  write(input: Object): void;
}

declare var CMSISPACK_AGENT2_SERVICE: string;

declare var CMSISPACK_AGENT2_EVENTLISTENER_SERVICE: string;

declare var PROJECT_ADDED: string;

declare var PROJECT_REMOVED: string;

declare var PROJECT_UPDATED: string;

declare var PACKS_UPDATED: string;

declare var PACKS_RELOADED: string;

declare var PROTOCOL_VERSION: number;
