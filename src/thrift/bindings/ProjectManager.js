//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var shared_ttypes = require('./shared_types');


var HeartbeatService = require('./HeartbeatService');
var HeartbeatServiceClient = HeartbeatService.Client;
var HeartbeatServiceProcessor = HeartbeatService.Processor;
var ttypes = require('./projectmanager_types');
//HELPER FUNCTIONS AND STRUCTURES

var ProjectManager_CreateEwwFile_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_CreateEwwFile_args.prototype = {};
ProjectManager_CreateEwwFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateEwwFile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateEwwFile_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CreateEwwFile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.WorkspaceContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CreateEwwFile_result.prototype = {};
ProjectManager_CreateEwwFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.WorkspaceContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateEwwFile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateEwwFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_DisableAutoDataStoring_args = function(args) {
};
ProjectManager_DisableAutoDataStoring_args.prototype = {};
ProjectManager_DisableAutoDataStoring_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_DisableAutoDataStoring_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_DisableAutoDataStoring_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_DisableAutoDataStoring_result = function(args) {
};
ProjectManager_DisableAutoDataStoring_result.prototype = {};
ProjectManager_DisableAutoDataStoring_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_DisableAutoDataStoring_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_DisableAutoDataStoring_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_LoadEwwFile_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_LoadEwwFile_args.prototype = {};
ProjectManager_LoadEwwFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_LoadEwwFile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_LoadEwwFile_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_LoadEwwFile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.WorkspaceContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_LoadEwwFile_result.prototype = {};
ProjectManager_LoadEwwFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.WorkspaceContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_LoadEwwFile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_LoadEwwFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsWorkspaceModified_args = function(args) {
};
ProjectManager_IsWorkspaceModified_args.prototype = {};
ProjectManager_IsWorkspaceModified_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsWorkspaceModified_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsWorkspaceModified_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsWorkspaceModified_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_IsWorkspaceModified_result.prototype = {};
ProjectManager_IsWorkspaceModified_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsWorkspaceModified_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsWorkspaceModified_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SaveEwwFile_args = function(args) {
};
ProjectManager_SaveEwwFile_args.prototype = {};
ProjectManager_SaveEwwFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SaveEwwFile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SaveEwwFile_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SaveEwwFile_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_SaveEwwFile_result.prototype = {};
ProjectManager_SaveEwwFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SaveEwwFile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SaveEwwFile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SaveEwwFileAs_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_SaveEwwFileAs_args.prototype = {};
ProjectManager_SaveEwwFileAs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SaveEwwFileAs_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SaveEwwFileAs_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SaveEwwFileAs_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_SaveEwwFileAs_result.prototype = {};
ProjectManager_SaveEwwFileAs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SaveEwwFileAs_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SaveEwwFileAs_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetProjects_args = function(args) {
};
ProjectManager_GetProjects_args.prototype = {};
ProjectManager_GetProjects_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetProjects_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetProjects_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetProjects_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ProjectContext]);
    }
  }
};
ProjectManager_GetProjects_result.prototype = {};
ProjectManager_GetProjects_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp376 = input.readListBegin();
        var _size75 = _rtmp376.size || 0;
        for (var _i77 = 0; _i77 < _size75; ++_i77) {
          var elem78 = null;
          elem78 = new ttypes.ProjectContext();
          elem78.read(input);
          this.success.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetProjects_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetProjects_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter79 in this.success) {
      if (this.success.hasOwnProperty(iter79)) {
        iter79 = this.success[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetLoadedProjects_args = function(args) {
};
ProjectManager_GetLoadedProjects_args.prototype = {};
ProjectManager_GetLoadedProjects_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetLoadedProjects_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetLoadedProjects_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetLoadedProjects_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ProjectContext]);
    }
  }
};
ProjectManager_GetLoadedProjects_result.prototype = {};
ProjectManager_GetLoadedProjects_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp381 = input.readListBegin();
        var _size80 = _rtmp381.size || 0;
        for (var _i82 = 0; _i82 < _size80; ++_i82) {
          var elem83 = null;
          elem83 = new ttypes.ProjectContext();
          elem83.read(input);
          this.success.push(elem83);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetLoadedProjects_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetLoadedProjects_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter84 in this.success) {
      if (this.success.hasOwnProperty(iter84)) {
        iter84 = this.success[iter84];
        iter84.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetCurrentProject_args = function(args) {
};
ProjectManager_GetCurrentProject_args.prototype = {};
ProjectManager_GetCurrentProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetCurrentProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetCurrentProject_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetCurrentProject_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetCurrentProject_result.prototype = {};
ProjectManager_GetCurrentProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetCurrentProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetCurrentProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetCurrentProject_args = function(args) {
  this.ctx = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
  }
};
ProjectManager_SetCurrentProject_args.prototype = {};
ProjectManager_SetCurrentProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetCurrentProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetCurrentProject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetCurrentProject_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_SetCurrentProject_result.prototype = {};
ProjectManager_SetCurrentProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetCurrentProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetCurrentProject_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CloseWorkspace_args = function(args) {
};
ProjectManager_CloseWorkspace_args.prototype = {};
ProjectManager_CloseWorkspace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CloseWorkspace_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CloseWorkspace_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CloseWorkspace_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CloseWorkspace_result.prototype = {};
ProjectManager_CloseWorkspace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CloseWorkspace_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CloseWorkspace_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CreateEwpFile_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_CreateEwpFile_args.prototype = {};
ProjectManager_CreateEwpFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateEwpFile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateEwpFile_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CreateEwpFile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CreateEwpFile_result.prototype = {};
ProjectManager_CreateEwpFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateEwpFile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateEwpFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CreateEwpFileWithToolChain_args = function(args) {
  this.file_path = null;
  this.toolchain = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
    if (args.toolchain !== undefined && args.toolchain !== null) {
      this.toolchain = args.toolchain;
    }
  }
};
ProjectManager_CreateEwpFileWithToolChain_args.prototype = {};
ProjectManager_CreateEwpFileWithToolChain_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toolchain = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateEwpFileWithToolChain_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateEwpFileWithToolChain_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  if (this.toolchain !== null && this.toolchain !== undefined) {
    output.writeFieldBegin('toolchain', Thrift.Type.STRING, 2);
    output.writeString(this.toolchain);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CreateEwpFileWithToolChain_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CreateEwpFileWithToolChain_result.prototype = {};
ProjectManager_CreateEwpFileWithToolChain_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateEwpFileWithToolChain_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateEwpFileWithToolChain_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CreateProjectFromTemplate_args = function(args) {
  this.template_path = null;
  this.project_path = null;
  if (args) {
    if (args.template_path !== undefined && args.template_path !== null) {
      this.template_path = args.template_path;
    }
    if (args.project_path !== undefined && args.project_path !== null) {
      this.project_path = args.project_path;
    }
  }
};
ProjectManager_CreateProjectFromTemplate_args.prototype = {};
ProjectManager_CreateProjectFromTemplate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.template_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.project_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateProjectFromTemplate_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateProjectFromTemplate_args');
  if (this.template_path !== null && this.template_path !== undefined) {
    output.writeFieldBegin('template_path', Thrift.Type.STRING, 1);
    output.writeString(this.template_path);
    output.writeFieldEnd();
  }
  if (this.project_path !== null && this.project_path !== undefined) {
    output.writeFieldBegin('project_path', Thrift.Type.STRING, 2);
    output.writeString(this.project_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CreateProjectFromTemplate_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CreateProjectFromTemplate_result.prototype = {};
ProjectManager_CreateProjectFromTemplate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateProjectFromTemplate_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateProjectFromTemplate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_LoadEwpFile_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_LoadEwpFile_args.prototype = {};
ProjectManager_LoadEwpFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_LoadEwpFile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_LoadEwpFile_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_LoadEwpFile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_LoadEwpFile_result.prototype = {};
ProjectManager_LoadEwpFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_LoadEwpFile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_LoadEwpFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SaveEwpFile_args = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_SaveEwpFile_args.prototype = {};
ProjectManager_SaveEwpFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SaveEwpFile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SaveEwpFile_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SaveEwpFile_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_SaveEwpFile_result.prototype = {};
ProjectManager_SaveEwpFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SaveEwpFile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SaveEwpFile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ReloadProject_args = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_ReloadProject_args.prototype = {};
ProjectManager_ReloadProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ReloadProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ReloadProject_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ReloadProject_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_ReloadProject_result.prototype = {};
ProjectManager_ReloadProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ReloadProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ReloadProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SaveEwpFileAs_args = function(args) {
  this.project = null;
  this.file_path = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_SaveEwpFileAs_args.prototype = {};
ProjectManager_SaveEwpFileAs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SaveEwpFileAs_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SaveEwpFileAs_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 2);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SaveEwpFileAs_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_SaveEwpFileAs_result.prototype = {};
ProjectManager_SaveEwpFileAs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SaveEwpFileAs_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SaveEwpFileAs_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ImportProjectFiles_args = function(args) {
  this.ctx = null;
  this.file_path = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_ImportProjectFiles_args.prototype = {};
ProjectManager_ImportProjectFiles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ImportProjectFiles_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ImportProjectFiles_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 2);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ImportProjectFiles_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_ImportProjectFiles_result.prototype = {};
ProjectManager_ImportProjectFiles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ImportProjectFiles_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ImportProjectFiles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsModified_args = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_IsModified_args.prototype = {};
ProjectManager_IsModified_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsModified_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsModified_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsModified_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_IsModified_result.prototype = {};
ProjectManager_IsModified_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsModified_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsModified_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetModified_args = function(args) {
  this.project = null;
  this.modified = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.modified !== undefined && args.modified !== null) {
      this.modified = args.modified;
    }
  }
};
ProjectManager_SetModified_args.prototype = {};
ProjectManager_SetModified_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.modified = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetModified_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetModified_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.modified !== null && this.modified !== undefined) {
    output.writeFieldBegin('modified', Thrift.Type.BOOL, 2);
    output.writeBool(this.modified);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetModified_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_SetModified_result.prototype = {};
ProjectManager_SetModified_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetModified_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetModified_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsMemberOfCurrentProject_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_IsMemberOfCurrentProject_args.prototype = {};
ProjectManager_IsMemberOfCurrentProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsMemberOfCurrentProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsMemberOfCurrentProject_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsMemberOfCurrentProject_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_IsMemberOfCurrentProject_result.prototype = {};
ProjectManager_IsMemberOfCurrentProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsMemberOfCurrentProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsMemberOfCurrentProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_FindMatchingHeaderOrSourceFile_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_FindMatchingHeaderOrSourceFile_args.prototype = {};
ProjectManager_FindMatchingHeaderOrSourceFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_FindMatchingHeaderOrSourceFile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_FindMatchingHeaderOrSourceFile_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_FindMatchingHeaderOrSourceFile_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
ProjectManager_FindMatchingHeaderOrSourceFile_result.prototype = {};
ProjectManager_FindMatchingHeaderOrSourceFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp386 = input.readListBegin();
        var _size85 = _rtmp386.size || 0;
        for (var _i87 = 0; _i87 < _size85; ++_i87) {
          var elem88 = null;
          elem88 = input.readString();
          this.success.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_FindMatchingHeaderOrSourceFile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_FindMatchingHeaderOrSourceFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter89 in this.success) {
      if (this.success.hasOwnProperty(iter89)) {
        iter89 = this.success[iter89];
        output.writeString(iter89);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetProject_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_GetProject_args.prototype = {};
ProjectManager_GetProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetProject_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetProject_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetProject_result.prototype = {};
ProjectManager_GetProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CloseProject_args = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_CloseProject_args.prototype = {};
ProjectManager_CloseProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CloseProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CloseProject_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CloseProject_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CloseProject_result.prototype = {};
ProjectManager_CloseProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CloseProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CloseProject_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveProject_args = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_RemoveProject_args.prototype = {};
ProjectManager_RemoveProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveProject_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveProject_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_RemoveProject_result.prototype = {};
ProjectManager_RemoveProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveProject_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetFiles_args = function(args) {
  this.project = null;
  this.configurationName = null;
  this.col = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
  }
};
ProjectManager_GetFiles_args.prototype = {};
ProjectManager_GetFiles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetFiles_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetFiles_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 3);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetFiles_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetFiles_result.prototype = {};
ProjectManager_GetFiles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp391 = input.readListBegin();
        var _size90 = _rtmp391.size || 0;
        for (var _i92 = 0; _i92 < _size90; ++_i92) {
          var elem93 = null;
          elem93 = input.readString();
          this.success.push(elem93);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetFiles_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetFiles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter94 in this.success) {
      if (this.success.hasOwnProperty(iter94)) {
        iter94 = this.success[iter94];
        output.writeString(iter94);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddConfiguration_args = function(args) {
  this.config = null;
  this.project = null;
  this.isDebug = null;
  if (args) {
    if (args.config !== undefined && args.config !== null) {
      this.config = new ttypes.Configuration(args.config);
    }
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.isDebug !== undefined && args.isDebug !== null) {
      this.isDebug = args.isDebug;
    }
  }
};
ProjectManager_AddConfiguration_args.prototype = {};
ProjectManager_AddConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.config = new ttypes.Configuration();
        this.config.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isDebug = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddConfiguration_args');
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.STRUCT, 1);
    this.config.write(output);
    output.writeFieldEnd();
  }
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 2);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.isDebug !== null && this.isDebug !== undefined) {
    output.writeFieldBegin('isDebug', Thrift.Type.BOOL, 3);
    output.writeBool(this.isDebug);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddConfiguration_result = function(args) {
};
ProjectManager_AddConfiguration_result.prototype = {};
ProjectManager_AddConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddConfiguration_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddConfigurationNoSave_args = function(args) {
  this.project = null;
  this.config = null;
  this.basedOnName = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.config !== undefined && args.config !== null) {
      this.config = new ttypes.Configuration(args.config);
    }
    if (args.basedOnName !== undefined && args.basedOnName !== null) {
      this.basedOnName = args.basedOnName;
    }
  }
};
ProjectManager_AddConfigurationNoSave_args.prototype = {};
ProjectManager_AddConfigurationNoSave_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.config = new ttypes.Configuration();
        this.config.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.basedOnName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddConfigurationNoSave_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddConfigurationNoSave_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.STRUCT, 2);
    this.config.write(output);
    output.writeFieldEnd();
  }
  if (this.basedOnName !== null && this.basedOnName !== undefined) {
    output.writeFieldBegin('basedOnName', Thrift.Type.STRING, 3);
    output.writeString(this.basedOnName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddConfigurationNoSave_result = function(args) {
};
ProjectManager_AddConfigurationNoSave_result.prototype = {};
ProjectManager_AddConfigurationNoSave_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddConfigurationNoSave_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddConfigurationNoSave_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveConfiguration_args = function(args) {
  this.configurationName = null;
  this.project = null;
  if (args) {
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_RemoveConfiguration_args.prototype = {};
ProjectManager_RemoveConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveConfiguration_args');
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 1);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 2);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveConfiguration_result = function(args) {
};
ProjectManager_RemoveConfiguration_result.prototype = {};
ProjectManager_RemoveConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveConfiguration_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveConfigurationNoSave_args = function(args) {
  this.project = null;
  this.configurationName = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
  }
};
ProjectManager_RemoveConfigurationNoSave_args.prototype = {};
ProjectManager_RemoveConfigurationNoSave_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveConfigurationNoSave_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveConfigurationNoSave_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveConfigurationNoSave_result = function(args) {
};
ProjectManager_RemoveConfigurationNoSave_result.prototype = {};
ProjectManager_RemoveConfigurationNoSave_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveConfigurationNoSave_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveConfigurationNoSave_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetConfigurations_args = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_GetConfigurations_args.prototype = {};
ProjectManager_GetConfigurations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetConfigurations_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetConfigurations_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetConfigurations_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Configuration]);
    }
  }
};
ProjectManager_GetConfigurations_result.prototype = {};
ProjectManager_GetConfigurations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp396 = input.readListBegin();
        var _size95 = _rtmp396.size || 0;
        for (var _i97 = 0; _i97 < _size95; ++_i97) {
          var elem98 = null;
          elem98 = new ttypes.Configuration();
          elem98.read(input);
          this.success.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetConfigurations_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetConfigurations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter99 in this.success) {
      if (this.success.hasOwnProperty(iter99)) {
        iter99 = this.success[iter99];
        iter99.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetConfigurationsOrder_args = function(args) {
  this.project = null;
  this.configNames = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.configNames !== undefined && args.configNames !== null) {
      this.configNames = Thrift.copyList(args.configNames, [null]);
    }
  }
};
ProjectManager_SetConfigurationsOrder_args.prototype = {};
ProjectManager_SetConfigurationsOrder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.configNames = [];
        var _rtmp3101 = input.readListBegin();
        var _size100 = _rtmp3101.size || 0;
        for (var _i102 = 0; _i102 < _size100; ++_i102) {
          var elem103 = null;
          elem103 = input.readString();
          this.configNames.push(elem103);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetConfigurationsOrder_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetConfigurationsOrder_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.configNames !== null && this.configNames !== undefined) {
    output.writeFieldBegin('configNames', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.configNames.length);
    for (var iter104 in this.configNames) {
      if (this.configNames.hasOwnProperty(iter104)) {
        iter104 = this.configNames[iter104];
        output.writeString(iter104);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetConfigurationsOrder_result = function(args) {
};
ProjectManager_SetConfigurationsOrder_result.prototype = {};
ProjectManager_SetConfigurationsOrder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetConfigurationsOrder_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetConfigurationsOrder_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetCurrentConfiguration_args = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_GetCurrentConfiguration_args.prototype = {};
ProjectManager_GetCurrentConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetCurrentConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetCurrentConfiguration_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetCurrentConfiguration_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Configuration(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetCurrentConfiguration_result.prototype = {};
ProjectManager_GetCurrentConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Configuration();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetCurrentConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetCurrentConfiguration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetCurrentConfiguration_args = function(args) {
  this.project = null;
  this.configurationName = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
  }
};
ProjectManager_SetCurrentConfiguration_args.prototype = {};
ProjectManager_SetCurrentConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetCurrentConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetCurrentConfiguration_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetCurrentConfiguration_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_SetCurrentConfiguration_result.prototype = {};
ProjectManager_SetCurrentConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetCurrentConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetCurrentConfiguration_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetCurrentConfigurations_args = function(args) {
  this.projects = null;
  this.configurationNames = null;
  if (args) {
    if (args.projects !== undefined && args.projects !== null) {
      this.projects = Thrift.copyList(args.projects, [ttypes.ProjectContext]);
    }
    if (args.configurationNames !== undefined && args.configurationNames !== null) {
      this.configurationNames = Thrift.copyList(args.configurationNames, [null]);
    }
  }
};
ProjectManager_SetCurrentConfigurations_args.prototype = {};
ProjectManager_SetCurrentConfigurations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.projects = [];
        var _rtmp3106 = input.readListBegin();
        var _size105 = _rtmp3106.size || 0;
        for (var _i107 = 0; _i107 < _size105; ++_i107) {
          var elem108 = null;
          elem108 = new ttypes.ProjectContext();
          elem108.read(input);
          this.projects.push(elem108);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.configurationNames = [];
        var _rtmp3110 = input.readListBegin();
        var _size109 = _rtmp3110.size || 0;
        for (var _i111 = 0; _i111 < _size109; ++_i111) {
          var elem112 = null;
          elem112 = input.readString();
          this.configurationNames.push(elem112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetCurrentConfigurations_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetCurrentConfigurations_args');
  if (this.projects !== null && this.projects !== undefined) {
    output.writeFieldBegin('projects', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.projects.length);
    for (var iter113 in this.projects) {
      if (this.projects.hasOwnProperty(iter113)) {
        iter113 = this.projects[iter113];
        iter113.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.configurationNames !== null && this.configurationNames !== undefined) {
    output.writeFieldBegin('configurationNames', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.configurationNames.length);
    for (var iter114 in this.configurationNames) {
      if (this.configurationNames.hasOwnProperty(iter114)) {
        iter114 = this.configurationNames[iter114];
        output.writeString(iter114);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetCurrentConfigurations_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_SetCurrentConfigurations_result.prototype = {};
ProjectManager_SetCurrentConfigurations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetCurrentConfigurations_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetCurrentConfigurations_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CreateConfigWorkingCopy_args = function(args) {
  this.project = null;
  this.originalConfigName = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.originalConfigName !== undefined && args.originalConfigName !== null) {
      this.originalConfigName = args.originalConfigName;
    }
  }
};
ProjectManager_CreateConfigWorkingCopy_args.prototype = {};
ProjectManager_CreateConfigWorkingCopy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.originalConfigName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateConfigWorkingCopy_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateConfigWorkingCopy_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.originalConfigName !== null && this.originalConfigName !== undefined) {
    output.writeFieldBegin('originalConfigName', Thrift.Type.STRING, 2);
    output.writeString(this.originalConfigName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CreateConfigWorkingCopy_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_CreateConfigWorkingCopy_result.prototype = {};
ProjectManager_CreateConfigWorkingCopy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateConfigWorkingCopy_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateConfigWorkingCopy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ApplyConfigWorkingCopy_args = function(args) {
  this.project = null;
  this.workingCopyId = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.workingCopyId !== undefined && args.workingCopyId !== null) {
      this.workingCopyId = args.workingCopyId;
    }
  }
};
ProjectManager_ApplyConfigWorkingCopy_args.prototype = {};
ProjectManager_ApplyConfigWorkingCopy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.workingCopyId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ApplyConfigWorkingCopy_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ApplyConfigWorkingCopy_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.workingCopyId !== null && this.workingCopyId !== undefined) {
    output.writeFieldBegin('workingCopyId', Thrift.Type.STRING, 2);
    output.writeString(this.workingCopyId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ApplyConfigWorkingCopy_result = function(args) {
};
ProjectManager_ApplyConfigWorkingCopy_result.prototype = {};
ProjectManager_ApplyConfigWorkingCopy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ApplyConfigWorkingCopy_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ApplyConfigWorkingCopy_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_DiscardConfigWorkingCopy_args = function(args) {
  this.project = null;
  this.workingCopyId = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.workingCopyId !== undefined && args.workingCopyId !== null) {
      this.workingCopyId = args.workingCopyId;
    }
  }
};
ProjectManager_DiscardConfigWorkingCopy_args.prototype = {};
ProjectManager_DiscardConfigWorkingCopy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.workingCopyId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_DiscardConfigWorkingCopy_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_DiscardConfigWorkingCopy_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.workingCopyId !== null && this.workingCopyId !== undefined) {
    output.writeFieldBegin('workingCopyId', Thrift.Type.STRING, 2);
    output.writeString(this.workingCopyId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_DiscardConfigWorkingCopy_result = function(args) {
};
ProjectManager_DiscardConfigWorkingCopy_result.prototype = {};
ProjectManager_DiscardConfigWorkingCopy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_DiscardConfigWorkingCopy_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_DiscardConfigWorkingCopy_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetDesktopPathParameters_args = function(args) {
  this.platform = null;
  this.slavery = null;
  if (args) {
    if (args.platform !== undefined && args.platform !== null) {
      this.platform = args.platform;
    }
    if (args.slavery !== undefined && args.slavery !== null) {
      this.slavery = args.slavery;
    }
  }
};
ProjectManager_SetDesktopPathParameters_args.prototype = {};
ProjectManager_SetDesktopPathParameters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.platform = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.slavery = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetDesktopPathParameters_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetDesktopPathParameters_args');
  if (this.platform !== null && this.platform !== undefined) {
    output.writeFieldBegin('platform', Thrift.Type.I32, 1);
    output.writeI32(this.platform);
    output.writeFieldEnd();
  }
  if (this.slavery !== null && this.slavery !== undefined) {
    output.writeFieldBegin('slavery', Thrift.Type.I32, 2);
    output.writeI32(this.slavery);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetDesktopPathParameters_result = function(args) {
};
ProjectManager_SetDesktopPathParameters_result.prototype = {};
ProjectManager_SetDesktopPathParameters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetDesktopPathParameters_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetDesktopPathParameters_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOfflineDesktopPath_args = function(args) {
};
ProjectManager_GetOfflineDesktopPath_args.prototype = {};
ProjectManager_GetOfflineDesktopPath_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOfflineDesktopPath_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOfflineDesktopPath_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOfflineDesktopPath_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_GetOfflineDesktopPath_result.prototype = {};
ProjectManager_GetOfflineDesktopPath_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOfflineDesktopPath_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOfflineDesktopPath_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOnlineDesktopPath_args = function(args) {
};
ProjectManager_GetOnlineDesktopPath_args.prototype = {};
ProjectManager_GetOnlineDesktopPath_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOnlineDesktopPath_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOnlineDesktopPath_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOnlineDesktopPath_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_GetOnlineDesktopPath_result.prototype = {};
ProjectManager_GetOnlineDesktopPath_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOnlineDesktopPath_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOnlineDesktopPath_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetRootNode_args = function(args) {
  this.ctx = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
  }
};
ProjectManager_GetRootNode_args.prototype = {};
ProjectManager_GetRootNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetRootNode_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetRootNode_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetRootNode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Node(args.success);
    }
  }
};
ProjectManager_GetRootNode_result.prototype = {};
ProjectManager_GetRootNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Node();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetRootNode_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetRootNode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetNode_args = function(args) {
  this.ctx = null;
  this.node = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
  }
};
ProjectManager_SetNode_args.prototype = {};
ProjectManager_SetNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetNode_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetNode_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 2);
    this.node.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetNode_result = function(args) {
};
ProjectManager_SetNode_result.prototype = {};
ProjectManager_SetNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetNode_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetNode_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetNodeByIndex_args = function(args) {
  this.ctx = null;
  this.nodeIndexPath = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
    if (args.nodeIndexPath !== undefined && args.nodeIndexPath !== null) {
      this.nodeIndexPath = Thrift.copyList(args.nodeIndexPath, [null]);
    }
  }
};
ProjectManager_GetNodeByIndex_args.prototype = {};
ProjectManager_GetNodeByIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.nodeIndexPath = [];
        var _rtmp3116 = input.readListBegin();
        var _size115 = _rtmp3116.size || 0;
        for (var _i117 = 0; _i117 < _size115; ++_i117) {
          var elem118 = null;
          elem118 = input.readI64();
          this.nodeIndexPath.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetNodeByIndex_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetNodeByIndex_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.nodeIndexPath !== null && this.nodeIndexPath !== undefined) {
    output.writeFieldBegin('nodeIndexPath', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.nodeIndexPath.length);
    for (var iter119 in this.nodeIndexPath) {
      if (this.nodeIndexPath.hasOwnProperty(iter119)) {
        iter119 = this.nodeIndexPath[iter119];
        output.writeI64(iter119);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetNodeByIndex_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Node(args.success);
    }
  }
};
ProjectManager_GetNodeByIndex_result.prototype = {};
ProjectManager_GetNodeByIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Node();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetNodeByIndex_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetNodeByIndex_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetNodeByIndex_args = function(args) {
  this.ctx = null;
  this.nodeIndexPath = null;
  this.node = null;
  this.save = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
    if (args.nodeIndexPath !== undefined && args.nodeIndexPath !== null) {
      this.nodeIndexPath = Thrift.copyList(args.nodeIndexPath, [null]);
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
    if (args.save !== undefined && args.save !== null) {
      this.save = args.save;
    }
  }
};
ProjectManager_SetNodeByIndex_args.prototype = {};
ProjectManager_SetNodeByIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.nodeIndexPath = [];
        var _rtmp3121 = input.readListBegin();
        var _size120 = _rtmp3121.size || 0;
        for (var _i122 = 0; _i122 < _size120; ++_i122) {
          var elem123 = null;
          elem123 = input.readI64();
          this.nodeIndexPath.push(elem123);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.save = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetNodeByIndex_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetNodeByIndex_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.nodeIndexPath !== null && this.nodeIndexPath !== undefined) {
    output.writeFieldBegin('nodeIndexPath', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.nodeIndexPath.length);
    for (var iter124 in this.nodeIndexPath) {
      if (this.nodeIndexPath.hasOwnProperty(iter124)) {
        iter124 = this.nodeIndexPath[iter124];
        output.writeI64(iter124);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 3);
    this.node.write(output);
    output.writeFieldEnd();
  }
  if (this.save !== null && this.save !== undefined) {
    output.writeFieldBegin('save', Thrift.Type.BOOL, 4);
    output.writeBool(this.save);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetNodeByIndex_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_SetNodeByIndex_result.prototype = {};
ProjectManager_SetNodeByIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetNodeByIndex_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetNodeByIndex_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddNodeByIndex_args = function(args) {
  this.ctx = null;
  this.nodeIndexPath = null;
  this.node = null;
  this.save = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
    if (args.nodeIndexPath !== undefined && args.nodeIndexPath !== null) {
      this.nodeIndexPath = Thrift.copyList(args.nodeIndexPath, [null]);
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
    if (args.save !== undefined && args.save !== null) {
      this.save = args.save;
    }
  }
};
ProjectManager_AddNodeByIndex_args.prototype = {};
ProjectManager_AddNodeByIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.nodeIndexPath = [];
        var _rtmp3126 = input.readListBegin();
        var _size125 = _rtmp3126.size || 0;
        for (var _i127 = 0; _i127 < _size125; ++_i127) {
          var elem128 = null;
          elem128 = input.readI64();
          this.nodeIndexPath.push(elem128);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.save = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddNodeByIndex_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddNodeByIndex_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.nodeIndexPath !== null && this.nodeIndexPath !== undefined) {
    output.writeFieldBegin('nodeIndexPath', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.nodeIndexPath.length);
    for (var iter129 in this.nodeIndexPath) {
      if (this.nodeIndexPath.hasOwnProperty(iter129)) {
        iter129 = this.nodeIndexPath[iter129];
        output.writeI64(iter129);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 3);
    this.node.write(output);
    output.writeFieldEnd();
  }
  if (this.save !== null && this.save !== undefined) {
    output.writeFieldBegin('save', Thrift.Type.BOOL, 4);
    output.writeBool(this.save);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddNodeByIndex_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_AddNodeByIndex_result.prototype = {};
ProjectManager_AddNodeByIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddNodeByIndex_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddNodeByIndex_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveNodeByIndex_args = function(args) {
  this.ctx = null;
  this.nodeIndexPath = null;
  this.save = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
    if (args.nodeIndexPath !== undefined && args.nodeIndexPath !== null) {
      this.nodeIndexPath = Thrift.copyList(args.nodeIndexPath, [null]);
    }
    if (args.save !== undefined && args.save !== null) {
      this.save = args.save;
    }
  }
};
ProjectManager_RemoveNodeByIndex_args.prototype = {};
ProjectManager_RemoveNodeByIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.nodeIndexPath = [];
        var _rtmp3131 = input.readListBegin();
        var _size130 = _rtmp3131.size || 0;
        for (var _i132 = 0; _i132 < _size130; ++_i132) {
          var elem133 = null;
          elem133 = input.readI64();
          this.nodeIndexPath.push(elem133);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.save = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveNodeByIndex_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveNodeByIndex_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.nodeIndexPath !== null && this.nodeIndexPath !== undefined) {
    output.writeFieldBegin('nodeIndexPath', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.nodeIndexPath.length);
    for (var iter134 in this.nodeIndexPath) {
      if (this.nodeIndexPath.hasOwnProperty(iter134)) {
        iter134 = this.nodeIndexPath[iter134];
        output.writeI64(iter134);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.save !== null && this.save !== undefined) {
    output.writeFieldBegin('save', Thrift.Type.BOOL, 3);
    output.writeBool(this.save);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveNodeByIndex_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_RemoveNodeByIndex_result.prototype = {};
ProjectManager_RemoveNodeByIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveNodeByIndex_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveNodeByIndex_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_UpdateNodeByIndex_args = function(args) {
  this.ctx = null;
  this.nodeIndexPath = null;
  this.node = null;
  this.save = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
    if (args.nodeIndexPath !== undefined && args.nodeIndexPath !== null) {
      this.nodeIndexPath = Thrift.copyList(args.nodeIndexPath, [null]);
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
    if (args.save !== undefined && args.save !== null) {
      this.save = args.save;
    }
  }
};
ProjectManager_UpdateNodeByIndex_args.prototype = {};
ProjectManager_UpdateNodeByIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.nodeIndexPath = [];
        var _rtmp3136 = input.readListBegin();
        var _size135 = _rtmp3136.size || 0;
        for (var _i137 = 0; _i137 < _size135; ++_i137) {
          var elem138 = null;
          elem138 = input.readI64();
          this.nodeIndexPath.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.save = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_UpdateNodeByIndex_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_UpdateNodeByIndex_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.nodeIndexPath !== null && this.nodeIndexPath !== undefined) {
    output.writeFieldBegin('nodeIndexPath', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.nodeIndexPath.length);
    for (var iter139 in this.nodeIndexPath) {
      if (this.nodeIndexPath.hasOwnProperty(iter139)) {
        iter139 = this.nodeIndexPath[iter139];
        output.writeI64(iter139);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 3);
    this.node.write(output);
    output.writeFieldEnd();
  }
  if (this.save !== null && this.save !== undefined) {
    output.writeFieldBegin('save', Thrift.Type.BOOL, 4);
    output.writeBool(this.save);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_UpdateNodeByIndex_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_UpdateNodeByIndex_result.prototype = {};
ProjectManager_UpdateNodeByIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_UpdateNodeByIndex_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_UpdateNodeByIndex_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CanMoveNode_args = function(args) {
  this.ctx = null;
  this.srcNodeIndexPath = null;
  this.dstNodeIndexPath = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
    if (args.srcNodeIndexPath !== undefined && args.srcNodeIndexPath !== null) {
      this.srcNodeIndexPath = Thrift.copyList(args.srcNodeIndexPath, [null]);
    }
    if (args.dstNodeIndexPath !== undefined && args.dstNodeIndexPath !== null) {
      this.dstNodeIndexPath = Thrift.copyList(args.dstNodeIndexPath, [null]);
    }
  }
};
ProjectManager_CanMoveNode_args.prototype = {};
ProjectManager_CanMoveNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.srcNodeIndexPath = [];
        var _rtmp3141 = input.readListBegin();
        var _size140 = _rtmp3141.size || 0;
        for (var _i142 = 0; _i142 < _size140; ++_i142) {
          var elem143 = null;
          elem143 = input.readI64();
          this.srcNodeIndexPath.push(elem143);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.dstNodeIndexPath = [];
        var _rtmp3145 = input.readListBegin();
        var _size144 = _rtmp3145.size || 0;
        for (var _i146 = 0; _i146 < _size144; ++_i146) {
          var elem147 = null;
          elem147 = input.readI64();
          this.dstNodeIndexPath.push(elem147);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CanMoveNode_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CanMoveNode_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.srcNodeIndexPath !== null && this.srcNodeIndexPath !== undefined) {
    output.writeFieldBegin('srcNodeIndexPath', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.srcNodeIndexPath.length);
    for (var iter148 in this.srcNodeIndexPath) {
      if (this.srcNodeIndexPath.hasOwnProperty(iter148)) {
        iter148 = this.srcNodeIndexPath[iter148];
        output.writeI64(iter148);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dstNodeIndexPath !== null && this.dstNodeIndexPath !== undefined) {
    output.writeFieldBegin('dstNodeIndexPath', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.dstNodeIndexPath.length);
    for (var iter149 in this.dstNodeIndexPath) {
      if (this.dstNodeIndexPath.hasOwnProperty(iter149)) {
        iter149 = this.dstNodeIndexPath[iter149];
        output.writeI64(iter149);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CanMoveNode_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CanMoveNode_result.prototype = {};
ProjectManager_CanMoveNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CanMoveNode_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CanMoveNode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_MoveNode_args = function(args) {
  this.ctx = null;
  this.srcNodeIndexPath = null;
  this.dstNodeIndexPath = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
    if (args.srcNodeIndexPath !== undefined && args.srcNodeIndexPath !== null) {
      this.srcNodeIndexPath = Thrift.copyList(args.srcNodeIndexPath, [null]);
    }
    if (args.dstNodeIndexPath !== undefined && args.dstNodeIndexPath !== null) {
      this.dstNodeIndexPath = Thrift.copyList(args.dstNodeIndexPath, [null]);
    }
  }
};
ProjectManager_MoveNode_args.prototype = {};
ProjectManager_MoveNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.srcNodeIndexPath = [];
        var _rtmp3151 = input.readListBegin();
        var _size150 = _rtmp3151.size || 0;
        for (var _i152 = 0; _i152 < _size150; ++_i152) {
          var elem153 = null;
          elem153 = input.readI64();
          this.srcNodeIndexPath.push(elem153);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.dstNodeIndexPath = [];
        var _rtmp3155 = input.readListBegin();
        var _size154 = _rtmp3155.size || 0;
        for (var _i156 = 0; _i156 < _size154; ++_i156) {
          var elem157 = null;
          elem157 = input.readI64();
          this.dstNodeIndexPath.push(elem157);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_MoveNode_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_MoveNode_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.srcNodeIndexPath !== null && this.srcNodeIndexPath !== undefined) {
    output.writeFieldBegin('srcNodeIndexPath', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.srcNodeIndexPath.length);
    for (var iter158 in this.srcNodeIndexPath) {
      if (this.srcNodeIndexPath.hasOwnProperty(iter158)) {
        iter158 = this.srcNodeIndexPath[iter158];
        output.writeI64(iter158);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dstNodeIndexPath !== null && this.dstNodeIndexPath !== undefined) {
    output.writeFieldBegin('dstNodeIndexPath', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.dstNodeIndexPath.length);
    for (var iter159 in this.dstNodeIndexPath) {
      if (this.dstNodeIndexPath.hasOwnProperty(iter159)) {
        iter159 = this.dstNodeIndexPath[iter159];
        output.writeI64(iter159);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_MoveNode_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_MoveNode_result.prototype = {};
ProjectManager_MoveNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_MoveNode_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_MoveNode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetToolChainExtensions_args = function(args) {
  this.ctx = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
  }
};
ProjectManager_GetToolChainExtensions_args.prototype = {};
ProjectManager_GetToolChainExtensions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetToolChainExtensions_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetToolChainExtensions_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetToolChainExtensions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
ProjectManager_GetToolChainExtensions_result.prototype = {};
ProjectManager_GetToolChainExtensions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3161 = input.readListBegin();
        var _size160 = _rtmp3161.size || 0;
        for (var _i162 = 0; _i162 < _size160; ++_i162) {
          var elem163 = null;
          elem163 = input.readString();
          this.success.push(elem163);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetToolChainExtensions_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetToolChainExtensions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter164 in this.success) {
      if (this.success.hasOwnProperty(iter164)) {
        iter164 = this.success[iter164];
        output.writeString(iter164);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetToolchains_args = function(args) {
};
ProjectManager_GetToolchains_args.prototype = {};
ProjectManager_GetToolchains_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetToolchains_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetToolchains_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetToolchains_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Toolchain]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetToolchains_result.prototype = {};
ProjectManager_GetToolchains_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3166 = input.readListBegin();
        var _size165 = _rtmp3166.size || 0;
        for (var _i167 = 0; _i167 < _size165; ++_i167) {
          var elem168 = null;
          elem168 = new ttypes.Toolchain();
          elem168.read(input);
          this.success.push(elem168);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetToolchains_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetToolchains_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter169 in this.success) {
      if (this.success.hasOwnProperty(iter169)) {
        iter169 = this.success[iter169];
        iter169.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddToolchain_args = function(args) {
  this.toolchain = null;
  if (args) {
    if (args.toolchain !== undefined && args.toolchain !== null) {
      this.toolchain = new ttypes.Toolchain(args.toolchain);
    }
  }
};
ProjectManager_AddToolchain_args.prototype = {};
ProjectManager_AddToolchain_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.toolchain = new ttypes.Toolchain();
        this.toolchain.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddToolchain_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddToolchain_args');
  if (this.toolchain !== null && this.toolchain !== undefined) {
    output.writeFieldBegin('toolchain', Thrift.Type.STRUCT, 1);
    this.toolchain.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddToolchain_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_AddToolchain_result.prototype = {};
ProjectManager_AddToolchain_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddToolchain_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddToolchain_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_UpdateTool_args = function(args) {
  this.toolchainId = null;
  this.tool = null;
  if (args) {
    if (args.toolchainId !== undefined && args.toolchainId !== null) {
      this.toolchainId = args.toolchainId;
    }
    if (args.tool !== undefined && args.tool !== null) {
      this.tool = new ttypes.ToolDefinition(args.tool);
    }
  }
};
ProjectManager_UpdateTool_args.prototype = {};
ProjectManager_UpdateTool_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.toolchainId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tool = new ttypes.ToolDefinition();
        this.tool.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_UpdateTool_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_UpdateTool_args');
  if (this.toolchainId !== null && this.toolchainId !== undefined) {
    output.writeFieldBegin('toolchainId', Thrift.Type.STRING, 1);
    output.writeString(this.toolchainId);
    output.writeFieldEnd();
  }
  if (this.tool !== null && this.tool !== undefined) {
    output.writeFieldBegin('tool', Thrift.Type.STRUCT, 2);
    this.tool.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_UpdateTool_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_UpdateTool_result.prototype = {};
ProjectManager_UpdateTool_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_UpdateTool_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_UpdateTool_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetBatchBuildItems_args = function(args) {
};
ProjectManager_GetBatchBuildItems_args.prototype = {};
ProjectManager_GetBatchBuildItems_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetBatchBuildItems_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetBatchBuildItems_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetBatchBuildItems_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.BatchBuildItem]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetBatchBuildItems_result.prototype = {};
ProjectManager_GetBatchBuildItems_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3171 = input.readListBegin();
        var _size170 = _rtmp3171.size || 0;
        for (var _i172 = 0; _i172 < _size170; ++_i172) {
          var elem173 = null;
          elem173 = new ttypes.BatchBuildItem();
          elem173.read(input);
          this.success.push(elem173);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetBatchBuildItems_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetBatchBuildItems_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter174 in this.success) {
      if (this.success.hasOwnProperty(iter174)) {
        iter174 = this.success[iter174];
        iter174.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetBatchBuildItems_args = function(args) {
  this.batchBuildItems = null;
  if (args) {
    if (args.batchBuildItems !== undefined && args.batchBuildItems !== null) {
      this.batchBuildItems = Thrift.copyList(args.batchBuildItems, [ttypes.BatchBuildItem]);
    }
  }
};
ProjectManager_SetBatchBuildItems_args.prototype = {};
ProjectManager_SetBatchBuildItems_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.batchBuildItems = [];
        var _rtmp3176 = input.readListBegin();
        var _size175 = _rtmp3176.size || 0;
        for (var _i177 = 0; _i177 < _size175; ++_i177) {
          var elem178 = null;
          elem178 = new ttypes.BatchBuildItem();
          elem178.read(input);
          this.batchBuildItems.push(elem178);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetBatchBuildItems_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetBatchBuildItems_args');
  if (this.batchBuildItems !== null && this.batchBuildItems !== undefined) {
    output.writeFieldBegin('batchBuildItems', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.batchBuildItems.length);
    for (var iter179 in this.batchBuildItems) {
      if (this.batchBuildItems.hasOwnProperty(iter179)) {
        iter179 = this.batchBuildItems[iter179];
        iter179.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetBatchBuildItems_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_SetBatchBuildItems_result.prototype = {};
ProjectManager_SetBatchBuildItems_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetBatchBuildItems_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetBatchBuildItems_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_BuildProject_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  this.numParallelBuilds = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.numParallelBuilds !== undefined && args.numParallelBuilds !== null) {
      this.numParallelBuilds = args.numParallelBuilds;
    }
  }
};
ProjectManager_BuildProject_args.prototype = {};
ProjectManager_BuildProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numParallelBuilds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_BuildProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_BuildProject_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.numParallelBuilds !== null && this.numParallelBuilds !== undefined) {
    output.writeFieldBegin('numParallelBuilds', Thrift.Type.I32, 3);
    output.writeI32(this.numParallelBuilds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_BuildProject_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.BuildResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_BuildProject_result.prototype = {};
ProjectManager_BuildProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuildResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_BuildProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_BuildProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RebuildAllAsync_args = function(args) {
  this.buildItems = null;
  this.stopAtError = null;
  this.numParallelBuilds = null;
  if (args) {
    if (args.buildItems !== undefined && args.buildItems !== null) {
      this.buildItems = Thrift.copyList(args.buildItems, [ttypes.BuildItem]);
    }
    if (args.stopAtError !== undefined && args.stopAtError !== null) {
      this.stopAtError = args.stopAtError;
    }
    if (args.numParallelBuilds !== undefined && args.numParallelBuilds !== null) {
      this.numParallelBuilds = args.numParallelBuilds;
    }
  }
};
ProjectManager_RebuildAllAsync_args.prototype = {};
ProjectManager_RebuildAllAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.buildItems = [];
        var _rtmp3181 = input.readListBegin();
        var _size180 = _rtmp3181.size || 0;
        for (var _i182 = 0; _i182 < _size180; ++_i182) {
          var elem183 = null;
          elem183 = new ttypes.BuildItem();
          elem183.read(input);
          this.buildItems.push(elem183);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.stopAtError = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numParallelBuilds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RebuildAllAsync_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RebuildAllAsync_args');
  if (this.buildItems !== null && this.buildItems !== undefined) {
    output.writeFieldBegin('buildItems', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.buildItems.length);
    for (var iter184 in this.buildItems) {
      if (this.buildItems.hasOwnProperty(iter184)) {
        iter184 = this.buildItems[iter184];
        iter184.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stopAtError !== null && this.stopAtError !== undefined) {
    output.writeFieldBegin('stopAtError', Thrift.Type.BOOL, 2);
    output.writeBool(this.stopAtError);
    output.writeFieldEnd();
  }
  if (this.numParallelBuilds !== null && this.numParallelBuilds !== undefined) {
    output.writeFieldBegin('numParallelBuilds', Thrift.Type.I32, 3);
    output.writeI32(this.numParallelBuilds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RebuildAllAsync_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_RebuildAllAsync_result.prototype = {};
ProjectManager_RebuildAllAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RebuildAllAsync_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RebuildAllAsync_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CanCompile_args = function(args) {
  this.buildItem = null;
  if (args) {
    if (args.buildItem !== undefined && args.buildItem !== null) {
      this.buildItem = new ttypes.BuildItem(args.buildItem);
    }
  }
};
ProjectManager_CanCompile_args.prototype = {};
ProjectManager_CanCompile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buildItem = new ttypes.BuildItem();
        this.buildItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CanCompile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CanCompile_args');
  if (this.buildItem !== null && this.buildItem !== undefined) {
    output.writeFieldBegin('buildItem', Thrift.Type.STRUCT, 1);
    this.buildItem.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CanCompile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CanCompile_result.prototype = {};
ProjectManager_CanCompile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CanCompile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CanCompile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CompileAsync_args = function(args) {
  this.buildItem = null;
  this.numParallelBuilds = null;
  if (args) {
    if (args.buildItem !== undefined && args.buildItem !== null) {
      this.buildItem = new ttypes.BuildItem(args.buildItem);
    }
    if (args.numParallelBuilds !== undefined && args.numParallelBuilds !== null) {
      this.numParallelBuilds = args.numParallelBuilds;
    }
  }
};
ProjectManager_CompileAsync_args.prototype = {};
ProjectManager_CompileAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buildItem = new ttypes.BuildItem();
        this.buildItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.numParallelBuilds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CompileAsync_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CompileAsync_args');
  if (this.buildItem !== null && this.buildItem !== undefined) {
    output.writeFieldBegin('buildItem', Thrift.Type.STRUCT, 1);
    this.buildItem.write(output);
    output.writeFieldEnd();
  }
  if (this.numParallelBuilds !== null && this.numParallelBuilds !== undefined) {
    output.writeFieldBegin('numParallelBuilds', Thrift.Type.I32, 2);
    output.writeI32(this.numParallelBuilds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CompileAsync_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CompileAsync_result.prototype = {};
ProjectManager_CompileAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CompileAsync_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CompileAsync_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_BuildAsync_args = function(args) {
  this.buildItems = null;
  this.stopAtError = null;
  this.numParallelBuilds = null;
  if (args) {
    if (args.buildItems !== undefined && args.buildItems !== null) {
      this.buildItems = Thrift.copyList(args.buildItems, [ttypes.BuildItem]);
    }
    if (args.stopAtError !== undefined && args.stopAtError !== null) {
      this.stopAtError = args.stopAtError;
    }
    if (args.numParallelBuilds !== undefined && args.numParallelBuilds !== null) {
      this.numParallelBuilds = args.numParallelBuilds;
    }
  }
};
ProjectManager_BuildAsync_args.prototype = {};
ProjectManager_BuildAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.buildItems = [];
        var _rtmp3186 = input.readListBegin();
        var _size185 = _rtmp3186.size || 0;
        for (var _i187 = 0; _i187 < _size185; ++_i187) {
          var elem188 = null;
          elem188 = new ttypes.BuildItem();
          elem188.read(input);
          this.buildItems.push(elem188);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.stopAtError = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numParallelBuilds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_BuildAsync_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_BuildAsync_args');
  if (this.buildItems !== null && this.buildItems !== undefined) {
    output.writeFieldBegin('buildItems', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.buildItems.length);
    for (var iter189 in this.buildItems) {
      if (this.buildItems.hasOwnProperty(iter189)) {
        iter189 = this.buildItems[iter189];
        iter189.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stopAtError !== null && this.stopAtError !== undefined) {
    output.writeFieldBegin('stopAtError', Thrift.Type.BOOL, 2);
    output.writeBool(this.stopAtError);
    output.writeFieldEnd();
  }
  if (this.numParallelBuilds !== null && this.numParallelBuilds !== undefined) {
    output.writeFieldBegin('numParallelBuilds', Thrift.Type.I32, 3);
    output.writeI32(this.numParallelBuilds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_BuildAsync_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_BuildAsync_result.prototype = {};
ProjectManager_BuildAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_BuildAsync_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_BuildAsync_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CleanAsync_args = function(args) {
  this.buildItems = null;
  if (args) {
    if (args.buildItems !== undefined && args.buildItems !== null) {
      this.buildItems = Thrift.copyList(args.buildItems, [ttypes.BuildItem]);
    }
  }
};
ProjectManager_CleanAsync_args.prototype = {};
ProjectManager_CleanAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.buildItems = [];
        var _rtmp3191 = input.readListBegin();
        var _size190 = _rtmp3191.size || 0;
        for (var _i192 = 0; _i192 < _size190; ++_i192) {
          var elem193 = null;
          elem193 = new ttypes.BuildItem();
          elem193.read(input);
          this.buildItems.push(elem193);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CleanAsync_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CleanAsync_args');
  if (this.buildItems !== null && this.buildItems !== undefined) {
    output.writeFieldBegin('buildItems', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.buildItems.length);
    for (var iter194 in this.buildItems) {
      if (this.buildItems.hasOwnProperty(iter194)) {
        iter194 = this.buildItems[iter194];
        iter194.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CleanAsync_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CleanAsync_result.prototype = {};
ProjectManager_CleanAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CleanAsync_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CleanAsync_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CancelBuild_args = function(args) {
};
ProjectManager_CancelBuild_args.prototype = {};
ProjectManager_CancelBuild_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CancelBuild_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CancelBuild_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CancelBuild_result = function(args) {
};
ProjectManager_CancelBuild_result.prototype = {};
ProjectManager_CancelBuild_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CancelBuild_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CancelBuild_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_TerminateAnalysis_args = function(args) {
};
ProjectManager_TerminateAnalysis_args.prototype = {};
ProjectManager_TerminateAnalysis_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_TerminateAnalysis_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_TerminateAnalysis_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_TerminateAnalysis_result = function(args) {
};
ProjectManager_TerminateAnalysis_result.prototype = {};
ProjectManager_TerminateAnalysis_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_TerminateAnalysis_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_TerminateAnalysis_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetBuildNodes_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  this.toolIdentifier = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.toolIdentifier !== undefined && args.toolIdentifier !== null) {
      this.toolIdentifier = args.toolIdentifier;
    }
  }
};
ProjectManager_GetBuildNodes_args.prototype = {};
ProjectManager_GetBuildNodes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.toolIdentifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetBuildNodes_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetBuildNodes_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.toolIdentifier !== null && this.toolIdentifier !== undefined) {
    output.writeFieldBegin('toolIdentifier', Thrift.Type.STRING, 3);
    output.writeString(this.toolIdentifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetBuildNodes_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.BuildNode]);
    }
  }
};
ProjectManager_GetBuildNodes_result.prototype = {};
ProjectManager_GetBuildNodes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3196 = input.readListBegin();
        var _size195 = _rtmp3196.size || 0;
        for (var _i197 = 0; _i197 < _size195; ++_i197) {
          var elem198 = null;
          elem198 = new ttypes.BuildNode();
          elem198.read(input);
          this.success.push(elem198);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetBuildNodes_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetBuildNodes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter199 in this.success) {
      if (this.success.hasOwnProperty(iter199)) {
        iter199 = this.success[iter199];
        iter199.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOptionsForNode_args = function(args) {
  this.prj = null;
  this.node = null;
  this.configurationName = null;
  this.optionIds = [];
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.optionIds !== undefined && args.optionIds !== null) {
      this.optionIds = Thrift.copyList(args.optionIds, [null]);
    }
  }
};
ProjectManager_GetOptionsForNode_args.prototype = {};
ProjectManager_GetOptionsForNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.optionIds = [];
        var _rtmp3201 = input.readListBegin();
        var _size200 = _rtmp3201.size || 0;
        for (var _i202 = 0; _i202 < _size200; ++_i202) {
          var elem203 = null;
          elem203 = input.readString();
          this.optionIds.push(elem203);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOptionsForNode_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOptionsForNode_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 2);
    this.node.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 3);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.optionIds !== null && this.optionIds !== undefined) {
    output.writeFieldBegin('optionIds', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.optionIds.length);
    for (var iter204 in this.optionIds) {
      if (this.optionIds.hasOwnProperty(iter204)) {
        iter204 = this.optionIds[iter204];
        output.writeString(iter204);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOptionsForNode_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionDescription]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetOptionsForNode_result.prototype = {};
ProjectManager_GetOptionsForNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3206 = input.readListBegin();
        var _size205 = _rtmp3206.size || 0;
        for (var _i207 = 0; _i207 < _size205; ++_i207) {
          var elem208 = null;
          elem208 = new ttypes.OptionDescription();
          elem208.read(input);
          this.success.push(elem208);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOptionsForNode_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOptionsForNode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter209 in this.success) {
      if (this.success.hasOwnProperty(iter209)) {
        iter209 = this.success[iter209];
        iter209.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOptionsForConfiguration_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  this.optionIds = [];
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.optionIds !== undefined && args.optionIds !== null) {
      this.optionIds = Thrift.copyList(args.optionIds, [null]);
    }
  }
};
ProjectManager_GetOptionsForConfiguration_args.prototype = {};
ProjectManager_GetOptionsForConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.optionIds = [];
        var _rtmp3211 = input.readListBegin();
        var _size210 = _rtmp3211.size || 0;
        for (var _i212 = 0; _i212 < _size210; ++_i212) {
          var elem213 = null;
          elem213 = input.readString();
          this.optionIds.push(elem213);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOptionsForConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOptionsForConfiguration_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.optionIds !== null && this.optionIds !== undefined) {
    output.writeFieldBegin('optionIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.optionIds.length);
    for (var iter214 in this.optionIds) {
      if (this.optionIds.hasOwnProperty(iter214)) {
        iter214 = this.optionIds[iter214];
        output.writeString(iter214);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOptionsForConfiguration_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionDescription]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetOptionsForConfiguration_result.prototype = {};
ProjectManager_GetOptionsForConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3216 = input.readListBegin();
        var _size215 = _rtmp3216.size || 0;
        for (var _i217 = 0; _i217 < _size215; ++_i217) {
          var elem218 = null;
          elem218 = new ttypes.OptionDescription();
          elem218.read(input);
          this.success.push(elem218);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOptionsForConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOptionsForConfiguration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter219 in this.success) {
      if (this.success.hasOwnProperty(iter219)) {
        iter219 = this.success[iter219];
        iter219.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ApplyOptionsForNode_args = function(args) {
  this.prj = null;
  this.node = null;
  this.configurationName = null;
  this.optionsToSet = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.optionsToSet !== undefined && args.optionsToSet !== null) {
      this.optionsToSet = Thrift.copyList(args.optionsToSet, [ttypes.OptionDescription]);
    }
  }
};
ProjectManager_ApplyOptionsForNode_args.prototype = {};
ProjectManager_ApplyOptionsForNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.optionsToSet = [];
        var _rtmp3221 = input.readListBegin();
        var _size220 = _rtmp3221.size || 0;
        for (var _i222 = 0; _i222 < _size220; ++_i222) {
          var elem223 = null;
          elem223 = new ttypes.OptionDescription();
          elem223.read(input);
          this.optionsToSet.push(elem223);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ApplyOptionsForNode_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ApplyOptionsForNode_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 2);
    this.node.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 3);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.optionsToSet !== null && this.optionsToSet !== undefined) {
    output.writeFieldBegin('optionsToSet', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.optionsToSet.length);
    for (var iter224 in this.optionsToSet) {
      if (this.optionsToSet.hasOwnProperty(iter224)) {
        iter224 = this.optionsToSet[iter224];
        iter224.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ApplyOptionsForNode_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionDescription]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_ApplyOptionsForNode_result.prototype = {};
ProjectManager_ApplyOptionsForNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3226 = input.readListBegin();
        var _size225 = _rtmp3226.size || 0;
        for (var _i227 = 0; _i227 < _size225; ++_i227) {
          var elem228 = null;
          elem228 = new ttypes.OptionDescription();
          elem228.read(input);
          this.success.push(elem228);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ApplyOptionsForNode_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ApplyOptionsForNode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter229 in this.success) {
      if (this.success.hasOwnProperty(iter229)) {
        iter229 = this.success[iter229];
        iter229.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_VerifyOptionsForNode_args = function(args) {
  this.prj = null;
  this.node = null;
  this.configurationName = null;
  this.optionsToSet = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.optionsToSet !== undefined && args.optionsToSet !== null) {
      this.optionsToSet = Thrift.copyList(args.optionsToSet, [ttypes.OptionDescription]);
    }
  }
};
ProjectManager_VerifyOptionsForNode_args.prototype = {};
ProjectManager_VerifyOptionsForNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.optionsToSet = [];
        var _rtmp3231 = input.readListBegin();
        var _size230 = _rtmp3231.size || 0;
        for (var _i232 = 0; _i232 < _size230; ++_i232) {
          var elem233 = null;
          elem233 = new ttypes.OptionDescription();
          elem233.read(input);
          this.optionsToSet.push(elem233);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_VerifyOptionsForNode_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_VerifyOptionsForNode_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 2);
    this.node.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 3);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.optionsToSet !== null && this.optionsToSet !== undefined) {
    output.writeFieldBegin('optionsToSet', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.optionsToSet.length);
    for (var iter234 in this.optionsToSet) {
      if (this.optionsToSet.hasOwnProperty(iter234)) {
        iter234 = this.optionsToSet[iter234];
        iter234.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_VerifyOptionsForNode_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionDescription]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_VerifyOptionsForNode_result.prototype = {};
ProjectManager_VerifyOptionsForNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3236 = input.readListBegin();
        var _size235 = _rtmp3236.size || 0;
        for (var _i237 = 0; _i237 < _size235; ++_i237) {
          var elem238 = null;
          elem238 = new ttypes.OptionDescription();
          elem238.read(input);
          this.success.push(elem238);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_VerifyOptionsForNode_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_VerifyOptionsForNode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter239 in this.success) {
      if (this.success.hasOwnProperty(iter239)) {
        iter239 = this.success[iter239];
        iter239.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ApplyOptionsForConfiguration_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  this.optionsToSet = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.optionsToSet !== undefined && args.optionsToSet !== null) {
      this.optionsToSet = Thrift.copyList(args.optionsToSet, [ttypes.OptionDescription]);
    }
  }
};
ProjectManager_ApplyOptionsForConfiguration_args.prototype = {};
ProjectManager_ApplyOptionsForConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.optionsToSet = [];
        var _rtmp3241 = input.readListBegin();
        var _size240 = _rtmp3241.size || 0;
        for (var _i242 = 0; _i242 < _size240; ++_i242) {
          var elem243 = null;
          elem243 = new ttypes.OptionDescription();
          elem243.read(input);
          this.optionsToSet.push(elem243);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ApplyOptionsForConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ApplyOptionsForConfiguration_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.optionsToSet !== null && this.optionsToSet !== undefined) {
    output.writeFieldBegin('optionsToSet', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.optionsToSet.length);
    for (var iter244 in this.optionsToSet) {
      if (this.optionsToSet.hasOwnProperty(iter244)) {
        iter244 = this.optionsToSet[iter244];
        iter244.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ApplyOptionsForConfiguration_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionDescription]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_ApplyOptionsForConfiguration_result.prototype = {};
ProjectManager_ApplyOptionsForConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3246 = input.readListBegin();
        var _size245 = _rtmp3246.size || 0;
        for (var _i247 = 0; _i247 < _size245; ++_i247) {
          var elem248 = null;
          elem248 = new ttypes.OptionDescription();
          elem248.read(input);
          this.success.push(elem248);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ApplyOptionsForConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ApplyOptionsForConfiguration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter249 in this.success) {
      if (this.success.hasOwnProperty(iter249)) {
        iter249 = this.success[iter249];
        iter249.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_VerifyOptionsForConfiguration_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  this.optionsToSet = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.optionsToSet !== undefined && args.optionsToSet !== null) {
      this.optionsToSet = Thrift.copyList(args.optionsToSet, [ttypes.OptionDescription]);
    }
  }
};
ProjectManager_VerifyOptionsForConfiguration_args.prototype = {};
ProjectManager_VerifyOptionsForConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.optionsToSet = [];
        var _rtmp3251 = input.readListBegin();
        var _size250 = _rtmp3251.size || 0;
        for (var _i252 = 0; _i252 < _size250; ++_i252) {
          var elem253 = null;
          elem253 = new ttypes.OptionDescription();
          elem253.read(input);
          this.optionsToSet.push(elem253);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_VerifyOptionsForConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_VerifyOptionsForConfiguration_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.optionsToSet !== null && this.optionsToSet !== undefined) {
    output.writeFieldBegin('optionsToSet', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.optionsToSet.length);
    for (var iter254 in this.optionsToSet) {
      if (this.optionsToSet.hasOwnProperty(iter254)) {
        iter254 = this.optionsToSet[iter254];
        iter254.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_VerifyOptionsForConfiguration_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionDescription]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_VerifyOptionsForConfiguration_result.prototype = {};
ProjectManager_VerifyOptionsForConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3256 = input.readListBegin();
        var _size255 = _rtmp3256.size || 0;
        for (var _i257 = 0; _i257 < _size255; ++_i257) {
          var elem258 = null;
          elem258 = new ttypes.OptionDescription();
          elem258.read(input);
          this.success.push(elem258);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_VerifyOptionsForConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_VerifyOptionsForConfiguration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter259 in this.success) {
      if (this.success.hasOwnProperty(iter259)) {
        iter259 = this.success[iter259];
        iter259.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOptionCategories_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
  }
};
ProjectManager_GetOptionCategories_args.prototype = {};
ProjectManager_GetOptionCategories_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOptionCategories_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOptionCategories_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOptionCategories_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionCategory]);
    }
  }
};
ProjectManager_GetOptionCategories_result.prototype = {};
ProjectManager_GetOptionCategories_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3261 = input.readListBegin();
        var _size260 = _rtmp3261.size || 0;
        for (var _i262 = 0; _i262 < _size260; ++_i262) {
          var elem263 = null;
          elem263 = new ttypes.OptionCategory();
          elem263.read(input);
          this.success.push(elem263);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOptionCategories_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOptionCategories_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter264 in this.success) {
      if (this.success.hasOwnProperty(iter264)) {
        iter264 = this.success[iter264];
        iter264.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CompareOptions_args = function(args) {
  this.optionsToCompare = null;
  if (args) {
    if (args.optionsToCompare !== undefined && args.optionsToCompare !== null) {
      this.optionsToCompare = Thrift.copyList(args.optionsToCompare, [Thrift.copyList, ttypes.OptionDescription]);
    }
  }
};
ProjectManager_CompareOptions_args.prototype = {};
ProjectManager_CompareOptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.optionsToCompare = [];
        var _rtmp3266 = input.readListBegin();
        var _size265 = _rtmp3266.size || 0;
        for (var _i267 = 0; _i267 < _size265; ++_i267) {
          var elem268 = null;
          elem268 = [];
          var _rtmp3270 = input.readListBegin();
          var _size269 = _rtmp3270.size || 0;
          for (var _i271 = 0; _i271 < _size269; ++_i271) {
            var elem272 = null;
            elem272 = new ttypes.OptionDescription();
            elem272.read(input);
            elem268.push(elem272);
          }
          input.readListEnd();
          this.optionsToCompare.push(elem268);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CompareOptions_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CompareOptions_args');
  if (this.optionsToCompare !== null && this.optionsToCompare !== undefined) {
    output.writeFieldBegin('optionsToCompare', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.LIST, this.optionsToCompare.length);
    for (var iter273 in this.optionsToCompare) {
      if (this.optionsToCompare.hasOwnProperty(iter273)) {
        iter273 = this.optionsToCompare[iter273];
        output.writeListBegin(Thrift.Type.STRUCT, iter273.length);
        for (var iter274 in iter273) {
          if (iter273.hasOwnProperty(iter274)) {
            iter274 = iter273[iter274];
            iter274.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CompareOptions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
    }
  }
};
ProjectManager_CompareOptions_result.prototype = {};
ProjectManager_CompareOptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp3276 = input.readMapBegin();
        var _size275 = _rtmp3276.size || 0;
        for (var _i277 = 0; _i277 < _size275; ++_i277) {
          var key278 = null;
          var val279 = null;
          key278 = input.readString();
          val279 = [];
          var _rtmp3281 = input.readListBegin();
          var _size280 = _rtmp3281.size || 0;
          for (var _i282 = 0; _i282 < _size280; ++_i282) {
            var elem283 = null;
            elem283 = input.readString();
            val279.push(elem283);
          }
          input.readListEnd();
          this.success[key278] = val279;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CompareOptions_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CompareOptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter284 in this.success) {
      if (this.success.hasOwnProperty(kiter284)) {
        var viter285 = this.success[kiter284];
        output.writeString(kiter284);
        output.writeListBegin(Thrift.Type.STRING, viter285.length);
        for (var iter286 in viter285) {
          if (viter285.hasOwnProperty(iter286)) {
            iter286 = viter285[iter286];
            output.writeString(iter286);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_EnableMultiFileCompilation_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  this.node = null;
  this.enabled = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
    if (args.enabled !== undefined && args.enabled !== null) {
      this.enabled = args.enabled;
    }
  }
};
ProjectManager_EnableMultiFileCompilation_args.prototype = {};
ProjectManager_EnableMultiFileCompilation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_EnableMultiFileCompilation_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_EnableMultiFileCompilation_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 3);
    this.node.write(output);
    output.writeFieldEnd();
  }
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 4);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_EnableMultiFileCompilation_result = function(args) {
};
ProjectManager_EnableMultiFileCompilation_result.prototype = {};
ProjectManager_EnableMultiFileCompilation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_EnableMultiFileCompilation_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_EnableMultiFileCompilation_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_EnableMultiFileDiscardPublicSymbols_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  this.node = null;
  this.enabled = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
    if (args.enabled !== undefined && args.enabled !== null) {
      this.enabled = args.enabled;
    }
  }
};
ProjectManager_EnableMultiFileDiscardPublicSymbols_args.prototype = {};
ProjectManager_EnableMultiFileDiscardPublicSymbols_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_EnableMultiFileDiscardPublicSymbols_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_EnableMultiFileDiscardPublicSymbols_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 3);
    this.node.write(output);
    output.writeFieldEnd();
  }
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 4);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_EnableMultiFileDiscardPublicSymbols_result = function(args) {
};
ProjectManager_EnableMultiFileDiscardPublicSymbols_result.prototype = {};
ProjectManager_EnableMultiFileDiscardPublicSymbols_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_EnableMultiFileDiscardPublicSymbols_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_EnableMultiFileDiscardPublicSymbols_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsMultiFileCompilationEnabled_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  this.node = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
  }
};
ProjectManager_IsMultiFileCompilationEnabled_args.prototype = {};
ProjectManager_IsMultiFileCompilationEnabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsMultiFileCompilationEnabled_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsMultiFileCompilationEnabled_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 3);
    this.node.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsMultiFileCompilationEnabled_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_IsMultiFileCompilationEnabled_result.prototype = {};
ProjectManager_IsMultiFileCompilationEnabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsMultiFileCompilationEnabled_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsMultiFileCompilationEnabled_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  this.node = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
  }
};
ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_args.prototype = {};
ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 3);
    this.node.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_result.prototype = {};
ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetToolArgumentsForConfiguration_args = function(args) {
  this.prj = null;
  this.toolId = null;
  this.configurationName = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.toolId !== undefined && args.toolId !== null) {
      this.toolId = args.toolId;
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
  }
};
ProjectManager_GetToolArgumentsForConfiguration_args.prototype = {};
ProjectManager_GetToolArgumentsForConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toolId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetToolArgumentsForConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetToolArgumentsForConfiguration_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.toolId !== null && this.toolId !== undefined) {
    output.writeFieldBegin('toolId', Thrift.Type.STRING, 2);
    output.writeString(this.toolId);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 3);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetToolArgumentsForConfiguration_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
ProjectManager_GetToolArgumentsForConfiguration_result.prototype = {};
ProjectManager_GetToolArgumentsForConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3288 = input.readListBegin();
        var _size287 = _rtmp3288.size || 0;
        for (var _i289 = 0; _i289 < _size287; ++_i289) {
          var elem290 = null;
          elem290 = input.readString();
          this.success.push(elem290);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetToolArgumentsForConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetToolArgumentsForConfiguration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter291 in this.success) {
      if (this.success.hasOwnProperty(iter291)) {
        iter291 = this.success[iter291];
        output.writeString(iter291);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ExpandArgVars_args = function(args) {
  this.input = null;
  this.project = null;
  this.configurationName = null;
  this.throwOnFailure = null;
  if (args) {
    if (args.input !== undefined && args.input !== null) {
      this.input = args.input;
    }
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.throwOnFailure !== undefined && args.throwOnFailure !== null) {
      this.throwOnFailure = args.throwOnFailure;
    }
  }
};
ProjectManager_ExpandArgVars_args.prototype = {};
ProjectManager_ExpandArgVars_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.input = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.throwOnFailure = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ExpandArgVars_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ExpandArgVars_args');
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.STRING, 1);
    output.writeString(this.input);
    output.writeFieldEnd();
  }
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 2);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 3);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.throwOnFailure !== null && this.throwOnFailure !== undefined) {
    output.writeFieldBegin('throwOnFailure', Thrift.Type.BOOL, 4);
    output.writeBool(this.throwOnFailure);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ExpandArgVars_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_ExpandArgVars_result.prototype = {};
ProjectManager_ExpandArgVars_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ExpandArgVars_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ExpandArgVars_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetPresentationForOptionsAsJson_args = function(args) {
  this.locale = null;
  if (args) {
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
ProjectManager_GetPresentationForOptionsAsJson_args.prototype = {};
ProjectManager_GetPresentationForOptionsAsJson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetPresentationForOptionsAsJson_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetPresentationForOptionsAsJson_args');
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 1);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetPresentationForOptionsAsJson_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetPresentationForOptionsAsJson_result.prototype = {};
ProjectManager_GetPresentationForOptionsAsJson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetPresentationForOptionsAsJson_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetPresentationForOptionsAsJson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_UpdateProjectConnections_args = function(args) {
  this.prj = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
  }
};
ProjectManager_UpdateProjectConnections_args.prototype = {};
ProjectManager_UpdateProjectConnections_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_UpdateProjectConnections_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_UpdateProjectConnections_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_UpdateProjectConnections_result = function(args) {
};
ProjectManager_UpdateProjectConnections_result.prototype = {};
ProjectManager_UpdateProjectConnections_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_UpdateProjectConnections_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_UpdateProjectConnections_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_UpdateProjectConnection_args = function(args) {
  this.prj = null;
  this.file = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.file !== undefined && args.file !== null) {
      this.file = args.file;
    }
  }
};
ProjectManager_UpdateProjectConnection_args.prototype = {};
ProjectManager_UpdateProjectConnection_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_UpdateProjectConnection_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_UpdateProjectConnection_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.STRING, 2);
    output.writeString(this.file);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_UpdateProjectConnection_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_UpdateProjectConnection_result.prototype = {};
ProjectManager_UpdateProjectConnection_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_UpdateProjectConnection_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_UpdateProjectConnection_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveMonitors_args = function(args) {
  this.prj = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
  }
};
ProjectManager_RemoveMonitors_args.prototype = {};
ProjectManager_RemoveMonitors_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveMonitors_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveMonitors_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveMonitors_result = function(args) {
};
ProjectManager_RemoveMonitors_result.prototype = {};
ProjectManager_RemoveMonitors_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveMonitors_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveMonitors_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_EnableProjectConnections_args = function(args) {
  this.enable = null;
  if (args) {
    if (args.enable !== undefined && args.enable !== null) {
      this.enable = args.enable;
    }
  }
};
ProjectManager_EnableProjectConnections_args.prototype = {};
ProjectManager_EnableProjectConnections_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_EnableProjectConnections_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_EnableProjectConnections_args');
  if (this.enable !== null && this.enable !== undefined) {
    output.writeFieldBegin('enable', Thrift.Type.BOOL, 1);
    output.writeBool(this.enable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_EnableProjectConnections_result = function(args) {
};
ProjectManager_EnableProjectConnections_result.prototype = {};
ProjectManager_EnableProjectConnections_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_EnableProjectConnections_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_EnableProjectConnections_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsExternalProjectUpToDate_args = function(args) {
  this.prj = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
  }
};
ProjectManager_IsExternalProjectUpToDate_args.prototype = {};
ProjectManager_IsExternalProjectUpToDate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsExternalProjectUpToDate_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsExternalProjectUpToDate_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsExternalProjectUpToDate_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_IsExternalProjectUpToDate_result.prototype = {};
ProjectManager_IsExternalProjectUpToDate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsExternalProjectUpToDate_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsExternalProjectUpToDate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SynchonizeExternalProject_args = function(args) {
  this.prj = null;
  this.seq = 1;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
  }
};
ProjectManager_SynchonizeExternalProject_args.prototype = {};
ProjectManager_SynchonizeExternalProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SynchonizeExternalProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SynchonizeExternalProject_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 2);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SynchonizeExternalProject_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_SynchonizeExternalProject_result.prototype = {};
ProjectManager_SynchonizeExternalProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SynchonizeExternalProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SynchonizeExternalProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ConfigureExternalProject_args = function(args) {
  this.prj = null;
  this.force = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.force !== undefined && args.force !== null) {
      this.force = args.force;
    }
  }
};
ProjectManager_ConfigureExternalProject_args.prototype = {};
ProjectManager_ConfigureExternalProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.force = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ConfigureExternalProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ConfigureExternalProject_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.force !== null && this.force !== undefined) {
    output.writeFieldBegin('force', Thrift.Type.BOOL, 2);
    output.writeBool(this.force);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ConfigureExternalProject_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_ConfigureExternalProject_result.prototype = {};
ProjectManager_ConfigureExternalProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ConfigureExternalProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ConfigureExternalProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddControlFile_args = function(args) {
  this.prj = null;
  this.file = null;
  this.pluginId = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.file !== undefined && args.file !== null) {
      this.file = args.file;
    }
    if (args.pluginId !== undefined && args.pluginId !== null) {
      this.pluginId = args.pluginId;
    }
  }
};
ProjectManager_AddControlFile_args.prototype = {};
ProjectManager_AddControlFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pluginId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddControlFile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddControlFile_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.STRING, 2);
    output.writeString(this.file);
    output.writeFieldEnd();
  }
  if (this.pluginId !== null && this.pluginId !== undefined) {
    output.writeFieldBegin('pluginId', Thrift.Type.STRING, 3);
    output.writeString(this.pluginId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddControlFile_result = function(args) {
};
ProjectManager_AddControlFile_result.prototype = {};
ProjectManager_AddControlFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddControlFile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddControlFile_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_HasControlFileFor_args = function(args) {
  this.prj = null;
  this.pluginId = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.pluginId !== undefined && args.pluginId !== null) {
      this.pluginId = args.pluginId;
    }
  }
};
ProjectManager_HasControlFileFor_args.prototype = {};
ProjectManager_HasControlFileFor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pluginId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_HasControlFileFor_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_HasControlFileFor_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.pluginId !== null && this.pluginId !== undefined) {
    output.writeFieldBegin('pluginId', Thrift.Type.STRING, 2);
    output.writeString(this.pluginId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_HasControlFileFor_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_HasControlFileFor_result.prototype = {};
ProjectManager_HasControlFileFor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_HasControlFileFor_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_HasControlFileFor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsProjectConnectionsEnabled_args = function(args) {
};
ProjectManager_IsProjectConnectionsEnabled_args.prototype = {};
ProjectManager_IsProjectConnectionsEnabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsProjectConnectionsEnabled_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsProjectConnectionsEnabled_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsProjectConnectionsEnabled_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_IsProjectConnectionsEnabled_result.prototype = {};
ProjectManager_IsProjectConnectionsEnabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsProjectConnectionsEnabled_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsProjectConnectionsEnabled_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetControlFilePlugins_args = function(args) {
};
ProjectManager_GetControlFilePlugins_args.prototype = {};
ProjectManager_GetControlFilePlugins_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetControlFilePlugins_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetControlFilePlugins_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetControlFilePlugins_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ControlFilePlugin]);
    }
  }
};
ProjectManager_GetControlFilePlugins_result.prototype = {};
ProjectManager_GetControlFilePlugins_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3293 = input.readListBegin();
        var _size292 = _rtmp3293.size || 0;
        for (var _i294 = 0; _i294 < _size292; ++_i294) {
          var elem295 = null;
          elem295 = new ttypes.ControlFilePlugin();
          elem295.read(input);
          this.success.push(elem295);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetControlFilePlugins_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetControlFilePlugins_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter296 in this.success) {
      if (this.success.hasOwnProperty(iter296)) {
        iter296 = this.success[iter296];
        iter296.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOptionsForProject_args = function(args) {
  this.prj = null;
  this.optionIds = [];
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.optionIds !== undefined && args.optionIds !== null) {
      this.optionIds = Thrift.copyList(args.optionIds, [null]);
    }
  }
};
ProjectManager_GetOptionsForProject_args.prototype = {};
ProjectManager_GetOptionsForProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.optionIds = [];
        var _rtmp3298 = input.readListBegin();
        var _size297 = _rtmp3298.size || 0;
        for (var _i299 = 0; _i299 < _size297; ++_i299) {
          var elem300 = null;
          elem300 = input.readString();
          this.optionIds.push(elem300);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOptionsForProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOptionsForProject_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.optionIds !== null && this.optionIds !== undefined) {
    output.writeFieldBegin('optionIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.optionIds.length);
    for (var iter301 in this.optionIds) {
      if (this.optionIds.hasOwnProperty(iter301)) {
        iter301 = this.optionIds[iter301];
        output.writeString(iter301);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOptionsForProject_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionDescription]);
    }
  }
};
ProjectManager_GetOptionsForProject_result.prototype = {};
ProjectManager_GetOptionsForProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3303 = input.readListBegin();
        var _size302 = _rtmp3303.size || 0;
        for (var _i304 = 0; _i304 < _size302; ++_i304) {
          var elem305 = null;
          elem305 = new ttypes.OptionDescription();
          elem305.read(input);
          this.success.push(elem305);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOptionsForProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOptionsForProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter306 in this.success) {
      if (this.success.hasOwnProperty(iter306)) {
        iter306 = this.success[iter306];
        iter306.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ApplyOptionsForProject_args = function(args) {
  this.prj = null;
  this.options = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = Thrift.copyList(args.options, [ttypes.OptionDescription]);
    }
  }
};
ProjectManager_ApplyOptionsForProject_args.prototype = {};
ProjectManager_ApplyOptionsForProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.options = [];
        var _rtmp3308 = input.readListBegin();
        var _size307 = _rtmp3308.size || 0;
        for (var _i309 = 0; _i309 < _size307; ++_i309) {
          var elem310 = null;
          elem310 = new ttypes.OptionDescription();
          elem310.read(input);
          this.options.push(elem310);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ApplyOptionsForProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ApplyOptionsForProject_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.options.length);
    for (var iter311 in this.options) {
      if (this.options.hasOwnProperty(iter311)) {
        iter311 = this.options[iter311];
        iter311.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ApplyOptionsForProject_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionDescription]);
    }
  }
};
ProjectManager_ApplyOptionsForProject_result.prototype = {};
ProjectManager_ApplyOptionsForProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3313 = input.readListBegin();
        var _size312 = _rtmp3313.size || 0;
        for (var _i314 = 0; _i314 < _size312; ++_i314) {
          var elem315 = null;
          elem315 = new ttypes.OptionDescription();
          elem315.read(input);
          this.success.push(elem315);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ApplyOptionsForProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ApplyOptionsForProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter316 in this.success) {
      if (this.success.hasOwnProperty(iter316)) {
        iter316 = this.success[iter316];
        iter316.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetUserArgVarInfo_args = function(args) {
  this.category = null;
  if (args) {
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
  }
};
ProjectManager_GetUserArgVarInfo_args.prototype = {};
ProjectManager_GetUserArgVarInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.category = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetUserArgVarInfo_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetUserArgVarInfo_args');
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.I32, 1);
    output.writeI32(this.category);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetUserArgVarInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.UserArgVarGroupInfo]);
    }
  }
};
ProjectManager_GetUserArgVarInfo_result.prototype = {};
ProjectManager_GetUserArgVarInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3318 = input.readListBegin();
        var _size317 = _rtmp3318.size || 0;
        for (var _i319 = 0; _i319 < _size317; ++_i319) {
          var elem320 = null;
          elem320 = new ttypes.UserArgVarGroupInfo();
          elem320.read(input);
          this.success.push(elem320);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetUserArgVarInfo_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetUserArgVarInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter321 in this.success) {
      if (this.success.hasOwnProperty(iter321)) {
        iter321 = this.success[iter321];
        iter321.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetUserArgVarInfo_args = function(args) {
  this.info = null;
  if (args) {
    if (args.info !== undefined && args.info !== null) {
      this.info = Thrift.copyList(args.info, [ttypes.UserArgVarGroupInfo]);
    }
  }
};
ProjectManager_SetUserArgVarInfo_args.prototype = {};
ProjectManager_SetUserArgVarInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.info = [];
        var _rtmp3323 = input.readListBegin();
        var _size322 = _rtmp3323.size || 0;
        for (var _i324 = 0; _i324 < _size322; ++_i324) {
          var elem325 = null;
          elem325 = new ttypes.UserArgVarGroupInfo();
          elem325.read(input);
          this.info.push(elem325);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetUserArgVarInfo_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetUserArgVarInfo_args');
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.info.length);
    for (var iter326 in this.info) {
      if (this.info.hasOwnProperty(iter326)) {
        iter326 = this.info[iter326];
        iter326.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetUserArgVarInfo_result = function(args) {
};
ProjectManager_SetUserArgVarInfo_result.prototype = {};
ProjectManager_SetUserArgVarInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetUserArgVarInfo_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetUserArgVarInfo_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ImportUserArgVarInfo_args = function(args) {
  this.category = null;
  this.argVarFilePath = null;
  if (args) {
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
    if (args.argVarFilePath !== undefined && args.argVarFilePath !== null) {
      this.argVarFilePath = args.argVarFilePath;
    }
  }
};
ProjectManager_ImportUserArgVarInfo_args.prototype = {};
ProjectManager_ImportUserArgVarInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.category = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.argVarFilePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ImportUserArgVarInfo_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ImportUserArgVarInfo_args');
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.I32, 1);
    output.writeI32(this.category);
    output.writeFieldEnd();
  }
  if (this.argVarFilePath !== null && this.argVarFilePath !== undefined) {
    output.writeFieldBegin('argVarFilePath', Thrift.Type.STRING, 2);
    output.writeString(this.argVarFilePath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ImportUserArgVarInfo_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_ImportUserArgVarInfo_result.prototype = {};
ProjectManager_ImportUserArgVarInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ImportUserArgVarInfo_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ImportUserArgVarInfo_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ExportUserArgVarInfo_args = function(args) {
  this.category = null;
  this.argVarFilePath = null;
  if (args) {
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
    if (args.argVarFilePath !== undefined && args.argVarFilePath !== null) {
      this.argVarFilePath = args.argVarFilePath;
    }
  }
};
ProjectManager_ExportUserArgVarInfo_args.prototype = {};
ProjectManager_ExportUserArgVarInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.category = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.argVarFilePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ExportUserArgVarInfo_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ExportUserArgVarInfo_args');
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.I32, 1);
    output.writeI32(this.category);
    output.writeFieldEnd();
  }
  if (this.argVarFilePath !== null && this.argVarFilePath !== undefined) {
    output.writeFieldBegin('argVarFilePath', Thrift.Type.STRING, 2);
    output.writeString(this.argVarFilePath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ExportUserArgVarInfo_result = function(args) {
};
ProjectManager_ExportUserArgVarInfo_result.prototype = {};
ProjectManager_ExportUserArgVarInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ExportUserArgVarInfo_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ExportUserArgVarInfo_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetExternalTools_args = function(args) {
};
ProjectManager_GetExternalTools_args.prototype = {};
ProjectManager_GetExternalTools_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetExternalTools_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetExternalTools_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetExternalTools_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ExternalTool]);
    }
  }
};
ProjectManager_GetExternalTools_result.prototype = {};
ProjectManager_GetExternalTools_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3328 = input.readListBegin();
        var _size327 = _rtmp3328.size || 0;
        for (var _i329 = 0; _i329 < _size327; ++_i329) {
          var elem330 = null;
          elem330 = new ttypes.ExternalTool();
          elem330.read(input);
          this.success.push(elem330);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetExternalTools_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetExternalTools_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter331 in this.success) {
      if (this.success.hasOwnProperty(iter331)) {
        iter331 = this.success[iter331];
        iter331.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetExternalTools_args = function(args) {
  this.tools = null;
  if (args) {
    if (args.tools !== undefined && args.tools !== null) {
      this.tools = Thrift.copyList(args.tools, [ttypes.ExternalTool]);
    }
  }
};
ProjectManager_SetExternalTools_args.prototype = {};
ProjectManager_SetExternalTools_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.tools = [];
        var _rtmp3333 = input.readListBegin();
        var _size332 = _rtmp3333.size || 0;
        for (var _i334 = 0; _i334 < _size332; ++_i334) {
          var elem335 = null;
          elem335 = new ttypes.ExternalTool();
          elem335.read(input);
          this.tools.push(elem335);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetExternalTools_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetExternalTools_args');
  if (this.tools !== null && this.tools !== undefined) {
    output.writeFieldBegin('tools', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.tools.length);
    for (var iter336 in this.tools) {
      if (this.tools.hasOwnProperty(iter336)) {
        iter336 = this.tools[iter336];
        iter336.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetExternalTools_result = function(args) {
};
ProjectManager_SetExternalTools_result.prototype = {};
ProjectManager_SetExternalTools_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetExternalTools_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetExternalTools_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetWizards_args = function(args) {
  this.toolchainId = null;
  if (args) {
    if (args.toolchainId !== undefined && args.toolchainId !== null) {
      this.toolchainId = args.toolchainId;
    }
  }
};
ProjectManager_GetWizards_args.prototype = {};
ProjectManager_GetWizards_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.toolchainId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetWizards_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetWizards_args');
  if (this.toolchainId !== null && this.toolchainId !== undefined) {
    output.writeFieldBegin('toolchainId', Thrift.Type.STRING, 1);
    output.writeString(this.toolchainId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetWizards_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.WizardPlugin]);
    }
  }
};
ProjectManager_GetWizards_result.prototype = {};
ProjectManager_GetWizards_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3338 = input.readListBegin();
        var _size337 = _rtmp3338.size || 0;
        for (var _i339 = 0; _i339 < _size337; ++_i339) {
          var elem340 = null;
          elem340 = new ttypes.WizardPlugin();
          elem340.read(input);
          this.success.push(elem340);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetWizards_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetWizards_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter341 in this.success) {
      if (this.success.hasOwnProperty(iter341)) {
        iter341 = this.success[iter341];
        iter341.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RunWizard_args = function(args) {
  this.wizard = null;
  if (args) {
    if (args.wizard !== undefined && args.wizard !== null) {
      this.wizard = new ttypes.WizardPlugin(args.wizard);
    }
  }
};
ProjectManager_RunWizard_args.prototype = {};
ProjectManager_RunWizard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.wizard = new ttypes.WizardPlugin();
        this.wizard.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RunWizard_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RunWizard_args');
  if (this.wizard !== null && this.wizard !== undefined) {
    output.writeFieldBegin('wizard', Thrift.Type.STRUCT, 1);
    this.wizard.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RunWizard_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectContext(args.success);
    }
  }
};
ProjectManager_RunWizard_result.prototype = {};
ProjectManager_RunWizard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RunWizard_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RunWizard_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetGlobalOptions_args = function(args) {
};
ProjectManager_GetGlobalOptions_args.prototype = {};
ProjectManager_GetGlobalOptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetGlobalOptions_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetGlobalOptions_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetGlobalOptions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionDescription]);
    }
  }
};
ProjectManager_GetGlobalOptions_result.prototype = {};
ProjectManager_GetGlobalOptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3343 = input.readListBegin();
        var _size342 = _rtmp3343.size || 0;
        for (var _i344 = 0; _i344 < _size342; ++_i344) {
          var elem345 = null;
          elem345 = new ttypes.OptionDescription();
          elem345.read(input);
          this.success.push(elem345);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetGlobalOptions_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetGlobalOptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter346 in this.success) {
      if (this.success.hasOwnProperty(iter346)) {
        iter346 = this.success[iter346];
        iter346.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetGlobalOption_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
ProjectManager_GetGlobalOption_args.prototype = {};
ProjectManager_GetGlobalOption_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetGlobalOption_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetGlobalOption_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetGlobalOption_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionDescription]);
    }
  }
};
ProjectManager_GetGlobalOption_result.prototype = {};
ProjectManager_GetGlobalOption_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3348 = input.readListBegin();
        var _size347 = _rtmp3348.size || 0;
        for (var _i349 = 0; _i349 < _size347; ++_i349) {
          var elem350 = null;
          elem350 = new ttypes.OptionDescription();
          elem350.read(input);
          this.success.push(elem350);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetGlobalOption_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetGlobalOption_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter351 in this.success) {
      if (this.success.hasOwnProperty(iter351)) {
        iter351 = this.success[iter351];
        iter351.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ApplyGlobalOptions_args = function(args) {
  this.options = null;
  if (args) {
    if (args.options !== undefined && args.options !== null) {
      this.options = Thrift.copyList(args.options, [ttypes.OptionDescription]);
    }
  }
};
ProjectManager_ApplyGlobalOptions_args.prototype = {};
ProjectManager_ApplyGlobalOptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.options = [];
        var _rtmp3353 = input.readListBegin();
        var _size352 = _rtmp3353.size || 0;
        for (var _i354 = 0; _i354 < _size352; ++_i354) {
          var elem355 = null;
          elem355 = new ttypes.OptionDescription();
          elem355.read(input);
          this.options.push(elem355);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ApplyGlobalOptions_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ApplyGlobalOptions_args');
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.options.length);
    for (var iter356 in this.options) {
      if (this.options.hasOwnProperty(iter356)) {
        iter356 = this.options[iter356];
        iter356.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ApplyGlobalOptions_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionDescription]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_ApplyGlobalOptions_result.prototype = {};
ProjectManager_ApplyGlobalOptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3358 = input.readListBegin();
        var _size357 = _rtmp3358.size || 0;
        for (var _i359 = 0; _i359 < _size357; ++_i359) {
          var elem360 = null;
          elem360 = new ttypes.OptionDescription();
          elem360.read(input);
          this.success.push(elem360);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ApplyGlobalOptions_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ApplyGlobalOptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter361 in this.success) {
      if (this.success.hasOwnProperty(iter361)) {
        iter361 = this.success[iter361];
        iter361.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetTargetVersion_args = function(args) {
  this.prj = null;
  this.configuration = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configuration !== undefined && args.configuration !== null) {
      this.configuration = new ttypes.Configuration(args.configuration);
    }
  }
};
ProjectManager_GetTargetVersion_args.prototype = {};
ProjectManager_GetTargetVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.configuration = new ttypes.Configuration();
        this.configuration.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetTargetVersion_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetTargetVersion_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configuration !== null && this.configuration !== undefined) {
    output.writeFieldBegin('configuration', Thrift.Type.STRUCT, 2);
    this.configuration.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetTargetVersion_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetTargetVersion_result.prototype = {};
ProjectManager_GetTargetVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetTargetVersion_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetTargetVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetProjectAliases_args = function(args) {
  this.prj = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
  }
};
ProjectManager_GetProjectAliases_args.prototype = {};
ProjectManager_GetProjectAliases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetProjectAliases_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetProjectAliases_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetProjectAliases_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
  }
};
ProjectManager_GetProjectAliases_result.prototype = {};
ProjectManager_GetProjectAliases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp3363 = input.readMapBegin();
        var _size362 = _rtmp3363.size || 0;
        for (var _i364 = 0; _i364 < _size362; ++_i364) {
          var key365 = null;
          var val366 = null;
          key365 = input.readString();
          val366 = input.readString();
          this.success[key365] = val366;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetProjectAliases_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetProjectAliases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter367 in this.success) {
      if (this.success.hasOwnProperty(kiter367)) {
        var viter368 = this.success[kiter367];
        output.writeString(kiter367);
        output.writeString(viter368);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetProjectFolderAliases_args = function(args) {
  this.prj = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
  }
};
ProjectManager_GetProjectFolderAliases_args.prototype = {};
ProjectManager_GetProjectFolderAliases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetProjectFolderAliases_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetProjectFolderAliases_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetProjectFolderAliases_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
  }
};
ProjectManager_GetProjectFolderAliases_result.prototype = {};
ProjectManager_GetProjectFolderAliases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp3370 = input.readMapBegin();
        var _size369 = _rtmp3370.size || 0;
        for (var _i371 = 0; _i371 < _size369; ++_i371) {
          var key372 = null;
          var val373 = null;
          key372 = input.readString();
          val373 = input.readString();
          this.success[key372] = val373;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetProjectFolderAliases_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetProjectFolderAliases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter374 in this.success) {
      if (this.success.hasOwnProperty(kiter374)) {
        var viter375 = this.success[kiter374];
        output.writeString(kiter374);
        output.writeString(viter375);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetProjectFolderAliases_args = function(args) {
  this.prj = null;
  this.aliases = null;
  this.forceUpdate = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.aliases !== undefined && args.aliases !== null) {
      this.aliases = Thrift.copyMap(args.aliases, [null]);
    }
    if (args.forceUpdate !== undefined && args.forceUpdate !== null) {
      this.forceUpdate = args.forceUpdate;
    }
  }
};
ProjectManager_SetProjectFolderAliases_args.prototype = {};
ProjectManager_SetProjectFolderAliases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.aliases = {};
        var _rtmp3377 = input.readMapBegin();
        var _size376 = _rtmp3377.size || 0;
        for (var _i378 = 0; _i378 < _size376; ++_i378) {
          var key379 = null;
          var val380 = null;
          key379 = input.readString();
          val380 = input.readString();
          this.aliases[key379] = val380;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.forceUpdate = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetProjectFolderAliases_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetProjectFolderAliases_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.aliases !== null && this.aliases !== undefined) {
    output.writeFieldBegin('aliases', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.aliases));
    for (var kiter381 in this.aliases) {
      if (this.aliases.hasOwnProperty(kiter381)) {
        var viter382 = this.aliases[kiter381];
        output.writeString(kiter381);
        output.writeString(viter382);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.forceUpdate !== null && this.forceUpdate !== undefined) {
    output.writeFieldBegin('forceUpdate', Thrift.Type.BOOL, 3);
    output.writeBool(this.forceUpdate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetProjectFolderAliases_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_SetProjectFolderAliases_result.prototype = {};
ProjectManager_SetProjectFolderAliases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetProjectFolderAliases_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetProjectFolderAliases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManagerClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
Thrift.inherits(ProjectManagerClient, HeartbeatServiceClient);
ProjectManagerClient.prototype.seqid = function() { return this._seqid; };
ProjectManagerClient.prototype.new_seqid = function() { return this._seqid += 1; };

ProjectManagerClient.prototype.CreateEwwFile = function(file_path, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CreateEwwFile(file_path);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CreateEwwFile(file_path);
  }
};

ProjectManagerClient.prototype.send_CreateEwwFile = function(file_path) {
  var output = new this.pClass(this.output);
  var params = {
    file_path: file_path
  };
  var args = new ProjectManager_CreateEwwFile_args(params);
  try {
    output.writeMessageBegin('CreateEwwFile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CreateEwwFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_CreateEwwFile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CreateEwwFile failed: unknown result');
};

ProjectManagerClient.prototype.DisableAutoDataStoring = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_DisableAutoDataStoring();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_DisableAutoDataStoring();
  }
};

ProjectManagerClient.prototype.send_DisableAutoDataStoring = function() {
  var output = new this.pClass(this.output);
  var args = new ProjectManager_DisableAutoDataStoring_args();
  try {
    output.writeMessageBegin('DisableAutoDataStoring', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_DisableAutoDataStoring = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_DisableAutoDataStoring_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.LoadEwwFile = function(file_path, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_LoadEwwFile(file_path);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_LoadEwwFile(file_path);
  }
};

ProjectManagerClient.prototype.send_LoadEwwFile = function(file_path) {
  var output = new this.pClass(this.output);
  var params = {
    file_path: file_path
  };
  var args = new ProjectManager_LoadEwwFile_args(params);
  try {
    output.writeMessageBegin('LoadEwwFile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_LoadEwwFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_LoadEwwFile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('LoadEwwFile failed: unknown result');
};

ProjectManagerClient.prototype.IsWorkspaceModified = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_IsWorkspaceModified();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_IsWorkspaceModified();
  }
};

ProjectManagerClient.prototype.send_IsWorkspaceModified = function() {
  var output = new this.pClass(this.output);
  var args = new ProjectManager_IsWorkspaceModified_args();
  try {
    output.writeMessageBegin('IsWorkspaceModified', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_IsWorkspaceModified = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_IsWorkspaceModified_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('IsWorkspaceModified failed: unknown result');
};

ProjectManagerClient.prototype.SaveEwwFile = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SaveEwwFile();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SaveEwwFile();
  }
};

ProjectManagerClient.prototype.send_SaveEwwFile = function() {
  var output = new this.pClass(this.output);
  var args = new ProjectManager_SaveEwwFile_args();
  try {
    output.writeMessageBegin('SaveEwwFile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SaveEwwFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_SaveEwwFile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.SaveEwwFileAs = function(file_path, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SaveEwwFileAs(file_path);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SaveEwwFileAs(file_path);
  }
};

ProjectManagerClient.prototype.send_SaveEwwFileAs = function(file_path) {
  var output = new this.pClass(this.output);
  var params = {
    file_path: file_path
  };
  var args = new ProjectManager_SaveEwwFileAs_args(params);
  try {
    output.writeMessageBegin('SaveEwwFileAs', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SaveEwwFileAs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_SaveEwwFileAs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.GetProjects = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetProjects();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetProjects();
  }
};

ProjectManagerClient.prototype.send_GetProjects = function() {
  var output = new this.pClass(this.output);
  var args = new ProjectManager_GetProjects_args();
  try {
    output.writeMessageBegin('GetProjects', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetProjects = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetProjects_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetProjects failed: unknown result');
};

ProjectManagerClient.prototype.GetLoadedProjects = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetLoadedProjects();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetLoadedProjects();
  }
};

ProjectManagerClient.prototype.send_GetLoadedProjects = function() {
  var output = new this.pClass(this.output);
  var args = new ProjectManager_GetLoadedProjects_args();
  try {
    output.writeMessageBegin('GetLoadedProjects', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetLoadedProjects = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetLoadedProjects_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetLoadedProjects failed: unknown result');
};

ProjectManagerClient.prototype.GetCurrentProject = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetCurrentProject();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetCurrentProject();
  }
};

ProjectManagerClient.prototype.send_GetCurrentProject = function() {
  var output = new this.pClass(this.output);
  var args = new ProjectManager_GetCurrentProject_args();
  try {
    output.writeMessageBegin('GetCurrentProject', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetCurrentProject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetCurrentProject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetCurrentProject failed: unknown result');
};

ProjectManagerClient.prototype.SetCurrentProject = function(ctx, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetCurrentProject(ctx);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetCurrentProject(ctx);
  }
};

ProjectManagerClient.prototype.send_SetCurrentProject = function(ctx) {
  var output = new this.pClass(this.output);
  var params = {
    ctx: ctx
  };
  var args = new ProjectManager_SetCurrentProject_args(params);
  try {
    output.writeMessageBegin('SetCurrentProject', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetCurrentProject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_SetCurrentProject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.CloseWorkspace = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CloseWorkspace();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CloseWorkspace();
  }
};

ProjectManagerClient.prototype.send_CloseWorkspace = function() {
  var output = new this.pClass(this.output);
  var args = new ProjectManager_CloseWorkspace_args();
  try {
    output.writeMessageBegin('CloseWorkspace', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CloseWorkspace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_CloseWorkspace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.CreateEwpFile = function(file_path, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CreateEwpFile(file_path);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CreateEwpFile(file_path);
  }
};

ProjectManagerClient.prototype.send_CreateEwpFile = function(file_path) {
  var output = new this.pClass(this.output);
  var params = {
    file_path: file_path
  };
  var args = new ProjectManager_CreateEwpFile_args(params);
  try {
    output.writeMessageBegin('CreateEwpFile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CreateEwpFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_CreateEwpFile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CreateEwpFile failed: unknown result');
};

ProjectManagerClient.prototype.CreateEwpFileWithToolChain = function(file_path, toolchain, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CreateEwpFileWithToolChain(file_path, toolchain);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CreateEwpFileWithToolChain(file_path, toolchain);
  }
};

ProjectManagerClient.prototype.send_CreateEwpFileWithToolChain = function(file_path, toolchain) {
  var output = new this.pClass(this.output);
  var params = {
    file_path: file_path,
    toolchain: toolchain
  };
  var args = new ProjectManager_CreateEwpFileWithToolChain_args(params);
  try {
    output.writeMessageBegin('CreateEwpFileWithToolChain', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CreateEwpFileWithToolChain = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_CreateEwpFileWithToolChain_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CreateEwpFileWithToolChain failed: unknown result');
};

ProjectManagerClient.prototype.CreateProjectFromTemplate = function(template_path, project_path, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CreateProjectFromTemplate(template_path, project_path);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CreateProjectFromTemplate(template_path, project_path);
  }
};

ProjectManagerClient.prototype.send_CreateProjectFromTemplate = function(template_path, project_path) {
  var output = new this.pClass(this.output);
  var params = {
    template_path: template_path,
    project_path: project_path
  };
  var args = new ProjectManager_CreateProjectFromTemplate_args(params);
  try {
    output.writeMessageBegin('CreateProjectFromTemplate', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CreateProjectFromTemplate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_CreateProjectFromTemplate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CreateProjectFromTemplate failed: unknown result');
};

ProjectManagerClient.prototype.LoadEwpFile = function(file_path, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_LoadEwpFile(file_path);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_LoadEwpFile(file_path);
  }
};

ProjectManagerClient.prototype.send_LoadEwpFile = function(file_path) {
  var output = new this.pClass(this.output);
  var params = {
    file_path: file_path
  };
  var args = new ProjectManager_LoadEwpFile_args(params);
  try {
    output.writeMessageBegin('LoadEwpFile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_LoadEwpFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_LoadEwpFile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('LoadEwpFile failed: unknown result');
};

ProjectManagerClient.prototype.SaveEwpFile = function(project, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SaveEwpFile(project);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SaveEwpFile(project);
  }
};

ProjectManagerClient.prototype.send_SaveEwpFile = function(project) {
  var output = new this.pClass(this.output);
  var params = {
    project: project
  };
  var args = new ProjectManager_SaveEwpFile_args(params);
  try {
    output.writeMessageBegin('SaveEwpFile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SaveEwpFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_SaveEwpFile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.ReloadProject = function(project, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ReloadProject(project);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ReloadProject(project);
  }
};

ProjectManagerClient.prototype.send_ReloadProject = function(project) {
  var output = new this.pClass(this.output);
  var params = {
    project: project
  };
  var args = new ProjectManager_ReloadProject_args(params);
  try {
    output.writeMessageBegin('ReloadProject', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_ReloadProject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_ReloadProject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ReloadProject failed: unknown result');
};

ProjectManagerClient.prototype.SaveEwpFileAs = function(project, file_path, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SaveEwpFileAs(project, file_path);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SaveEwpFileAs(project, file_path);
  }
};

ProjectManagerClient.prototype.send_SaveEwpFileAs = function(project, file_path) {
  var output = new this.pClass(this.output);
  var params = {
    project: project,
    file_path: file_path
  };
  var args = new ProjectManager_SaveEwpFileAs_args(params);
  try {
    output.writeMessageBegin('SaveEwpFileAs', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SaveEwpFileAs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_SaveEwpFileAs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.ImportProjectFiles = function(ctx, file_path, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ImportProjectFiles(ctx, file_path);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ImportProjectFiles(ctx, file_path);
  }
};

ProjectManagerClient.prototype.send_ImportProjectFiles = function(ctx, file_path) {
  var output = new this.pClass(this.output);
  var params = {
    ctx: ctx,
    file_path: file_path
  };
  var args = new ProjectManager_ImportProjectFiles_args(params);
  try {
    output.writeMessageBegin('ImportProjectFiles', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_ImportProjectFiles = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_ImportProjectFiles_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ImportProjectFiles failed: unknown result');
};

ProjectManagerClient.prototype.IsModified = function(project, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_IsModified(project);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_IsModified(project);
  }
};

ProjectManagerClient.prototype.send_IsModified = function(project) {
  var output = new this.pClass(this.output);
  var params = {
    project: project
  };
  var args = new ProjectManager_IsModified_args(params);
  try {
    output.writeMessageBegin('IsModified', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_IsModified = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_IsModified_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('IsModified failed: unknown result');
};

ProjectManagerClient.prototype.SetModified = function(project, modified, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetModified(project, modified);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetModified(project, modified);
  }
};

ProjectManagerClient.prototype.send_SetModified = function(project, modified) {
  var output = new this.pClass(this.output);
  var params = {
    project: project,
    modified: modified
  };
  var args = new ProjectManager_SetModified_args(params);
  try {
    output.writeMessageBegin('SetModified', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetModified = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_SetModified_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('SetModified failed: unknown result');
};

ProjectManagerClient.prototype.IsMemberOfCurrentProject = function(file_path, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_IsMemberOfCurrentProject(file_path);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_IsMemberOfCurrentProject(file_path);
  }
};

ProjectManagerClient.prototype.send_IsMemberOfCurrentProject = function(file_path) {
  var output = new this.pClass(this.output);
  var params = {
    file_path: file_path
  };
  var args = new ProjectManager_IsMemberOfCurrentProject_args(params);
  try {
    output.writeMessageBegin('IsMemberOfCurrentProject', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_IsMemberOfCurrentProject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_IsMemberOfCurrentProject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('IsMemberOfCurrentProject failed: unknown result');
};

ProjectManagerClient.prototype.FindMatchingHeaderOrSourceFile = function(file_path, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_FindMatchingHeaderOrSourceFile(file_path);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_FindMatchingHeaderOrSourceFile(file_path);
  }
};

ProjectManagerClient.prototype.send_FindMatchingHeaderOrSourceFile = function(file_path) {
  var output = new this.pClass(this.output);
  var params = {
    file_path: file_path
  };
  var args = new ProjectManager_FindMatchingHeaderOrSourceFile_args(params);
  try {
    output.writeMessageBegin('FindMatchingHeaderOrSourceFile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_FindMatchingHeaderOrSourceFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_FindMatchingHeaderOrSourceFile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('FindMatchingHeaderOrSourceFile failed: unknown result');
};

ProjectManagerClient.prototype.GetProject = function(file_path, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetProject(file_path);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetProject(file_path);
  }
};

ProjectManagerClient.prototype.send_GetProject = function(file_path) {
  var output = new this.pClass(this.output);
  var params = {
    file_path: file_path
  };
  var args = new ProjectManager_GetProject_args(params);
  try {
    output.writeMessageBegin('GetProject', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetProject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetProject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetProject failed: unknown result');
};

ProjectManagerClient.prototype.CloseProject = function(project, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CloseProject(project);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CloseProject(project);
  }
};

ProjectManagerClient.prototype.send_CloseProject = function(project) {
  var output = new this.pClass(this.output);
  var params = {
    project: project
  };
  var args = new ProjectManager_CloseProject_args(params);
  try {
    output.writeMessageBegin('CloseProject', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CloseProject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_CloseProject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.RemoveProject = function(project, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RemoveProject(project);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RemoveProject(project);
  }
};

ProjectManagerClient.prototype.send_RemoveProject = function(project) {
  var output = new this.pClass(this.output);
  var params = {
    project: project
  };
  var args = new ProjectManager_RemoveProject_args(params);
  try {
    output.writeMessageBegin('RemoveProject', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_RemoveProject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_RemoveProject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.GetFiles = function(project, configurationName, col, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetFiles(project, configurationName, col);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetFiles(project, configurationName, col);
  }
};

ProjectManagerClient.prototype.send_GetFiles = function(project, configurationName, col) {
  var output = new this.pClass(this.output);
  var params = {
    project: project,
    configurationName: configurationName,
    col: col
  };
  var args = new ProjectManager_GetFiles_args(params);
  try {
    output.writeMessageBegin('GetFiles', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetFiles = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetFiles_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetFiles failed: unknown result');
};

ProjectManagerClient.prototype.AddConfiguration = function(config, project, isDebug, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_AddConfiguration(config, project, isDebug);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_AddConfiguration(config, project, isDebug);
  }
};

ProjectManagerClient.prototype.send_AddConfiguration = function(config, project, isDebug) {
  var output = new this.pClass(this.output);
  var params = {
    config: config,
    project: project,
    isDebug: isDebug
  };
  var args = new ProjectManager_AddConfiguration_args(params);
  try {
    output.writeMessageBegin('AddConfiguration', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_AddConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_AddConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.AddConfigurationNoSave = function(project, config, basedOnName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_AddConfigurationNoSave(project, config, basedOnName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_AddConfigurationNoSave(project, config, basedOnName);
  }
};

ProjectManagerClient.prototype.send_AddConfigurationNoSave = function(project, config, basedOnName) {
  var output = new this.pClass(this.output);
  var params = {
    project: project,
    config: config,
    basedOnName: basedOnName
  };
  var args = new ProjectManager_AddConfigurationNoSave_args(params);
  try {
    output.writeMessageBegin('AddConfigurationNoSave', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_AddConfigurationNoSave = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_AddConfigurationNoSave_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.RemoveConfiguration = function(configurationName, project, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RemoveConfiguration(configurationName, project);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RemoveConfiguration(configurationName, project);
  }
};

ProjectManagerClient.prototype.send_RemoveConfiguration = function(configurationName, project) {
  var output = new this.pClass(this.output);
  var params = {
    configurationName: configurationName,
    project: project
  };
  var args = new ProjectManager_RemoveConfiguration_args(params);
  try {
    output.writeMessageBegin('RemoveConfiguration', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_RemoveConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_RemoveConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.RemoveConfigurationNoSave = function(project, configurationName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RemoveConfigurationNoSave(project, configurationName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RemoveConfigurationNoSave(project, configurationName);
  }
};

ProjectManagerClient.prototype.send_RemoveConfigurationNoSave = function(project, configurationName) {
  var output = new this.pClass(this.output);
  var params = {
    project: project,
    configurationName: configurationName
  };
  var args = new ProjectManager_RemoveConfigurationNoSave_args(params);
  try {
    output.writeMessageBegin('RemoveConfigurationNoSave', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_RemoveConfigurationNoSave = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_RemoveConfigurationNoSave_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.GetConfigurations = function(project, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetConfigurations(project);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetConfigurations(project);
  }
};

ProjectManagerClient.prototype.send_GetConfigurations = function(project) {
  var output = new this.pClass(this.output);
  var params = {
    project: project
  };
  var args = new ProjectManager_GetConfigurations_args(params);
  try {
    output.writeMessageBegin('GetConfigurations', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetConfigurations = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetConfigurations_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetConfigurations failed: unknown result');
};

ProjectManagerClient.prototype.SetConfigurationsOrder = function(project, configNames, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetConfigurationsOrder(project, configNames);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetConfigurationsOrder(project, configNames);
  }
};

ProjectManagerClient.prototype.send_SetConfigurationsOrder = function(project, configNames) {
  var output = new this.pClass(this.output);
  var params = {
    project: project,
    configNames: configNames
  };
  var args = new ProjectManager_SetConfigurationsOrder_args(params);
  try {
    output.writeMessageBegin('SetConfigurationsOrder', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetConfigurationsOrder = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_SetConfigurationsOrder_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.GetCurrentConfiguration = function(project, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetCurrentConfiguration(project);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetCurrentConfiguration(project);
  }
};

ProjectManagerClient.prototype.send_GetCurrentConfiguration = function(project) {
  var output = new this.pClass(this.output);
  var params = {
    project: project
  };
  var args = new ProjectManager_GetCurrentConfiguration_args(params);
  try {
    output.writeMessageBegin('GetCurrentConfiguration', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetCurrentConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetCurrentConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetCurrentConfiguration failed: unknown result');
};

ProjectManagerClient.prototype.SetCurrentConfiguration = function(project, configurationName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetCurrentConfiguration(project, configurationName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetCurrentConfiguration(project, configurationName);
  }
};

ProjectManagerClient.prototype.send_SetCurrentConfiguration = function(project, configurationName) {
  var output = new this.pClass(this.output);
  var params = {
    project: project,
    configurationName: configurationName
  };
  var args = new ProjectManager_SetCurrentConfiguration_args(params);
  try {
    output.writeMessageBegin('SetCurrentConfiguration', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetCurrentConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_SetCurrentConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.SetCurrentConfigurations = function(projects, configurationNames, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetCurrentConfigurations(projects, configurationNames);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetCurrentConfigurations(projects, configurationNames);
  }
};

ProjectManagerClient.prototype.send_SetCurrentConfigurations = function(projects, configurationNames) {
  var output = new this.pClass(this.output);
  var params = {
    projects: projects,
    configurationNames: configurationNames
  };
  var args = new ProjectManager_SetCurrentConfigurations_args(params);
  try {
    output.writeMessageBegin('SetCurrentConfigurations', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetCurrentConfigurations = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_SetCurrentConfigurations_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.CreateConfigWorkingCopy = function(project, originalConfigName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CreateConfigWorkingCopy(project, originalConfigName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CreateConfigWorkingCopy(project, originalConfigName);
  }
};

ProjectManagerClient.prototype.send_CreateConfigWorkingCopy = function(project, originalConfigName) {
  var output = new this.pClass(this.output);
  var params = {
    project: project,
    originalConfigName: originalConfigName
  };
  var args = new ProjectManager_CreateConfigWorkingCopy_args(params);
  try {
    output.writeMessageBegin('CreateConfigWorkingCopy', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CreateConfigWorkingCopy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_CreateConfigWorkingCopy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CreateConfigWorkingCopy failed: unknown result');
};

ProjectManagerClient.prototype.ApplyConfigWorkingCopy = function(project, workingCopyId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ApplyConfigWorkingCopy(project, workingCopyId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ApplyConfigWorkingCopy(project, workingCopyId);
  }
};

ProjectManagerClient.prototype.send_ApplyConfigWorkingCopy = function(project, workingCopyId) {
  var output = new this.pClass(this.output);
  var params = {
    project: project,
    workingCopyId: workingCopyId
  };
  var args = new ProjectManager_ApplyConfigWorkingCopy_args(params);
  try {
    output.writeMessageBegin('ApplyConfigWorkingCopy', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_ApplyConfigWorkingCopy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_ApplyConfigWorkingCopy_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.DiscardConfigWorkingCopy = function(project, workingCopyId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_DiscardConfigWorkingCopy(project, workingCopyId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_DiscardConfigWorkingCopy(project, workingCopyId);
  }
};

ProjectManagerClient.prototype.send_DiscardConfigWorkingCopy = function(project, workingCopyId) {
  var output = new this.pClass(this.output);
  var params = {
    project: project,
    workingCopyId: workingCopyId
  };
  var args = new ProjectManager_DiscardConfigWorkingCopy_args(params);
  try {
    output.writeMessageBegin('DiscardConfigWorkingCopy', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_DiscardConfigWorkingCopy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_DiscardConfigWorkingCopy_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.SetDesktopPathParameters = function(platform, slavery, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetDesktopPathParameters(platform, slavery);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetDesktopPathParameters(platform, slavery);
  }
};

ProjectManagerClient.prototype.send_SetDesktopPathParameters = function(platform, slavery) {
  var output = new this.pClass(this.output);
  var params = {
    platform: platform,
    slavery: slavery
  };
  var args = new ProjectManager_SetDesktopPathParameters_args(params);
  try {
    output.writeMessageBegin('SetDesktopPathParameters', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetDesktopPathParameters = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_SetDesktopPathParameters_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.GetOfflineDesktopPath = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetOfflineDesktopPath();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetOfflineDesktopPath();
  }
};

ProjectManagerClient.prototype.send_GetOfflineDesktopPath = function() {
  var output = new this.pClass(this.output);
  var args = new ProjectManager_GetOfflineDesktopPath_args();
  try {
    output.writeMessageBegin('GetOfflineDesktopPath', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetOfflineDesktopPath = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetOfflineDesktopPath_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetOfflineDesktopPath failed: unknown result');
};

ProjectManagerClient.prototype.GetOnlineDesktopPath = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetOnlineDesktopPath();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetOnlineDesktopPath();
  }
};

ProjectManagerClient.prototype.send_GetOnlineDesktopPath = function() {
  var output = new this.pClass(this.output);
  var args = new ProjectManager_GetOnlineDesktopPath_args();
  try {
    output.writeMessageBegin('GetOnlineDesktopPath', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetOnlineDesktopPath = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetOnlineDesktopPath_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetOnlineDesktopPath failed: unknown result');
};

ProjectManagerClient.prototype.GetRootNode = function(ctx, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetRootNode(ctx);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetRootNode(ctx);
  }
};

ProjectManagerClient.prototype.send_GetRootNode = function(ctx) {
  var output = new this.pClass(this.output);
  var params = {
    ctx: ctx
  };
  var args = new ProjectManager_GetRootNode_args(params);
  try {
    output.writeMessageBegin('GetRootNode', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetRootNode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetRootNode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetRootNode failed: unknown result');
};

ProjectManagerClient.prototype.SetNode = function(ctx, node, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetNode(ctx, node);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetNode(ctx, node);
  }
};

ProjectManagerClient.prototype.send_SetNode = function(ctx, node) {
  var output = new this.pClass(this.output);
  var params = {
    ctx: ctx,
    node: node
  };
  var args = new ProjectManager_SetNode_args(params);
  try {
    output.writeMessageBegin('SetNode', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetNode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_SetNode_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.GetNodeByIndex = function(ctx, nodeIndexPath, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetNodeByIndex(ctx, nodeIndexPath);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetNodeByIndex(ctx, nodeIndexPath);
  }
};

ProjectManagerClient.prototype.send_GetNodeByIndex = function(ctx, nodeIndexPath) {
  var output = new this.pClass(this.output);
  var params = {
    ctx: ctx,
    nodeIndexPath: nodeIndexPath
  };
  var args = new ProjectManager_GetNodeByIndex_args(params);
  try {
    output.writeMessageBegin('GetNodeByIndex', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetNodeByIndex = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetNodeByIndex_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetNodeByIndex failed: unknown result');
};

ProjectManagerClient.prototype.SetNodeByIndex = function(ctx, nodeIndexPath, node, save, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetNodeByIndex(ctx, nodeIndexPath, node, save);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetNodeByIndex(ctx, nodeIndexPath, node, save);
  }
};

ProjectManagerClient.prototype.send_SetNodeByIndex = function(ctx, nodeIndexPath, node, save) {
  var output = new this.pClass(this.output);
  var params = {
    ctx: ctx,
    nodeIndexPath: nodeIndexPath,
    node: node,
    save: save
  };
  var args = new ProjectManager_SetNodeByIndex_args(params);
  try {
    output.writeMessageBegin('SetNodeByIndex', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetNodeByIndex = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_SetNodeByIndex_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.AddNodeByIndex = function(ctx, nodeIndexPath, node, save, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_AddNodeByIndex(ctx, nodeIndexPath, node, save);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_AddNodeByIndex(ctx, nodeIndexPath, node, save);
  }
};

ProjectManagerClient.prototype.send_AddNodeByIndex = function(ctx, nodeIndexPath, node, save) {
  var output = new this.pClass(this.output);
  var params = {
    ctx: ctx,
    nodeIndexPath: nodeIndexPath,
    node: node,
    save: save
  };
  var args = new ProjectManager_AddNodeByIndex_args(params);
  try {
    output.writeMessageBegin('AddNodeByIndex', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_AddNodeByIndex = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_AddNodeByIndex_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.RemoveNodeByIndex = function(ctx, nodeIndexPath, save, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RemoveNodeByIndex(ctx, nodeIndexPath, save);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RemoveNodeByIndex(ctx, nodeIndexPath, save);
  }
};

ProjectManagerClient.prototype.send_RemoveNodeByIndex = function(ctx, nodeIndexPath, save) {
  var output = new this.pClass(this.output);
  var params = {
    ctx: ctx,
    nodeIndexPath: nodeIndexPath,
    save: save
  };
  var args = new ProjectManager_RemoveNodeByIndex_args(params);
  try {
    output.writeMessageBegin('RemoveNodeByIndex', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_RemoveNodeByIndex = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_RemoveNodeByIndex_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.UpdateNodeByIndex = function(ctx, nodeIndexPath, node, save, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_UpdateNodeByIndex(ctx, nodeIndexPath, node, save);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_UpdateNodeByIndex(ctx, nodeIndexPath, node, save);
  }
};

ProjectManagerClient.prototype.send_UpdateNodeByIndex = function(ctx, nodeIndexPath, node, save) {
  var output = new this.pClass(this.output);
  var params = {
    ctx: ctx,
    nodeIndexPath: nodeIndexPath,
    node: node,
    save: save
  };
  var args = new ProjectManager_UpdateNodeByIndex_args(params);
  try {
    output.writeMessageBegin('UpdateNodeByIndex', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_UpdateNodeByIndex = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_UpdateNodeByIndex_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.CanMoveNode = function(ctx, srcNodeIndexPath, dstNodeIndexPath, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CanMoveNode(ctx, srcNodeIndexPath, dstNodeIndexPath);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CanMoveNode(ctx, srcNodeIndexPath, dstNodeIndexPath);
  }
};

ProjectManagerClient.prototype.send_CanMoveNode = function(ctx, srcNodeIndexPath, dstNodeIndexPath) {
  var output = new this.pClass(this.output);
  var params = {
    ctx: ctx,
    srcNodeIndexPath: srcNodeIndexPath,
    dstNodeIndexPath: dstNodeIndexPath
  };
  var args = new ProjectManager_CanMoveNode_args(params);
  try {
    output.writeMessageBegin('CanMoveNode', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CanMoveNode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_CanMoveNode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CanMoveNode failed: unknown result');
};

ProjectManagerClient.prototype.MoveNode = function(ctx, srcNodeIndexPath, dstNodeIndexPath, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_MoveNode(ctx, srcNodeIndexPath, dstNodeIndexPath);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_MoveNode(ctx, srcNodeIndexPath, dstNodeIndexPath);
  }
};

ProjectManagerClient.prototype.send_MoveNode = function(ctx, srcNodeIndexPath, dstNodeIndexPath) {
  var output = new this.pClass(this.output);
  var params = {
    ctx: ctx,
    srcNodeIndexPath: srcNodeIndexPath,
    dstNodeIndexPath: dstNodeIndexPath
  };
  var args = new ProjectManager_MoveNode_args(params);
  try {
    output.writeMessageBegin('MoveNode', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_MoveNode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_MoveNode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('MoveNode failed: unknown result');
};

ProjectManagerClient.prototype.GetToolChainExtensions = function(ctx, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetToolChainExtensions(ctx);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetToolChainExtensions(ctx);
  }
};

ProjectManagerClient.prototype.send_GetToolChainExtensions = function(ctx) {
  var output = new this.pClass(this.output);
  var params = {
    ctx: ctx
  };
  var args = new ProjectManager_GetToolChainExtensions_args(params);
  try {
    output.writeMessageBegin('GetToolChainExtensions', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetToolChainExtensions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetToolChainExtensions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetToolChainExtensions failed: unknown result');
};

ProjectManagerClient.prototype.GetToolchains = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetToolchains();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetToolchains();
  }
};

ProjectManagerClient.prototype.send_GetToolchains = function() {
  var output = new this.pClass(this.output);
  var args = new ProjectManager_GetToolchains_args();
  try {
    output.writeMessageBegin('GetToolchains', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetToolchains = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetToolchains_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetToolchains failed: unknown result');
};

ProjectManagerClient.prototype.AddToolchain = function(toolchain, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_AddToolchain(toolchain);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_AddToolchain(toolchain);
  }
};

ProjectManagerClient.prototype.send_AddToolchain = function(toolchain) {
  var output = new this.pClass(this.output);
  var params = {
    toolchain: toolchain
  };
  var args = new ProjectManager_AddToolchain_args(params);
  try {
    output.writeMessageBegin('AddToolchain', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_AddToolchain = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_AddToolchain_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.UpdateTool = function(toolchainId, tool, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_UpdateTool(toolchainId, tool);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_UpdateTool(toolchainId, tool);
  }
};

ProjectManagerClient.prototype.send_UpdateTool = function(toolchainId, tool) {
  var output = new this.pClass(this.output);
  var params = {
    toolchainId: toolchainId,
    tool: tool
  };
  var args = new ProjectManager_UpdateTool_args(params);
  try {
    output.writeMessageBegin('UpdateTool', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_UpdateTool = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_UpdateTool_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('UpdateTool failed: unknown result');
};

ProjectManagerClient.prototype.GetBatchBuildItems = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetBatchBuildItems();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetBatchBuildItems();
  }
};

ProjectManagerClient.prototype.send_GetBatchBuildItems = function() {
  var output = new this.pClass(this.output);
  var args = new ProjectManager_GetBatchBuildItems_args();
  try {
    output.writeMessageBegin('GetBatchBuildItems', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetBatchBuildItems = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetBatchBuildItems_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetBatchBuildItems failed: unknown result');
};

ProjectManagerClient.prototype.SetBatchBuildItems = function(batchBuildItems, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetBatchBuildItems(batchBuildItems);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetBatchBuildItems(batchBuildItems);
  }
};

ProjectManagerClient.prototype.send_SetBatchBuildItems = function(batchBuildItems) {
  var output = new this.pClass(this.output);
  var params = {
    batchBuildItems: batchBuildItems
  };
  var args = new ProjectManager_SetBatchBuildItems_args(params);
  try {
    output.writeMessageBegin('SetBatchBuildItems', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetBatchBuildItems = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_SetBatchBuildItems_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.BuildProject = function(prj, configurationName, numParallelBuilds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_BuildProject(prj, configurationName, numParallelBuilds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_BuildProject(prj, configurationName, numParallelBuilds);
  }
};

ProjectManagerClient.prototype.send_BuildProject = function(prj, configurationName, numParallelBuilds) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    configurationName: configurationName,
    numParallelBuilds: numParallelBuilds
  };
  var args = new ProjectManager_BuildProject_args(params);
  try {
    output.writeMessageBegin('BuildProject', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_BuildProject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_BuildProject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('BuildProject failed: unknown result');
};

ProjectManagerClient.prototype.RebuildAllAsync = function(buildItems, stopAtError, numParallelBuilds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RebuildAllAsync(buildItems, stopAtError, numParallelBuilds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RebuildAllAsync(buildItems, stopAtError, numParallelBuilds);
  }
};

ProjectManagerClient.prototype.send_RebuildAllAsync = function(buildItems, stopAtError, numParallelBuilds) {
  var output = new this.pClass(this.output);
  var params = {
    buildItems: buildItems,
    stopAtError: stopAtError,
    numParallelBuilds: numParallelBuilds
  };
  var args = new ProjectManager_RebuildAllAsync_args(params);
  try {
    output.writeMessageBegin('RebuildAllAsync', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_RebuildAllAsync = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_RebuildAllAsync_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.CanCompile = function(buildItem, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CanCompile(buildItem);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CanCompile(buildItem);
  }
};

ProjectManagerClient.prototype.send_CanCompile = function(buildItem) {
  var output = new this.pClass(this.output);
  var params = {
    buildItem: buildItem
  };
  var args = new ProjectManager_CanCompile_args(params);
  try {
    output.writeMessageBegin('CanCompile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CanCompile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_CanCompile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CanCompile failed: unknown result');
};

ProjectManagerClient.prototype.CompileAsync = function(buildItem, numParallelBuilds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CompileAsync(buildItem, numParallelBuilds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CompileAsync(buildItem, numParallelBuilds);
  }
};

ProjectManagerClient.prototype.send_CompileAsync = function(buildItem, numParallelBuilds) {
  var output = new this.pClass(this.output);
  var params = {
    buildItem: buildItem,
    numParallelBuilds: numParallelBuilds
  };
  var args = new ProjectManager_CompileAsync_args(params);
  try {
    output.writeMessageBegin('CompileAsync', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CompileAsync = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_CompileAsync_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.BuildAsync = function(buildItems, stopAtError, numParallelBuilds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_BuildAsync(buildItems, stopAtError, numParallelBuilds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_BuildAsync(buildItems, stopAtError, numParallelBuilds);
  }
};

ProjectManagerClient.prototype.send_BuildAsync = function(buildItems, stopAtError, numParallelBuilds) {
  var output = new this.pClass(this.output);
  var params = {
    buildItems: buildItems,
    stopAtError: stopAtError,
    numParallelBuilds: numParallelBuilds
  };
  var args = new ProjectManager_BuildAsync_args(params);
  try {
    output.writeMessageBegin('BuildAsync', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_BuildAsync = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_BuildAsync_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.CleanAsync = function(buildItems, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CleanAsync(buildItems);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CleanAsync(buildItems);
  }
};

ProjectManagerClient.prototype.send_CleanAsync = function(buildItems) {
  var output = new this.pClass(this.output);
  var params = {
    buildItems: buildItems
  };
  var args = new ProjectManager_CleanAsync_args(params);
  try {
    output.writeMessageBegin('CleanAsync', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CleanAsync = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_CleanAsync_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.CancelBuild = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CancelBuild();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CancelBuild();
  }
};

ProjectManagerClient.prototype.send_CancelBuild = function() {
  var output = new this.pClass(this.output);
  var args = new ProjectManager_CancelBuild_args();
  try {
    output.writeMessageBegin('CancelBuild', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CancelBuild = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_CancelBuild_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.TerminateAnalysis = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_TerminateAnalysis();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_TerminateAnalysis();
  }
};

ProjectManagerClient.prototype.send_TerminateAnalysis = function() {
  var output = new this.pClass(this.output);
  var args = new ProjectManager_TerminateAnalysis_args();
  try {
    output.writeMessageBegin('TerminateAnalysis', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_TerminateAnalysis = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_TerminateAnalysis_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.GetBuildNodes = function(prj, configurationName, toolIdentifier, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetBuildNodes(prj, configurationName, toolIdentifier);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetBuildNodes(prj, configurationName, toolIdentifier);
  }
};

ProjectManagerClient.prototype.send_GetBuildNodes = function(prj, configurationName, toolIdentifier) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    configurationName: configurationName,
    toolIdentifier: toolIdentifier
  };
  var args = new ProjectManager_GetBuildNodes_args(params);
  try {
    output.writeMessageBegin('GetBuildNodes', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetBuildNodes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetBuildNodes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetBuildNodes failed: unknown result');
};

ProjectManagerClient.prototype.GetOptionsForNode = function(prj, node, configurationName, optionIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetOptionsForNode(prj, node, configurationName, optionIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetOptionsForNode(prj, node, configurationName, optionIds);
  }
};

ProjectManagerClient.prototype.send_GetOptionsForNode = function(prj, node, configurationName, optionIds) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    node: node,
    configurationName: configurationName,
    optionIds: optionIds
  };
  var args = new ProjectManager_GetOptionsForNode_args(params);
  try {
    output.writeMessageBegin('GetOptionsForNode', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetOptionsForNode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetOptionsForNode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetOptionsForNode failed: unknown result');
};

ProjectManagerClient.prototype.GetOptionsForConfiguration = function(prj, configurationName, optionIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetOptionsForConfiguration(prj, configurationName, optionIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetOptionsForConfiguration(prj, configurationName, optionIds);
  }
};

ProjectManagerClient.prototype.send_GetOptionsForConfiguration = function(prj, configurationName, optionIds) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    configurationName: configurationName,
    optionIds: optionIds
  };
  var args = new ProjectManager_GetOptionsForConfiguration_args(params);
  try {
    output.writeMessageBegin('GetOptionsForConfiguration', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetOptionsForConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetOptionsForConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetOptionsForConfiguration failed: unknown result');
};

ProjectManagerClient.prototype.ApplyOptionsForNode = function(prj, node, configurationName, optionsToSet, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ApplyOptionsForNode(prj, node, configurationName, optionsToSet);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ApplyOptionsForNode(prj, node, configurationName, optionsToSet);
  }
};

ProjectManagerClient.prototype.send_ApplyOptionsForNode = function(prj, node, configurationName, optionsToSet) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    node: node,
    configurationName: configurationName,
    optionsToSet: optionsToSet
  };
  var args = new ProjectManager_ApplyOptionsForNode_args(params);
  try {
    output.writeMessageBegin('ApplyOptionsForNode', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_ApplyOptionsForNode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_ApplyOptionsForNode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ApplyOptionsForNode failed: unknown result');
};

ProjectManagerClient.prototype.VerifyOptionsForNode = function(prj, node, configurationName, optionsToSet, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_VerifyOptionsForNode(prj, node, configurationName, optionsToSet);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_VerifyOptionsForNode(prj, node, configurationName, optionsToSet);
  }
};

ProjectManagerClient.prototype.send_VerifyOptionsForNode = function(prj, node, configurationName, optionsToSet) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    node: node,
    configurationName: configurationName,
    optionsToSet: optionsToSet
  };
  var args = new ProjectManager_VerifyOptionsForNode_args(params);
  try {
    output.writeMessageBegin('VerifyOptionsForNode', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_VerifyOptionsForNode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_VerifyOptionsForNode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('VerifyOptionsForNode failed: unknown result');
};

ProjectManagerClient.prototype.ApplyOptionsForConfiguration = function(prj, configurationName, optionsToSet, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ApplyOptionsForConfiguration(prj, configurationName, optionsToSet);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ApplyOptionsForConfiguration(prj, configurationName, optionsToSet);
  }
};

ProjectManagerClient.prototype.send_ApplyOptionsForConfiguration = function(prj, configurationName, optionsToSet) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    configurationName: configurationName,
    optionsToSet: optionsToSet
  };
  var args = new ProjectManager_ApplyOptionsForConfiguration_args(params);
  try {
    output.writeMessageBegin('ApplyOptionsForConfiguration', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_ApplyOptionsForConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_ApplyOptionsForConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ApplyOptionsForConfiguration failed: unknown result');
};

ProjectManagerClient.prototype.VerifyOptionsForConfiguration = function(prj, configurationName, optionsToSet, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_VerifyOptionsForConfiguration(prj, configurationName, optionsToSet);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_VerifyOptionsForConfiguration(prj, configurationName, optionsToSet);
  }
};

ProjectManagerClient.prototype.send_VerifyOptionsForConfiguration = function(prj, configurationName, optionsToSet) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    configurationName: configurationName,
    optionsToSet: optionsToSet
  };
  var args = new ProjectManager_VerifyOptionsForConfiguration_args(params);
  try {
    output.writeMessageBegin('VerifyOptionsForConfiguration', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_VerifyOptionsForConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_VerifyOptionsForConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('VerifyOptionsForConfiguration failed: unknown result');
};

ProjectManagerClient.prototype.GetOptionCategories = function(prj, configurationName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetOptionCategories(prj, configurationName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetOptionCategories(prj, configurationName);
  }
};

ProjectManagerClient.prototype.send_GetOptionCategories = function(prj, configurationName) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    configurationName: configurationName
  };
  var args = new ProjectManager_GetOptionCategories_args(params);
  try {
    output.writeMessageBegin('GetOptionCategories', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetOptionCategories = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetOptionCategories_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetOptionCategories failed: unknown result');
};

ProjectManagerClient.prototype.CompareOptions = function(optionsToCompare, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CompareOptions(optionsToCompare);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CompareOptions(optionsToCompare);
  }
};

ProjectManagerClient.prototype.send_CompareOptions = function(optionsToCompare) {
  var output = new this.pClass(this.output);
  var params = {
    optionsToCompare: optionsToCompare
  };
  var args = new ProjectManager_CompareOptions_args(params);
  try {
    output.writeMessageBegin('CompareOptions', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CompareOptions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_CompareOptions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CompareOptions failed: unknown result');
};

ProjectManagerClient.prototype.EnableMultiFileCompilation = function(prj, configurationName, node, enabled, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_EnableMultiFileCompilation(prj, configurationName, node, enabled);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_EnableMultiFileCompilation(prj, configurationName, node, enabled);
  }
};

ProjectManagerClient.prototype.send_EnableMultiFileCompilation = function(prj, configurationName, node, enabled) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    configurationName: configurationName,
    node: node,
    enabled: enabled
  };
  var args = new ProjectManager_EnableMultiFileCompilation_args(params);
  try {
    output.writeMessageBegin('EnableMultiFileCompilation', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_EnableMultiFileCompilation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_EnableMultiFileCompilation_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.EnableMultiFileDiscardPublicSymbols = function(prj, configurationName, node, enabled, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_EnableMultiFileDiscardPublicSymbols(prj, configurationName, node, enabled);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_EnableMultiFileDiscardPublicSymbols(prj, configurationName, node, enabled);
  }
};

ProjectManagerClient.prototype.send_EnableMultiFileDiscardPublicSymbols = function(prj, configurationName, node, enabled) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    configurationName: configurationName,
    node: node,
    enabled: enabled
  };
  var args = new ProjectManager_EnableMultiFileDiscardPublicSymbols_args(params);
  try {
    output.writeMessageBegin('EnableMultiFileDiscardPublicSymbols', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_EnableMultiFileDiscardPublicSymbols = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_EnableMultiFileDiscardPublicSymbols_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.IsMultiFileCompilationEnabled = function(prj, configurationName, node, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_IsMultiFileCompilationEnabled(prj, configurationName, node);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_IsMultiFileCompilationEnabled(prj, configurationName, node);
  }
};

ProjectManagerClient.prototype.send_IsMultiFileCompilationEnabled = function(prj, configurationName, node) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    configurationName: configurationName,
    node: node
  };
  var args = new ProjectManager_IsMultiFileCompilationEnabled_args(params);
  try {
    output.writeMessageBegin('IsMultiFileCompilationEnabled', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_IsMultiFileCompilationEnabled = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_IsMultiFileCompilationEnabled_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('IsMultiFileCompilationEnabled failed: unknown result');
};

ProjectManagerClient.prototype.IsMultiFileDiscardPublicSymbolsEnabled = function(prj, configurationName, node, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_IsMultiFileDiscardPublicSymbolsEnabled(prj, configurationName, node);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_IsMultiFileDiscardPublicSymbolsEnabled(prj, configurationName, node);
  }
};

ProjectManagerClient.prototype.send_IsMultiFileDiscardPublicSymbolsEnabled = function(prj, configurationName, node) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    configurationName: configurationName,
    node: node
  };
  var args = new ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_args(params);
  try {
    output.writeMessageBegin('IsMultiFileDiscardPublicSymbolsEnabled', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_IsMultiFileDiscardPublicSymbolsEnabled = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('IsMultiFileDiscardPublicSymbolsEnabled failed: unknown result');
};

ProjectManagerClient.prototype.GetToolArgumentsForConfiguration = function(prj, toolId, configurationName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetToolArgumentsForConfiguration(prj, toolId, configurationName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetToolArgumentsForConfiguration(prj, toolId, configurationName);
  }
};

ProjectManagerClient.prototype.send_GetToolArgumentsForConfiguration = function(prj, toolId, configurationName) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    toolId: toolId,
    configurationName: configurationName
  };
  var args = new ProjectManager_GetToolArgumentsForConfiguration_args(params);
  try {
    output.writeMessageBegin('GetToolArgumentsForConfiguration', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetToolArgumentsForConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetToolArgumentsForConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetToolArgumentsForConfiguration failed: unknown result');
};

ProjectManagerClient.prototype.ExpandArgVars = function(input, project, configurationName, throwOnFailure, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ExpandArgVars(input, project, configurationName, throwOnFailure);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ExpandArgVars(input, project, configurationName, throwOnFailure);
  }
};

ProjectManagerClient.prototype.send_ExpandArgVars = function(input, project, configurationName, throwOnFailure) {
  var output = new this.pClass(this.output);
  var params = {
    input: input,
    project: project,
    configurationName: configurationName,
    throwOnFailure: throwOnFailure
  };
  var args = new ProjectManager_ExpandArgVars_args(params);
  try {
    output.writeMessageBegin('ExpandArgVars', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_ExpandArgVars = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_ExpandArgVars_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ExpandArgVars failed: unknown result');
};

ProjectManagerClient.prototype.GetPresentationForOptionsAsJson = function(locale, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetPresentationForOptionsAsJson(locale);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetPresentationForOptionsAsJson(locale);
  }
};

ProjectManagerClient.prototype.send_GetPresentationForOptionsAsJson = function(locale) {
  var output = new this.pClass(this.output);
  var params = {
    locale: locale
  };
  var args = new ProjectManager_GetPresentationForOptionsAsJson_args(params);
  try {
    output.writeMessageBegin('GetPresentationForOptionsAsJson', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetPresentationForOptionsAsJson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetPresentationForOptionsAsJson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetPresentationForOptionsAsJson failed: unknown result');
};

ProjectManagerClient.prototype.UpdateProjectConnections = function(prj, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_UpdateProjectConnections(prj);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_UpdateProjectConnections(prj);
  }
};

ProjectManagerClient.prototype.send_UpdateProjectConnections = function(prj) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj
  };
  var args = new ProjectManager_UpdateProjectConnections_args(params);
  try {
    output.writeMessageBegin('UpdateProjectConnections', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_UpdateProjectConnections = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_UpdateProjectConnections_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.UpdateProjectConnection = function(prj, file, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_UpdateProjectConnection(prj, file);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_UpdateProjectConnection(prj, file);
  }
};

ProjectManagerClient.prototype.send_UpdateProjectConnection = function(prj, file) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    file: file
  };
  var args = new ProjectManager_UpdateProjectConnection_args(params);
  try {
    output.writeMessageBegin('UpdateProjectConnection', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_UpdateProjectConnection = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_UpdateProjectConnection_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('UpdateProjectConnection failed: unknown result');
};

ProjectManagerClient.prototype.RemoveMonitors = function(prj, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RemoveMonitors(prj);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RemoveMonitors(prj);
  }
};

ProjectManagerClient.prototype.send_RemoveMonitors = function(prj) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj
  };
  var args = new ProjectManager_RemoveMonitors_args(params);
  try {
    output.writeMessageBegin('RemoveMonitors', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_RemoveMonitors = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_RemoveMonitors_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.EnableProjectConnections = function(enable, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_EnableProjectConnections(enable);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_EnableProjectConnections(enable);
  }
};

ProjectManagerClient.prototype.send_EnableProjectConnections = function(enable) {
  var output = new this.pClass(this.output);
  var params = {
    enable: enable
  };
  var args = new ProjectManager_EnableProjectConnections_args(params);
  try {
    output.writeMessageBegin('EnableProjectConnections', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_EnableProjectConnections = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_EnableProjectConnections_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.IsExternalProjectUpToDate = function(prj, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_IsExternalProjectUpToDate(prj);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_IsExternalProjectUpToDate(prj);
  }
};

ProjectManagerClient.prototype.send_IsExternalProjectUpToDate = function(prj) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj
  };
  var args = new ProjectManager_IsExternalProjectUpToDate_args(params);
  try {
    output.writeMessageBegin('IsExternalProjectUpToDate', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_IsExternalProjectUpToDate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_IsExternalProjectUpToDate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('IsExternalProjectUpToDate failed: unknown result');
};

ProjectManagerClient.prototype.SynchonizeExternalProject = function(prj, seq, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SynchonizeExternalProject(prj, seq);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SynchonizeExternalProject(prj, seq);
  }
};

ProjectManagerClient.prototype.send_SynchonizeExternalProject = function(prj, seq) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    seq: seq
  };
  var args = new ProjectManager_SynchonizeExternalProject_args(params);
  try {
    output.writeMessageBegin('SynchonizeExternalProject', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SynchonizeExternalProject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_SynchonizeExternalProject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('SynchonizeExternalProject failed: unknown result');
};

ProjectManagerClient.prototype.ConfigureExternalProject = function(prj, force, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ConfigureExternalProject(prj, force);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ConfigureExternalProject(prj, force);
  }
};

ProjectManagerClient.prototype.send_ConfigureExternalProject = function(prj, force) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    force: force
  };
  var args = new ProjectManager_ConfigureExternalProject_args(params);
  try {
    output.writeMessageBegin('ConfigureExternalProject', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_ConfigureExternalProject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_ConfigureExternalProject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ConfigureExternalProject failed: unknown result');
};

ProjectManagerClient.prototype.AddControlFile = function(prj, file, pluginId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_AddControlFile(prj, file, pluginId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_AddControlFile(prj, file, pluginId);
  }
};

ProjectManagerClient.prototype.send_AddControlFile = function(prj, file, pluginId) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    file: file,
    pluginId: pluginId
  };
  var args = new ProjectManager_AddControlFile_args(params);
  try {
    output.writeMessageBegin('AddControlFile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_AddControlFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_AddControlFile_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.HasControlFileFor = function(prj, pluginId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_HasControlFileFor(prj, pluginId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_HasControlFileFor(prj, pluginId);
  }
};

ProjectManagerClient.prototype.send_HasControlFileFor = function(prj, pluginId) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    pluginId: pluginId
  };
  var args = new ProjectManager_HasControlFileFor_args(params);
  try {
    output.writeMessageBegin('HasControlFileFor', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_HasControlFileFor = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_HasControlFileFor_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('HasControlFileFor failed: unknown result');
};

ProjectManagerClient.prototype.IsProjectConnectionsEnabled = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_IsProjectConnectionsEnabled();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_IsProjectConnectionsEnabled();
  }
};

ProjectManagerClient.prototype.send_IsProjectConnectionsEnabled = function() {
  var output = new this.pClass(this.output);
  var args = new ProjectManager_IsProjectConnectionsEnabled_args();
  try {
    output.writeMessageBegin('IsProjectConnectionsEnabled', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_IsProjectConnectionsEnabled = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_IsProjectConnectionsEnabled_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('IsProjectConnectionsEnabled failed: unknown result');
};

ProjectManagerClient.prototype.GetControlFilePlugins = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetControlFilePlugins();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetControlFilePlugins();
  }
};

ProjectManagerClient.prototype.send_GetControlFilePlugins = function() {
  var output = new this.pClass(this.output);
  var args = new ProjectManager_GetControlFilePlugins_args();
  try {
    output.writeMessageBegin('GetControlFilePlugins', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetControlFilePlugins = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetControlFilePlugins_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetControlFilePlugins failed: unknown result');
};

ProjectManagerClient.prototype.GetOptionsForProject = function(prj, optionIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetOptionsForProject(prj, optionIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetOptionsForProject(prj, optionIds);
  }
};

ProjectManagerClient.prototype.send_GetOptionsForProject = function(prj, optionIds) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    optionIds: optionIds
  };
  var args = new ProjectManager_GetOptionsForProject_args(params);
  try {
    output.writeMessageBegin('GetOptionsForProject', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetOptionsForProject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetOptionsForProject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetOptionsForProject failed: unknown result');
};

ProjectManagerClient.prototype.ApplyOptionsForProject = function(prj, options, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ApplyOptionsForProject(prj, options);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ApplyOptionsForProject(prj, options);
  }
};

ProjectManagerClient.prototype.send_ApplyOptionsForProject = function(prj, options) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    options: options
  };
  var args = new ProjectManager_ApplyOptionsForProject_args(params);
  try {
    output.writeMessageBegin('ApplyOptionsForProject', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_ApplyOptionsForProject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_ApplyOptionsForProject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ApplyOptionsForProject failed: unknown result');
};

ProjectManagerClient.prototype.GetUserArgVarInfo = function(category, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetUserArgVarInfo(category);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetUserArgVarInfo(category);
  }
};

ProjectManagerClient.prototype.send_GetUserArgVarInfo = function(category) {
  var output = new this.pClass(this.output);
  var params = {
    category: category
  };
  var args = new ProjectManager_GetUserArgVarInfo_args(params);
  try {
    output.writeMessageBegin('GetUserArgVarInfo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetUserArgVarInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetUserArgVarInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetUserArgVarInfo failed: unknown result');
};

ProjectManagerClient.prototype.SetUserArgVarInfo = function(info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetUserArgVarInfo(info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetUserArgVarInfo(info);
  }
};

ProjectManagerClient.prototype.send_SetUserArgVarInfo = function(info) {
  var output = new this.pClass(this.output);
  var params = {
    info: info
  };
  var args = new ProjectManager_SetUserArgVarInfo_args(params);
  try {
    output.writeMessageBegin('SetUserArgVarInfo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetUserArgVarInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_SetUserArgVarInfo_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.ImportUserArgVarInfo = function(category, argVarFilePath, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ImportUserArgVarInfo(category, argVarFilePath);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ImportUserArgVarInfo(category, argVarFilePath);
  }
};

ProjectManagerClient.prototype.send_ImportUserArgVarInfo = function(category, argVarFilePath) {
  var output = new this.pClass(this.output);
  var params = {
    category: category,
    argVarFilePath: argVarFilePath
  };
  var args = new ProjectManager_ImportUserArgVarInfo_args(params);
  try {
    output.writeMessageBegin('ImportUserArgVarInfo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_ImportUserArgVarInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_ImportUserArgVarInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.ExportUserArgVarInfo = function(category, argVarFilePath, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ExportUserArgVarInfo(category, argVarFilePath);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ExportUserArgVarInfo(category, argVarFilePath);
  }
};

ProjectManagerClient.prototype.send_ExportUserArgVarInfo = function(category, argVarFilePath) {
  var output = new this.pClass(this.output);
  var params = {
    category: category,
    argVarFilePath: argVarFilePath
  };
  var args = new ProjectManager_ExportUserArgVarInfo_args(params);
  try {
    output.writeMessageBegin('ExportUserArgVarInfo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_ExportUserArgVarInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_ExportUserArgVarInfo_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.GetExternalTools = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetExternalTools();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetExternalTools();
  }
};

ProjectManagerClient.prototype.send_GetExternalTools = function() {
  var output = new this.pClass(this.output);
  var args = new ProjectManager_GetExternalTools_args();
  try {
    output.writeMessageBegin('GetExternalTools', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetExternalTools = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetExternalTools_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetExternalTools failed: unknown result');
};

ProjectManagerClient.prototype.SetExternalTools = function(tools, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetExternalTools(tools);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetExternalTools(tools);
  }
};

ProjectManagerClient.prototype.send_SetExternalTools = function(tools) {
  var output = new this.pClass(this.output);
  var params = {
    tools: tools
  };
  var args = new ProjectManager_SetExternalTools_args(params);
  try {
    output.writeMessageBegin('SetExternalTools', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetExternalTools = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_SetExternalTools_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.GetWizards = function(toolchainId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetWizards(toolchainId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetWizards(toolchainId);
  }
};

ProjectManagerClient.prototype.send_GetWizards = function(toolchainId) {
  var output = new this.pClass(this.output);
  var params = {
    toolchainId: toolchainId
  };
  var args = new ProjectManager_GetWizards_args(params);
  try {
    output.writeMessageBegin('GetWizards', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetWizards = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetWizards_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetWizards failed: unknown result');
};

ProjectManagerClient.prototype.RunWizard = function(wizard, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RunWizard(wizard);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RunWizard(wizard);
  }
};

ProjectManagerClient.prototype.send_RunWizard = function(wizard) {
  var output = new this.pClass(this.output);
  var params = {
    wizard: wizard
  };
  var args = new ProjectManager_RunWizard_args(params);
  try {
    output.writeMessageBegin('RunWizard', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_RunWizard = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_RunWizard_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('RunWizard failed: unknown result');
};

ProjectManagerClient.prototype.GetGlobalOptions = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetGlobalOptions();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetGlobalOptions();
  }
};

ProjectManagerClient.prototype.send_GetGlobalOptions = function() {
  var output = new this.pClass(this.output);
  var args = new ProjectManager_GetGlobalOptions_args();
  try {
    output.writeMessageBegin('GetGlobalOptions', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetGlobalOptions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetGlobalOptions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetGlobalOptions failed: unknown result');
};

ProjectManagerClient.prototype.GetGlobalOption = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetGlobalOption(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetGlobalOption(id);
  }
};

ProjectManagerClient.prototype.send_GetGlobalOption = function(id) {
  var output = new this.pClass(this.output);
  var params = {
    id: id
  };
  var args = new ProjectManager_GetGlobalOption_args(params);
  try {
    output.writeMessageBegin('GetGlobalOption', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetGlobalOption = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetGlobalOption_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetGlobalOption failed: unknown result');
};

ProjectManagerClient.prototype.ApplyGlobalOptions = function(options, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ApplyGlobalOptions(options);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ApplyGlobalOptions(options);
  }
};

ProjectManagerClient.prototype.send_ApplyGlobalOptions = function(options) {
  var output = new this.pClass(this.output);
  var params = {
    options: options
  };
  var args = new ProjectManager_ApplyGlobalOptions_args(params);
  try {
    output.writeMessageBegin('ApplyGlobalOptions', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_ApplyGlobalOptions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_ApplyGlobalOptions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ApplyGlobalOptions failed: unknown result');
};

ProjectManagerClient.prototype.GetTargetVersion = function(prj, configuration, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetTargetVersion(prj, configuration);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetTargetVersion(prj, configuration);
  }
};

ProjectManagerClient.prototype.send_GetTargetVersion = function(prj, configuration) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    configuration: configuration
  };
  var args = new ProjectManager_GetTargetVersion_args(params);
  try {
    output.writeMessageBegin('GetTargetVersion', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetTargetVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetTargetVersion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetTargetVersion failed: unknown result');
};

ProjectManagerClient.prototype.GetProjectAliases = function(prj, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetProjectAliases(prj);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetProjectAliases(prj);
  }
};

ProjectManagerClient.prototype.send_GetProjectAliases = function(prj) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj
  };
  var args = new ProjectManager_GetProjectAliases_args(params);
  try {
    output.writeMessageBegin('GetProjectAliases', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetProjectAliases = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetProjectAliases_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetProjectAliases failed: unknown result');
};

ProjectManagerClient.prototype.GetProjectFolderAliases = function(prj, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetProjectFolderAliases(prj);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetProjectFolderAliases(prj);
  }
};

ProjectManagerClient.prototype.send_GetProjectFolderAliases = function(prj) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj
  };
  var args = new ProjectManager_GetProjectFolderAliases_args(params);
  try {
    output.writeMessageBegin('GetProjectFolderAliases', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetProjectFolderAliases = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetProjectFolderAliases_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetProjectFolderAliases failed: unknown result');
};

ProjectManagerClient.prototype.SetProjectFolderAliases = function(prj, aliases, forceUpdate, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetProjectFolderAliases(prj, aliases, forceUpdate);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetProjectFolderAliases(prj, aliases, forceUpdate);
  }
};

ProjectManagerClient.prototype.send_SetProjectFolderAliases = function(prj, aliases, forceUpdate) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    aliases: aliases,
    forceUpdate: forceUpdate
  };
  var args = new ProjectManager_SetProjectFolderAliases_args(params);
  try {
    output.writeMessageBegin('SetProjectFolderAliases', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetProjectFolderAliases = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_SetProjectFolderAliases_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('SetProjectFolderAliases failed: unknown result');
};
var ProjectManagerProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
Thrift.inherits(ProjectManagerProcessor, HeartbeatServiceProcessor);
ProjectManagerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
ProjectManagerProcessor.prototype.process_CreateEwwFile = function(seqid, input, output) {
  var args = new ProjectManager_CreateEwwFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CreateEwwFile.length === 1) {
    Q.fcall(this._handler.CreateEwwFile.bind(this._handler),
      args.file_path
    ).then(function(result) {
      var result_obj = new ProjectManager_CreateEwwFile_result({success: result});
      output.writeMessageBegin("CreateEwwFile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_CreateEwwFile_result(err);
        output.writeMessageBegin("CreateEwwFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateEwwFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.CreateEwwFile(args.file_path, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_CreateEwwFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CreateEwwFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateEwwFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_DisableAutoDataStoring = function(seqid, input, output) {
  var args = new ProjectManager_DisableAutoDataStoring_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.DisableAutoDataStoring.length === 0) {
    Q.fcall(this._handler.DisableAutoDataStoring.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ProjectManager_DisableAutoDataStoring_result({success: result});
      output.writeMessageBegin("DisableAutoDataStoring", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("DisableAutoDataStoring", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.DisableAutoDataStoring(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_DisableAutoDataStoring_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("DisableAutoDataStoring", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("DisableAutoDataStoring", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_LoadEwwFile = function(seqid, input, output) {
  var args = new ProjectManager_LoadEwwFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.LoadEwwFile.length === 1) {
    Q.fcall(this._handler.LoadEwwFile.bind(this._handler),
      args.file_path
    ).then(function(result) {
      var result_obj = new ProjectManager_LoadEwwFile_result({success: result});
      output.writeMessageBegin("LoadEwwFile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_LoadEwwFile_result(err);
        output.writeMessageBegin("LoadEwwFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("LoadEwwFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.LoadEwwFile(args.file_path, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_LoadEwwFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("LoadEwwFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("LoadEwwFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_IsWorkspaceModified = function(seqid, input, output) {
  var args = new ProjectManager_IsWorkspaceModified_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.IsWorkspaceModified.length === 0) {
    Q.fcall(this._handler.IsWorkspaceModified.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ProjectManager_IsWorkspaceModified_result({success: result});
      output.writeMessageBegin("IsWorkspaceModified", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("IsWorkspaceModified", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.IsWorkspaceModified(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_IsWorkspaceModified_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("IsWorkspaceModified", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("IsWorkspaceModified", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_SaveEwwFile = function(seqid, input, output) {
  var args = new ProjectManager_SaveEwwFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SaveEwwFile.length === 0) {
    Q.fcall(this._handler.SaveEwwFile.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ProjectManager_SaveEwwFile_result({success: result});
      output.writeMessageBegin("SaveEwwFile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_SaveEwwFile_result(err);
        output.writeMessageBegin("SaveEwwFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SaveEwwFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SaveEwwFile(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_SaveEwwFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SaveEwwFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SaveEwwFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_SaveEwwFileAs = function(seqid, input, output) {
  var args = new ProjectManager_SaveEwwFileAs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SaveEwwFileAs.length === 1) {
    Q.fcall(this._handler.SaveEwwFileAs.bind(this._handler),
      args.file_path
    ).then(function(result) {
      var result_obj = new ProjectManager_SaveEwwFileAs_result({success: result});
      output.writeMessageBegin("SaveEwwFileAs", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_SaveEwwFileAs_result(err);
        output.writeMessageBegin("SaveEwwFileAs", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SaveEwwFileAs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SaveEwwFileAs(args.file_path, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_SaveEwwFileAs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SaveEwwFileAs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SaveEwwFileAs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetProjects = function(seqid, input, output) {
  var args = new ProjectManager_GetProjects_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetProjects.length === 0) {
    Q.fcall(this._handler.GetProjects.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ProjectManager_GetProjects_result({success: result});
      output.writeMessageBegin("GetProjects", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetProjects", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetProjects(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetProjects_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetProjects", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetProjects", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetLoadedProjects = function(seqid, input, output) {
  var args = new ProjectManager_GetLoadedProjects_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetLoadedProjects.length === 0) {
    Q.fcall(this._handler.GetLoadedProjects.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ProjectManager_GetLoadedProjects_result({success: result});
      output.writeMessageBegin("GetLoadedProjects", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetLoadedProjects", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetLoadedProjects(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetLoadedProjects_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetLoadedProjects", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetLoadedProjects", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetCurrentProject = function(seqid, input, output) {
  var args = new ProjectManager_GetCurrentProject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetCurrentProject.length === 0) {
    Q.fcall(this._handler.GetCurrentProject.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ProjectManager_GetCurrentProject_result({success: result});
      output.writeMessageBegin("GetCurrentProject", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_GetCurrentProject_result(err);
        output.writeMessageBegin("GetCurrentProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetCurrentProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetCurrentProject(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_GetCurrentProject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetCurrentProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetCurrentProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_SetCurrentProject = function(seqid, input, output) {
  var args = new ProjectManager_SetCurrentProject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetCurrentProject.length === 1) {
    Q.fcall(this._handler.SetCurrentProject.bind(this._handler),
      args.ctx
    ).then(function(result) {
      var result_obj = new ProjectManager_SetCurrentProject_result({success: result});
      output.writeMessageBegin("SetCurrentProject", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_SetCurrentProject_result(err);
        output.writeMessageBegin("SetCurrentProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetCurrentProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SetCurrentProject(args.ctx, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_SetCurrentProject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SetCurrentProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetCurrentProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_CloseWorkspace = function(seqid, input, output) {
  var args = new ProjectManager_CloseWorkspace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CloseWorkspace.length === 0) {
    Q.fcall(this._handler.CloseWorkspace.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ProjectManager_CloseWorkspace_result({success: result});
      output.writeMessageBegin("CloseWorkspace", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_CloseWorkspace_result(err);
        output.writeMessageBegin("CloseWorkspace", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CloseWorkspace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.CloseWorkspace(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_CloseWorkspace_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CloseWorkspace", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CloseWorkspace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_CreateEwpFile = function(seqid, input, output) {
  var args = new ProjectManager_CreateEwpFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CreateEwpFile.length === 1) {
    Q.fcall(this._handler.CreateEwpFile.bind(this._handler),
      args.file_path
    ).then(function(result) {
      var result_obj = new ProjectManager_CreateEwpFile_result({success: result});
      output.writeMessageBegin("CreateEwpFile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_CreateEwpFile_result(err);
        output.writeMessageBegin("CreateEwpFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateEwpFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.CreateEwpFile(args.file_path, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_CreateEwpFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CreateEwpFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateEwpFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_CreateEwpFileWithToolChain = function(seqid, input, output) {
  var args = new ProjectManager_CreateEwpFileWithToolChain_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CreateEwpFileWithToolChain.length === 2) {
    Q.fcall(this._handler.CreateEwpFileWithToolChain.bind(this._handler),
      args.file_path,
      args.toolchain
    ).then(function(result) {
      var result_obj = new ProjectManager_CreateEwpFileWithToolChain_result({success: result});
      output.writeMessageBegin("CreateEwpFileWithToolChain", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_CreateEwpFileWithToolChain_result(err);
        output.writeMessageBegin("CreateEwpFileWithToolChain", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateEwpFileWithToolChain", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.CreateEwpFileWithToolChain(args.file_path, args.toolchain, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_CreateEwpFileWithToolChain_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CreateEwpFileWithToolChain", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateEwpFileWithToolChain", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_CreateProjectFromTemplate = function(seqid, input, output) {
  var args = new ProjectManager_CreateProjectFromTemplate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CreateProjectFromTemplate.length === 2) {
    Q.fcall(this._handler.CreateProjectFromTemplate.bind(this._handler),
      args.template_path,
      args.project_path
    ).then(function(result) {
      var result_obj = new ProjectManager_CreateProjectFromTemplate_result({success: result});
      output.writeMessageBegin("CreateProjectFromTemplate", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_CreateProjectFromTemplate_result(err);
        output.writeMessageBegin("CreateProjectFromTemplate", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateProjectFromTemplate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.CreateProjectFromTemplate(args.template_path, args.project_path, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_CreateProjectFromTemplate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CreateProjectFromTemplate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateProjectFromTemplate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_LoadEwpFile = function(seqid, input, output) {
  var args = new ProjectManager_LoadEwpFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.LoadEwpFile.length === 1) {
    Q.fcall(this._handler.LoadEwpFile.bind(this._handler),
      args.file_path
    ).then(function(result) {
      var result_obj = new ProjectManager_LoadEwpFile_result({success: result});
      output.writeMessageBegin("LoadEwpFile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_LoadEwpFile_result(err);
        output.writeMessageBegin("LoadEwpFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("LoadEwpFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.LoadEwpFile(args.file_path, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_LoadEwpFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("LoadEwpFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("LoadEwpFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_SaveEwpFile = function(seqid, input, output) {
  var args = new ProjectManager_SaveEwpFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SaveEwpFile.length === 1) {
    Q.fcall(this._handler.SaveEwpFile.bind(this._handler),
      args.project
    ).then(function(result) {
      var result_obj = new ProjectManager_SaveEwpFile_result({success: result});
      output.writeMessageBegin("SaveEwpFile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_SaveEwpFile_result(err);
        output.writeMessageBegin("SaveEwpFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SaveEwpFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SaveEwpFile(args.project, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_SaveEwpFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SaveEwpFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SaveEwpFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_ReloadProject = function(seqid, input, output) {
  var args = new ProjectManager_ReloadProject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ReloadProject.length === 1) {
    Q.fcall(this._handler.ReloadProject.bind(this._handler),
      args.project
    ).then(function(result) {
      var result_obj = new ProjectManager_ReloadProject_result({success: result});
      output.writeMessageBegin("ReloadProject", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_ReloadProject_result(err);
        output.writeMessageBegin("ReloadProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ReloadProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.ReloadProject(args.project, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_ReloadProject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ReloadProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ReloadProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_SaveEwpFileAs = function(seqid, input, output) {
  var args = new ProjectManager_SaveEwpFileAs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SaveEwpFileAs.length === 2) {
    Q.fcall(this._handler.SaveEwpFileAs.bind(this._handler),
      args.project,
      args.file_path
    ).then(function(result) {
      var result_obj = new ProjectManager_SaveEwpFileAs_result({success: result});
      output.writeMessageBegin("SaveEwpFileAs", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_SaveEwpFileAs_result(err);
        output.writeMessageBegin("SaveEwpFileAs", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SaveEwpFileAs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SaveEwpFileAs(args.project, args.file_path, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_SaveEwpFileAs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SaveEwpFileAs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SaveEwpFileAs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_ImportProjectFiles = function(seqid, input, output) {
  var args = new ProjectManager_ImportProjectFiles_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ImportProjectFiles.length === 2) {
    Q.fcall(this._handler.ImportProjectFiles.bind(this._handler),
      args.ctx,
      args.file_path
    ).then(function(result) {
      var result_obj = new ProjectManager_ImportProjectFiles_result({success: result});
      output.writeMessageBegin("ImportProjectFiles", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_ImportProjectFiles_result(err);
        output.writeMessageBegin("ImportProjectFiles", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ImportProjectFiles", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.ImportProjectFiles(args.ctx, args.file_path, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_ImportProjectFiles_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ImportProjectFiles", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ImportProjectFiles", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_IsModified = function(seqid, input, output) {
  var args = new ProjectManager_IsModified_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.IsModified.length === 1) {
    Q.fcall(this._handler.IsModified.bind(this._handler),
      args.project
    ).then(function(result) {
      var result_obj = new ProjectManager_IsModified_result({success: result});
      output.writeMessageBegin("IsModified", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("IsModified", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.IsModified(args.project, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_IsModified_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("IsModified", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("IsModified", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_SetModified = function(seqid, input, output) {
  var args = new ProjectManager_SetModified_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetModified.length === 2) {
    Q.fcall(this._handler.SetModified.bind(this._handler),
      args.project,
      args.modified
    ).then(function(result) {
      var result_obj = new ProjectManager_SetModified_result({success: result});
      output.writeMessageBegin("SetModified", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SetModified", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SetModified(args.project, args.modified, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_SetModified_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SetModified", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetModified", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_IsMemberOfCurrentProject = function(seqid, input, output) {
  var args = new ProjectManager_IsMemberOfCurrentProject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.IsMemberOfCurrentProject.length === 1) {
    Q.fcall(this._handler.IsMemberOfCurrentProject.bind(this._handler),
      args.file_path
    ).then(function(result) {
      var result_obj = new ProjectManager_IsMemberOfCurrentProject_result({success: result});
      output.writeMessageBegin("IsMemberOfCurrentProject", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("IsMemberOfCurrentProject", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.IsMemberOfCurrentProject(args.file_path, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_IsMemberOfCurrentProject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("IsMemberOfCurrentProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("IsMemberOfCurrentProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_FindMatchingHeaderOrSourceFile = function(seqid, input, output) {
  var args = new ProjectManager_FindMatchingHeaderOrSourceFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.FindMatchingHeaderOrSourceFile.length === 1) {
    Q.fcall(this._handler.FindMatchingHeaderOrSourceFile.bind(this._handler),
      args.file_path
    ).then(function(result) {
      var result_obj = new ProjectManager_FindMatchingHeaderOrSourceFile_result({success: result});
      output.writeMessageBegin("FindMatchingHeaderOrSourceFile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("FindMatchingHeaderOrSourceFile", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.FindMatchingHeaderOrSourceFile(args.file_path, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_FindMatchingHeaderOrSourceFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("FindMatchingHeaderOrSourceFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("FindMatchingHeaderOrSourceFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetProject = function(seqid, input, output) {
  var args = new ProjectManager_GetProject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetProject.length === 1) {
    Q.fcall(this._handler.GetProject.bind(this._handler),
      args.file_path
    ).then(function(result) {
      var result_obj = new ProjectManager_GetProject_result({success: result});
      output.writeMessageBegin("GetProject", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_GetProject_result(err);
        output.writeMessageBegin("GetProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetProject(args.file_path, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_GetProject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_CloseProject = function(seqid, input, output) {
  var args = new ProjectManager_CloseProject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CloseProject.length === 1) {
    Q.fcall(this._handler.CloseProject.bind(this._handler),
      args.project
    ).then(function(result) {
      var result_obj = new ProjectManager_CloseProject_result({success: result});
      output.writeMessageBegin("CloseProject", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_CloseProject_result(err);
        output.writeMessageBegin("CloseProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CloseProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.CloseProject(args.project, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_CloseProject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CloseProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CloseProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_RemoveProject = function(seqid, input, output) {
  var args = new ProjectManager_RemoveProject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RemoveProject.length === 1) {
    Q.fcall(this._handler.RemoveProject.bind(this._handler),
      args.project
    ).then(function(result) {
      var result_obj = new ProjectManager_RemoveProject_result({success: result});
      output.writeMessageBegin("RemoveProject", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_RemoveProject_result(err);
        output.writeMessageBegin("RemoveProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RemoveProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.RemoveProject(args.project, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_RemoveProject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("RemoveProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RemoveProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetFiles = function(seqid, input, output) {
  var args = new ProjectManager_GetFiles_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetFiles.length === 3) {
    Q.fcall(this._handler.GetFiles.bind(this._handler),
      args.project,
      args.configurationName,
      args.col
    ).then(function(result) {
      var result_obj = new ProjectManager_GetFiles_result({success: result});
      output.writeMessageBegin("GetFiles", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_GetFiles_result(err);
        output.writeMessageBegin("GetFiles", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetFiles", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetFiles(args.project, args.configurationName, args.col, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_GetFiles_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetFiles", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetFiles", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_AddConfiguration = function(seqid, input, output) {
  var args = new ProjectManager_AddConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.AddConfiguration.length === 3) {
    Q.fcall(this._handler.AddConfiguration.bind(this._handler),
      args.config,
      args.project,
      args.isDebug
    ).then(function(result) {
      var result_obj = new ProjectManager_AddConfiguration_result({success: result});
      output.writeMessageBegin("AddConfiguration", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("AddConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.AddConfiguration(args.config, args.project, args.isDebug, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_AddConfiguration_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("AddConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AddConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_AddConfigurationNoSave = function(seqid, input, output) {
  var args = new ProjectManager_AddConfigurationNoSave_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.AddConfigurationNoSave.length === 3) {
    Q.fcall(this._handler.AddConfigurationNoSave.bind(this._handler),
      args.project,
      args.config,
      args.basedOnName
    ).then(function(result) {
      var result_obj = new ProjectManager_AddConfigurationNoSave_result({success: result});
      output.writeMessageBegin("AddConfigurationNoSave", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("AddConfigurationNoSave", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.AddConfigurationNoSave(args.project, args.config, args.basedOnName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_AddConfigurationNoSave_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("AddConfigurationNoSave", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AddConfigurationNoSave", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_RemoveConfiguration = function(seqid, input, output) {
  var args = new ProjectManager_RemoveConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RemoveConfiguration.length === 2) {
    Q.fcall(this._handler.RemoveConfiguration.bind(this._handler),
      args.configurationName,
      args.project
    ).then(function(result) {
      var result_obj = new ProjectManager_RemoveConfiguration_result({success: result});
      output.writeMessageBegin("RemoveConfiguration", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("RemoveConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.RemoveConfiguration(args.configurationName, args.project, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_RemoveConfiguration_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("RemoveConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RemoveConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_RemoveConfigurationNoSave = function(seqid, input, output) {
  var args = new ProjectManager_RemoveConfigurationNoSave_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RemoveConfigurationNoSave.length === 2) {
    Q.fcall(this._handler.RemoveConfigurationNoSave.bind(this._handler),
      args.project,
      args.configurationName
    ).then(function(result) {
      var result_obj = new ProjectManager_RemoveConfigurationNoSave_result({success: result});
      output.writeMessageBegin("RemoveConfigurationNoSave", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("RemoveConfigurationNoSave", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.RemoveConfigurationNoSave(args.project, args.configurationName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_RemoveConfigurationNoSave_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("RemoveConfigurationNoSave", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RemoveConfigurationNoSave", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetConfigurations = function(seqid, input, output) {
  var args = new ProjectManager_GetConfigurations_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetConfigurations.length === 1) {
    Q.fcall(this._handler.GetConfigurations.bind(this._handler),
      args.project
    ).then(function(result) {
      var result_obj = new ProjectManager_GetConfigurations_result({success: result});
      output.writeMessageBegin("GetConfigurations", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetConfigurations", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetConfigurations(args.project, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetConfigurations_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetConfigurations", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetConfigurations", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_SetConfigurationsOrder = function(seqid, input, output) {
  var args = new ProjectManager_SetConfigurationsOrder_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetConfigurationsOrder.length === 2) {
    Q.fcall(this._handler.SetConfigurationsOrder.bind(this._handler),
      args.project,
      args.configNames
    ).then(function(result) {
      var result_obj = new ProjectManager_SetConfigurationsOrder_result({success: result});
      output.writeMessageBegin("SetConfigurationsOrder", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SetConfigurationsOrder", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SetConfigurationsOrder(args.project, args.configNames, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_SetConfigurationsOrder_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SetConfigurationsOrder", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetConfigurationsOrder", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetCurrentConfiguration = function(seqid, input, output) {
  var args = new ProjectManager_GetCurrentConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetCurrentConfiguration.length === 1) {
    Q.fcall(this._handler.GetCurrentConfiguration.bind(this._handler),
      args.project
    ).then(function(result) {
      var result_obj = new ProjectManager_GetCurrentConfiguration_result({success: result});
      output.writeMessageBegin("GetCurrentConfiguration", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_GetCurrentConfiguration_result(err);
        output.writeMessageBegin("GetCurrentConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetCurrentConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetCurrentConfiguration(args.project, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_GetCurrentConfiguration_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetCurrentConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetCurrentConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_SetCurrentConfiguration = function(seqid, input, output) {
  var args = new ProjectManager_SetCurrentConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetCurrentConfiguration.length === 2) {
    Q.fcall(this._handler.SetCurrentConfiguration.bind(this._handler),
      args.project,
      args.configurationName
    ).then(function(result) {
      var result_obj = new ProjectManager_SetCurrentConfiguration_result({success: result});
      output.writeMessageBegin("SetCurrentConfiguration", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_SetCurrentConfiguration_result(err);
        output.writeMessageBegin("SetCurrentConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetCurrentConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SetCurrentConfiguration(args.project, args.configurationName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_SetCurrentConfiguration_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SetCurrentConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetCurrentConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_SetCurrentConfigurations = function(seqid, input, output) {
  var args = new ProjectManager_SetCurrentConfigurations_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetCurrentConfigurations.length === 2) {
    Q.fcall(this._handler.SetCurrentConfigurations.bind(this._handler),
      args.projects,
      args.configurationNames
    ).then(function(result) {
      var result_obj = new ProjectManager_SetCurrentConfigurations_result({success: result});
      output.writeMessageBegin("SetCurrentConfigurations", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_SetCurrentConfigurations_result(err);
        output.writeMessageBegin("SetCurrentConfigurations", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetCurrentConfigurations", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SetCurrentConfigurations(args.projects, args.configurationNames, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_SetCurrentConfigurations_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SetCurrentConfigurations", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetCurrentConfigurations", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_CreateConfigWorkingCopy = function(seqid, input, output) {
  var args = new ProjectManager_CreateConfigWorkingCopy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CreateConfigWorkingCopy.length === 2) {
    Q.fcall(this._handler.CreateConfigWorkingCopy.bind(this._handler),
      args.project,
      args.originalConfigName
    ).then(function(result) {
      var result_obj = new ProjectManager_CreateConfigWorkingCopy_result({success: result});
      output.writeMessageBegin("CreateConfigWorkingCopy", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("CreateConfigWorkingCopy", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.CreateConfigWorkingCopy(args.project, args.originalConfigName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_CreateConfigWorkingCopy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CreateConfigWorkingCopy", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateConfigWorkingCopy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_ApplyConfigWorkingCopy = function(seqid, input, output) {
  var args = new ProjectManager_ApplyConfigWorkingCopy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ApplyConfigWorkingCopy.length === 2) {
    Q.fcall(this._handler.ApplyConfigWorkingCopy.bind(this._handler),
      args.project,
      args.workingCopyId
    ).then(function(result) {
      var result_obj = new ProjectManager_ApplyConfigWorkingCopy_result({success: result});
      output.writeMessageBegin("ApplyConfigWorkingCopy", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("ApplyConfigWorkingCopy", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.ApplyConfigWorkingCopy(args.project, args.workingCopyId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_ApplyConfigWorkingCopy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ApplyConfigWorkingCopy", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ApplyConfigWorkingCopy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_DiscardConfigWorkingCopy = function(seqid, input, output) {
  var args = new ProjectManager_DiscardConfigWorkingCopy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.DiscardConfigWorkingCopy.length === 2) {
    Q.fcall(this._handler.DiscardConfigWorkingCopy.bind(this._handler),
      args.project,
      args.workingCopyId
    ).then(function(result) {
      var result_obj = new ProjectManager_DiscardConfigWorkingCopy_result({success: result});
      output.writeMessageBegin("DiscardConfigWorkingCopy", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("DiscardConfigWorkingCopy", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.DiscardConfigWorkingCopy(args.project, args.workingCopyId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_DiscardConfigWorkingCopy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("DiscardConfigWorkingCopy", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("DiscardConfigWorkingCopy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_SetDesktopPathParameters = function(seqid, input, output) {
  var args = new ProjectManager_SetDesktopPathParameters_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetDesktopPathParameters.length === 2) {
    Q.fcall(this._handler.SetDesktopPathParameters.bind(this._handler),
      args.platform,
      args.slavery
    ).then(function(result) {
      var result_obj = new ProjectManager_SetDesktopPathParameters_result({success: result});
      output.writeMessageBegin("SetDesktopPathParameters", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SetDesktopPathParameters", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SetDesktopPathParameters(args.platform, args.slavery, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_SetDesktopPathParameters_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SetDesktopPathParameters", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetDesktopPathParameters", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetOfflineDesktopPath = function(seqid, input, output) {
  var args = new ProjectManager_GetOfflineDesktopPath_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetOfflineDesktopPath.length === 0) {
    Q.fcall(this._handler.GetOfflineDesktopPath.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ProjectManager_GetOfflineDesktopPath_result({success: result});
      output.writeMessageBegin("GetOfflineDesktopPath", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetOfflineDesktopPath", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetOfflineDesktopPath(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetOfflineDesktopPath_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetOfflineDesktopPath", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetOfflineDesktopPath", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetOnlineDesktopPath = function(seqid, input, output) {
  var args = new ProjectManager_GetOnlineDesktopPath_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetOnlineDesktopPath.length === 0) {
    Q.fcall(this._handler.GetOnlineDesktopPath.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ProjectManager_GetOnlineDesktopPath_result({success: result});
      output.writeMessageBegin("GetOnlineDesktopPath", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetOnlineDesktopPath", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetOnlineDesktopPath(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetOnlineDesktopPath_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetOnlineDesktopPath", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetOnlineDesktopPath", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetRootNode = function(seqid, input, output) {
  var args = new ProjectManager_GetRootNode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetRootNode.length === 1) {
    Q.fcall(this._handler.GetRootNode.bind(this._handler),
      args.ctx
    ).then(function(result) {
      var result_obj = new ProjectManager_GetRootNode_result({success: result});
      output.writeMessageBegin("GetRootNode", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetRootNode", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetRootNode(args.ctx, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetRootNode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetRootNode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetRootNode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_SetNode = function(seqid, input, output) {
  var args = new ProjectManager_SetNode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetNode.length === 2) {
    Q.fcall(this._handler.SetNode.bind(this._handler),
      args.ctx,
      args.node
    ).then(function(result) {
      var result_obj = new ProjectManager_SetNode_result({success: result});
      output.writeMessageBegin("SetNode", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SetNode", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SetNode(args.ctx, args.node, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_SetNode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SetNode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetNode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetNodeByIndex = function(seqid, input, output) {
  var args = new ProjectManager_GetNodeByIndex_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetNodeByIndex.length === 2) {
    Q.fcall(this._handler.GetNodeByIndex.bind(this._handler),
      args.ctx,
      args.nodeIndexPath
    ).then(function(result) {
      var result_obj = new ProjectManager_GetNodeByIndex_result({success: result});
      output.writeMessageBegin("GetNodeByIndex", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetNodeByIndex", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetNodeByIndex(args.ctx, args.nodeIndexPath, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetNodeByIndex_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetNodeByIndex", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetNodeByIndex", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_SetNodeByIndex = function(seqid, input, output) {
  var args = new ProjectManager_SetNodeByIndex_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetNodeByIndex.length === 4) {
    Q.fcall(this._handler.SetNodeByIndex.bind(this._handler),
      args.ctx,
      args.nodeIndexPath,
      args.node,
      args.save
    ).then(function(result) {
      var result_obj = new ProjectManager_SetNodeByIndex_result({success: result});
      output.writeMessageBegin("SetNodeByIndex", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_SetNodeByIndex_result(err);
        output.writeMessageBegin("SetNodeByIndex", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetNodeByIndex", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SetNodeByIndex(args.ctx, args.nodeIndexPath, args.node, args.save, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_SetNodeByIndex_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SetNodeByIndex", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetNodeByIndex", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_AddNodeByIndex = function(seqid, input, output) {
  var args = new ProjectManager_AddNodeByIndex_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.AddNodeByIndex.length === 4) {
    Q.fcall(this._handler.AddNodeByIndex.bind(this._handler),
      args.ctx,
      args.nodeIndexPath,
      args.node,
      args.save
    ).then(function(result) {
      var result_obj = new ProjectManager_AddNodeByIndex_result({success: result});
      output.writeMessageBegin("AddNodeByIndex", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_AddNodeByIndex_result(err);
        output.writeMessageBegin("AddNodeByIndex", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AddNodeByIndex", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.AddNodeByIndex(args.ctx, args.nodeIndexPath, args.node, args.save, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_AddNodeByIndex_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("AddNodeByIndex", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AddNodeByIndex", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_RemoveNodeByIndex = function(seqid, input, output) {
  var args = new ProjectManager_RemoveNodeByIndex_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RemoveNodeByIndex.length === 3) {
    Q.fcall(this._handler.RemoveNodeByIndex.bind(this._handler),
      args.ctx,
      args.nodeIndexPath,
      args.save
    ).then(function(result) {
      var result_obj = new ProjectManager_RemoveNodeByIndex_result({success: result});
      output.writeMessageBegin("RemoveNodeByIndex", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_RemoveNodeByIndex_result(err);
        output.writeMessageBegin("RemoveNodeByIndex", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RemoveNodeByIndex", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.RemoveNodeByIndex(args.ctx, args.nodeIndexPath, args.save, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_RemoveNodeByIndex_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("RemoveNodeByIndex", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RemoveNodeByIndex", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_UpdateNodeByIndex = function(seqid, input, output) {
  var args = new ProjectManager_UpdateNodeByIndex_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.UpdateNodeByIndex.length === 4) {
    Q.fcall(this._handler.UpdateNodeByIndex.bind(this._handler),
      args.ctx,
      args.nodeIndexPath,
      args.node,
      args.save
    ).then(function(result) {
      var result_obj = new ProjectManager_UpdateNodeByIndex_result({success: result});
      output.writeMessageBegin("UpdateNodeByIndex", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_UpdateNodeByIndex_result(err);
        output.writeMessageBegin("UpdateNodeByIndex", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("UpdateNodeByIndex", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.UpdateNodeByIndex(args.ctx, args.nodeIndexPath, args.node, args.save, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_UpdateNodeByIndex_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("UpdateNodeByIndex", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("UpdateNodeByIndex", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_CanMoveNode = function(seqid, input, output) {
  var args = new ProjectManager_CanMoveNode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CanMoveNode.length === 3) {
    Q.fcall(this._handler.CanMoveNode.bind(this._handler),
      args.ctx,
      args.srcNodeIndexPath,
      args.dstNodeIndexPath
    ).then(function(result) {
      var result_obj = new ProjectManager_CanMoveNode_result({success: result});
      output.writeMessageBegin("CanMoveNode", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_CanMoveNode_result(err);
        output.writeMessageBegin("CanMoveNode", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CanMoveNode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.CanMoveNode(args.ctx, args.srcNodeIndexPath, args.dstNodeIndexPath, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_CanMoveNode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CanMoveNode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CanMoveNode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_MoveNode = function(seqid, input, output) {
  var args = new ProjectManager_MoveNode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.MoveNode.length === 3) {
    Q.fcall(this._handler.MoveNode.bind(this._handler),
      args.ctx,
      args.srcNodeIndexPath,
      args.dstNodeIndexPath
    ).then(function(result) {
      var result_obj = new ProjectManager_MoveNode_result({success: result});
      output.writeMessageBegin("MoveNode", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_MoveNode_result(err);
        output.writeMessageBegin("MoveNode", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("MoveNode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.MoveNode(args.ctx, args.srcNodeIndexPath, args.dstNodeIndexPath, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_MoveNode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("MoveNode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("MoveNode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetToolChainExtensions = function(seqid, input, output) {
  var args = new ProjectManager_GetToolChainExtensions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetToolChainExtensions.length === 1) {
    Q.fcall(this._handler.GetToolChainExtensions.bind(this._handler),
      args.ctx
    ).then(function(result) {
      var result_obj = new ProjectManager_GetToolChainExtensions_result({success: result});
      output.writeMessageBegin("GetToolChainExtensions", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetToolChainExtensions", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetToolChainExtensions(args.ctx, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetToolChainExtensions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetToolChainExtensions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetToolChainExtensions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetToolchains = function(seqid, input, output) {
  var args = new ProjectManager_GetToolchains_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetToolchains.length === 0) {
    Q.fcall(this._handler.GetToolchains.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ProjectManager_GetToolchains_result({success: result});
      output.writeMessageBegin("GetToolchains", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_GetToolchains_result(err);
        output.writeMessageBegin("GetToolchains", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetToolchains", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetToolchains(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_GetToolchains_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetToolchains", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetToolchains", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_AddToolchain = function(seqid, input, output) {
  var args = new ProjectManager_AddToolchain_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.AddToolchain.length === 1) {
    Q.fcall(this._handler.AddToolchain.bind(this._handler),
      args.toolchain
    ).then(function(result) {
      var result_obj = new ProjectManager_AddToolchain_result({success: result});
      output.writeMessageBegin("AddToolchain", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_AddToolchain_result(err);
        output.writeMessageBegin("AddToolchain", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AddToolchain", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.AddToolchain(args.toolchain, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_AddToolchain_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("AddToolchain", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AddToolchain", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_UpdateTool = function(seqid, input, output) {
  var args = new ProjectManager_UpdateTool_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.UpdateTool.length === 2) {
    Q.fcall(this._handler.UpdateTool.bind(this._handler),
      args.toolchainId,
      args.tool
    ).then(function(result) {
      var result_obj = new ProjectManager_UpdateTool_result({success: result});
      output.writeMessageBegin("UpdateTool", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("UpdateTool", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.UpdateTool(args.toolchainId, args.tool, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_UpdateTool_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("UpdateTool", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("UpdateTool", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetBatchBuildItems = function(seqid, input, output) {
  var args = new ProjectManager_GetBatchBuildItems_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetBatchBuildItems.length === 0) {
    Q.fcall(this._handler.GetBatchBuildItems.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ProjectManager_GetBatchBuildItems_result({success: result});
      output.writeMessageBegin("GetBatchBuildItems", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_GetBatchBuildItems_result(err);
        output.writeMessageBegin("GetBatchBuildItems", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetBatchBuildItems", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetBatchBuildItems(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_GetBatchBuildItems_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetBatchBuildItems", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetBatchBuildItems", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_SetBatchBuildItems = function(seqid, input, output) {
  var args = new ProjectManager_SetBatchBuildItems_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetBatchBuildItems.length === 1) {
    Q.fcall(this._handler.SetBatchBuildItems.bind(this._handler),
      args.batchBuildItems
    ).then(function(result) {
      var result_obj = new ProjectManager_SetBatchBuildItems_result({success: result});
      output.writeMessageBegin("SetBatchBuildItems", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_SetBatchBuildItems_result(err);
        output.writeMessageBegin("SetBatchBuildItems", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetBatchBuildItems", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SetBatchBuildItems(args.batchBuildItems, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_SetBatchBuildItems_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SetBatchBuildItems", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetBatchBuildItems", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_BuildProject = function(seqid, input, output) {
  var args = new ProjectManager_BuildProject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.BuildProject.length === 3) {
    Q.fcall(this._handler.BuildProject.bind(this._handler),
      args.prj,
      args.configurationName,
      args.numParallelBuilds
    ).then(function(result) {
      var result_obj = new ProjectManager_BuildProject_result({success: result});
      output.writeMessageBegin("BuildProject", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_BuildProject_result(err);
        output.writeMessageBegin("BuildProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("BuildProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.BuildProject(args.prj, args.configurationName, args.numParallelBuilds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_BuildProject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("BuildProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("BuildProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_RebuildAllAsync = function(seqid, input, output) {
  var args = new ProjectManager_RebuildAllAsync_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RebuildAllAsync.length === 3) {
    Q.fcall(this._handler.RebuildAllAsync.bind(this._handler),
      args.buildItems,
      args.stopAtError,
      args.numParallelBuilds
    ).then(function(result) {
      var result_obj = new ProjectManager_RebuildAllAsync_result({success: result});
      output.writeMessageBegin("RebuildAllAsync", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_RebuildAllAsync_result(err);
        output.writeMessageBegin("RebuildAllAsync", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RebuildAllAsync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.RebuildAllAsync(args.buildItems, args.stopAtError, args.numParallelBuilds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_RebuildAllAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("RebuildAllAsync", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RebuildAllAsync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_CanCompile = function(seqid, input, output) {
  var args = new ProjectManager_CanCompile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CanCompile.length === 1) {
    Q.fcall(this._handler.CanCompile.bind(this._handler),
      args.buildItem
    ).then(function(result) {
      var result_obj = new ProjectManager_CanCompile_result({success: result});
      output.writeMessageBegin("CanCompile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_CanCompile_result(err);
        output.writeMessageBegin("CanCompile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CanCompile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.CanCompile(args.buildItem, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_CanCompile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CanCompile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CanCompile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_CompileAsync = function(seqid, input, output) {
  var args = new ProjectManager_CompileAsync_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CompileAsync.length === 2) {
    Q.fcall(this._handler.CompileAsync.bind(this._handler),
      args.buildItem,
      args.numParallelBuilds
    ).then(function(result) {
      var result_obj = new ProjectManager_CompileAsync_result({success: result});
      output.writeMessageBegin("CompileAsync", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_CompileAsync_result(err);
        output.writeMessageBegin("CompileAsync", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CompileAsync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.CompileAsync(args.buildItem, args.numParallelBuilds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_CompileAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CompileAsync", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CompileAsync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_BuildAsync = function(seqid, input, output) {
  var args = new ProjectManager_BuildAsync_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.BuildAsync.length === 3) {
    Q.fcall(this._handler.BuildAsync.bind(this._handler),
      args.buildItems,
      args.stopAtError,
      args.numParallelBuilds
    ).then(function(result) {
      var result_obj = new ProjectManager_BuildAsync_result({success: result});
      output.writeMessageBegin("BuildAsync", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_BuildAsync_result(err);
        output.writeMessageBegin("BuildAsync", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("BuildAsync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.BuildAsync(args.buildItems, args.stopAtError, args.numParallelBuilds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_BuildAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("BuildAsync", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("BuildAsync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_CleanAsync = function(seqid, input, output) {
  var args = new ProjectManager_CleanAsync_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CleanAsync.length === 1) {
    Q.fcall(this._handler.CleanAsync.bind(this._handler),
      args.buildItems
    ).then(function(result) {
      var result_obj = new ProjectManager_CleanAsync_result({success: result});
      output.writeMessageBegin("CleanAsync", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_CleanAsync_result(err);
        output.writeMessageBegin("CleanAsync", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CleanAsync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.CleanAsync(args.buildItems, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_CleanAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CleanAsync", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CleanAsync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_CancelBuild = function(seqid, input, output) {
  var args = new ProjectManager_CancelBuild_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CancelBuild.length === 0) {
    Q.fcall(this._handler.CancelBuild.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ProjectManager_CancelBuild_result({success: result});
      output.writeMessageBegin("CancelBuild", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("CancelBuild", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.CancelBuild(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_CancelBuild_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CancelBuild", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CancelBuild", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_TerminateAnalysis = function(seqid, input, output) {
  var args = new ProjectManager_TerminateAnalysis_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.TerminateAnalysis.length === 0) {
    Q.fcall(this._handler.TerminateAnalysis.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ProjectManager_TerminateAnalysis_result({success: result});
      output.writeMessageBegin("TerminateAnalysis", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("TerminateAnalysis", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.TerminateAnalysis(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_TerminateAnalysis_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("TerminateAnalysis", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("TerminateAnalysis", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetBuildNodes = function(seqid, input, output) {
  var args = new ProjectManager_GetBuildNodes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetBuildNodes.length === 3) {
    Q.fcall(this._handler.GetBuildNodes.bind(this._handler),
      args.prj,
      args.configurationName,
      args.toolIdentifier
    ).then(function(result) {
      var result_obj = new ProjectManager_GetBuildNodes_result({success: result});
      output.writeMessageBegin("GetBuildNodes", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetBuildNodes", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetBuildNodes(args.prj, args.configurationName, args.toolIdentifier, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetBuildNodes_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetBuildNodes", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetBuildNodes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetOptionsForNode = function(seqid, input, output) {
  var args = new ProjectManager_GetOptionsForNode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetOptionsForNode.length === 4) {
    Q.fcall(this._handler.GetOptionsForNode.bind(this._handler),
      args.prj,
      args.node,
      args.configurationName,
      args.optionIds
    ).then(function(result) {
      var result_obj = new ProjectManager_GetOptionsForNode_result({success: result});
      output.writeMessageBegin("GetOptionsForNode", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_GetOptionsForNode_result(err);
        output.writeMessageBegin("GetOptionsForNode", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetOptionsForNode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetOptionsForNode(args.prj, args.node, args.configurationName, args.optionIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_GetOptionsForNode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetOptionsForNode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetOptionsForNode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetOptionsForConfiguration = function(seqid, input, output) {
  var args = new ProjectManager_GetOptionsForConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetOptionsForConfiguration.length === 3) {
    Q.fcall(this._handler.GetOptionsForConfiguration.bind(this._handler),
      args.prj,
      args.configurationName,
      args.optionIds
    ).then(function(result) {
      var result_obj = new ProjectManager_GetOptionsForConfiguration_result({success: result});
      output.writeMessageBegin("GetOptionsForConfiguration", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_GetOptionsForConfiguration_result(err);
        output.writeMessageBegin("GetOptionsForConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetOptionsForConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetOptionsForConfiguration(args.prj, args.configurationName, args.optionIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_GetOptionsForConfiguration_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetOptionsForConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetOptionsForConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_ApplyOptionsForNode = function(seqid, input, output) {
  var args = new ProjectManager_ApplyOptionsForNode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ApplyOptionsForNode.length === 4) {
    Q.fcall(this._handler.ApplyOptionsForNode.bind(this._handler),
      args.prj,
      args.node,
      args.configurationName,
      args.optionsToSet
    ).then(function(result) {
      var result_obj = new ProjectManager_ApplyOptionsForNode_result({success: result});
      output.writeMessageBegin("ApplyOptionsForNode", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_ApplyOptionsForNode_result(err);
        output.writeMessageBegin("ApplyOptionsForNode", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ApplyOptionsForNode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.ApplyOptionsForNode(args.prj, args.node, args.configurationName, args.optionsToSet, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_ApplyOptionsForNode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ApplyOptionsForNode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ApplyOptionsForNode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_VerifyOptionsForNode = function(seqid, input, output) {
  var args = new ProjectManager_VerifyOptionsForNode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.VerifyOptionsForNode.length === 4) {
    Q.fcall(this._handler.VerifyOptionsForNode.bind(this._handler),
      args.prj,
      args.node,
      args.configurationName,
      args.optionsToSet
    ).then(function(result) {
      var result_obj = new ProjectManager_VerifyOptionsForNode_result({success: result});
      output.writeMessageBegin("VerifyOptionsForNode", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_VerifyOptionsForNode_result(err);
        output.writeMessageBegin("VerifyOptionsForNode", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("VerifyOptionsForNode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.VerifyOptionsForNode(args.prj, args.node, args.configurationName, args.optionsToSet, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_VerifyOptionsForNode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("VerifyOptionsForNode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("VerifyOptionsForNode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_ApplyOptionsForConfiguration = function(seqid, input, output) {
  var args = new ProjectManager_ApplyOptionsForConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ApplyOptionsForConfiguration.length === 3) {
    Q.fcall(this._handler.ApplyOptionsForConfiguration.bind(this._handler),
      args.prj,
      args.configurationName,
      args.optionsToSet
    ).then(function(result) {
      var result_obj = new ProjectManager_ApplyOptionsForConfiguration_result({success: result});
      output.writeMessageBegin("ApplyOptionsForConfiguration", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_ApplyOptionsForConfiguration_result(err);
        output.writeMessageBegin("ApplyOptionsForConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ApplyOptionsForConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.ApplyOptionsForConfiguration(args.prj, args.configurationName, args.optionsToSet, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_ApplyOptionsForConfiguration_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ApplyOptionsForConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ApplyOptionsForConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_VerifyOptionsForConfiguration = function(seqid, input, output) {
  var args = new ProjectManager_VerifyOptionsForConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.VerifyOptionsForConfiguration.length === 3) {
    Q.fcall(this._handler.VerifyOptionsForConfiguration.bind(this._handler),
      args.prj,
      args.configurationName,
      args.optionsToSet
    ).then(function(result) {
      var result_obj = new ProjectManager_VerifyOptionsForConfiguration_result({success: result});
      output.writeMessageBegin("VerifyOptionsForConfiguration", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_VerifyOptionsForConfiguration_result(err);
        output.writeMessageBegin("VerifyOptionsForConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("VerifyOptionsForConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.VerifyOptionsForConfiguration(args.prj, args.configurationName, args.optionsToSet, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_VerifyOptionsForConfiguration_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("VerifyOptionsForConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("VerifyOptionsForConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetOptionCategories = function(seqid, input, output) {
  var args = new ProjectManager_GetOptionCategories_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetOptionCategories.length === 2) {
    Q.fcall(this._handler.GetOptionCategories.bind(this._handler),
      args.prj,
      args.configurationName
    ).then(function(result) {
      var result_obj = new ProjectManager_GetOptionCategories_result({success: result});
      output.writeMessageBegin("GetOptionCategories", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetOptionCategories", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetOptionCategories(args.prj, args.configurationName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetOptionCategories_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetOptionCategories", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetOptionCategories", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_CompareOptions = function(seqid, input, output) {
  var args = new ProjectManager_CompareOptions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CompareOptions.length === 1) {
    Q.fcall(this._handler.CompareOptions.bind(this._handler),
      args.optionsToCompare
    ).then(function(result) {
      var result_obj = new ProjectManager_CompareOptions_result({success: result});
      output.writeMessageBegin("CompareOptions", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("CompareOptions", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.CompareOptions(args.optionsToCompare, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_CompareOptions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CompareOptions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CompareOptions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_EnableMultiFileCompilation = function(seqid, input, output) {
  var args = new ProjectManager_EnableMultiFileCompilation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.EnableMultiFileCompilation.length === 4) {
    Q.fcall(this._handler.EnableMultiFileCompilation.bind(this._handler),
      args.prj,
      args.configurationName,
      args.node,
      args.enabled
    ).then(function(result) {
      var result_obj = new ProjectManager_EnableMultiFileCompilation_result({success: result});
      output.writeMessageBegin("EnableMultiFileCompilation", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("EnableMultiFileCompilation", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.EnableMultiFileCompilation(args.prj, args.configurationName, args.node, args.enabled, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_EnableMultiFileCompilation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("EnableMultiFileCompilation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("EnableMultiFileCompilation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_EnableMultiFileDiscardPublicSymbols = function(seqid, input, output) {
  var args = new ProjectManager_EnableMultiFileDiscardPublicSymbols_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.EnableMultiFileDiscardPublicSymbols.length === 4) {
    Q.fcall(this._handler.EnableMultiFileDiscardPublicSymbols.bind(this._handler),
      args.prj,
      args.configurationName,
      args.node,
      args.enabled
    ).then(function(result) {
      var result_obj = new ProjectManager_EnableMultiFileDiscardPublicSymbols_result({success: result});
      output.writeMessageBegin("EnableMultiFileDiscardPublicSymbols", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("EnableMultiFileDiscardPublicSymbols", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.EnableMultiFileDiscardPublicSymbols(args.prj, args.configurationName, args.node, args.enabled, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_EnableMultiFileDiscardPublicSymbols_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("EnableMultiFileDiscardPublicSymbols", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("EnableMultiFileDiscardPublicSymbols", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_IsMultiFileCompilationEnabled = function(seqid, input, output) {
  var args = new ProjectManager_IsMultiFileCompilationEnabled_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.IsMultiFileCompilationEnabled.length === 3) {
    Q.fcall(this._handler.IsMultiFileCompilationEnabled.bind(this._handler),
      args.prj,
      args.configurationName,
      args.node
    ).then(function(result) {
      var result_obj = new ProjectManager_IsMultiFileCompilationEnabled_result({success: result});
      output.writeMessageBegin("IsMultiFileCompilationEnabled", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("IsMultiFileCompilationEnabled", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.IsMultiFileCompilationEnabled(args.prj, args.configurationName, args.node, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_IsMultiFileCompilationEnabled_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("IsMultiFileCompilationEnabled", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("IsMultiFileCompilationEnabled", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_IsMultiFileDiscardPublicSymbolsEnabled = function(seqid, input, output) {
  var args = new ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.IsMultiFileDiscardPublicSymbolsEnabled.length === 3) {
    Q.fcall(this._handler.IsMultiFileDiscardPublicSymbolsEnabled.bind(this._handler),
      args.prj,
      args.configurationName,
      args.node
    ).then(function(result) {
      var result_obj = new ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_result({success: result});
      output.writeMessageBegin("IsMultiFileDiscardPublicSymbolsEnabled", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("IsMultiFileDiscardPublicSymbolsEnabled", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.IsMultiFileDiscardPublicSymbolsEnabled(args.prj, args.configurationName, args.node, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("IsMultiFileDiscardPublicSymbolsEnabled", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("IsMultiFileDiscardPublicSymbolsEnabled", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetToolArgumentsForConfiguration = function(seqid, input, output) {
  var args = new ProjectManager_GetToolArgumentsForConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetToolArgumentsForConfiguration.length === 3) {
    Q.fcall(this._handler.GetToolArgumentsForConfiguration.bind(this._handler),
      args.prj,
      args.toolId,
      args.configurationName
    ).then(function(result) {
      var result_obj = new ProjectManager_GetToolArgumentsForConfiguration_result({success: result});
      output.writeMessageBegin("GetToolArgumentsForConfiguration", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetToolArgumentsForConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetToolArgumentsForConfiguration(args.prj, args.toolId, args.configurationName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetToolArgumentsForConfiguration_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetToolArgumentsForConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetToolArgumentsForConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_ExpandArgVars = function(seqid, input, output) {
  var args = new ProjectManager_ExpandArgVars_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ExpandArgVars.length === 4) {
    Q.fcall(this._handler.ExpandArgVars.bind(this._handler),
      args.input,
      args.project,
      args.configurationName,
      args.throwOnFailure
    ).then(function(result) {
      var result_obj = new ProjectManager_ExpandArgVars_result({success: result});
      output.writeMessageBegin("ExpandArgVars", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("ExpandArgVars", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.ExpandArgVars(args.input, args.project, args.configurationName, args.throwOnFailure, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_ExpandArgVars_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ExpandArgVars", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ExpandArgVars", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetPresentationForOptionsAsJson = function(seqid, input, output) {
  var args = new ProjectManager_GetPresentationForOptionsAsJson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetPresentationForOptionsAsJson.length === 1) {
    Q.fcall(this._handler.GetPresentationForOptionsAsJson.bind(this._handler),
      args.locale
    ).then(function(result) {
      var result_obj = new ProjectManager_GetPresentationForOptionsAsJson_result({success: result});
      output.writeMessageBegin("GetPresentationForOptionsAsJson", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_GetPresentationForOptionsAsJson_result(err);
        output.writeMessageBegin("GetPresentationForOptionsAsJson", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetPresentationForOptionsAsJson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetPresentationForOptionsAsJson(args.locale, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_GetPresentationForOptionsAsJson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetPresentationForOptionsAsJson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetPresentationForOptionsAsJson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_UpdateProjectConnections = function(seqid, input, output) {
  var args = new ProjectManager_UpdateProjectConnections_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.UpdateProjectConnections.length === 1) {
    Q.fcall(this._handler.UpdateProjectConnections.bind(this._handler),
      args.prj
    ).then(function(result) {
      var result_obj = new ProjectManager_UpdateProjectConnections_result({success: result});
      output.writeMessageBegin("UpdateProjectConnections", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("UpdateProjectConnections", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.UpdateProjectConnections(args.prj, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_UpdateProjectConnections_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("UpdateProjectConnections", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("UpdateProjectConnections", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_UpdateProjectConnection = function(seqid, input, output) {
  var args = new ProjectManager_UpdateProjectConnection_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.UpdateProjectConnection.length === 2) {
    Q.fcall(this._handler.UpdateProjectConnection.bind(this._handler),
      args.prj,
      args.file
    ).then(function(result) {
      var result_obj = new ProjectManager_UpdateProjectConnection_result({success: result});
      output.writeMessageBegin("UpdateProjectConnection", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("UpdateProjectConnection", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.UpdateProjectConnection(args.prj, args.file, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_UpdateProjectConnection_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("UpdateProjectConnection", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("UpdateProjectConnection", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_RemoveMonitors = function(seqid, input, output) {
  var args = new ProjectManager_RemoveMonitors_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RemoveMonitors.length === 1) {
    Q.fcall(this._handler.RemoveMonitors.bind(this._handler),
      args.prj
    ).then(function(result) {
      var result_obj = new ProjectManager_RemoveMonitors_result({success: result});
      output.writeMessageBegin("RemoveMonitors", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("RemoveMonitors", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.RemoveMonitors(args.prj, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_RemoveMonitors_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("RemoveMonitors", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RemoveMonitors", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_EnableProjectConnections = function(seqid, input, output) {
  var args = new ProjectManager_EnableProjectConnections_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.EnableProjectConnections.length === 1) {
    Q.fcall(this._handler.EnableProjectConnections.bind(this._handler),
      args.enable
    ).then(function(result) {
      var result_obj = new ProjectManager_EnableProjectConnections_result({success: result});
      output.writeMessageBegin("EnableProjectConnections", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("EnableProjectConnections", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.EnableProjectConnections(args.enable, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_EnableProjectConnections_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("EnableProjectConnections", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("EnableProjectConnections", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_IsExternalProjectUpToDate = function(seqid, input, output) {
  var args = new ProjectManager_IsExternalProjectUpToDate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.IsExternalProjectUpToDate.length === 1) {
    Q.fcall(this._handler.IsExternalProjectUpToDate.bind(this._handler),
      args.prj
    ).then(function(result) {
      var result_obj = new ProjectManager_IsExternalProjectUpToDate_result({success: result});
      output.writeMessageBegin("IsExternalProjectUpToDate", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("IsExternalProjectUpToDate", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.IsExternalProjectUpToDate(args.prj, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_IsExternalProjectUpToDate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("IsExternalProjectUpToDate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("IsExternalProjectUpToDate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_SynchonizeExternalProject = function(seqid, input, output) {
  var args = new ProjectManager_SynchonizeExternalProject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SynchonizeExternalProject.length === 2) {
    Q.fcall(this._handler.SynchonizeExternalProject.bind(this._handler),
      args.prj,
      args.seq
    ).then(function(result) {
      var result_obj = new ProjectManager_SynchonizeExternalProject_result({success: result});
      output.writeMessageBegin("SynchonizeExternalProject", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SynchonizeExternalProject", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SynchonizeExternalProject(args.prj, args.seq, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_SynchonizeExternalProject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SynchonizeExternalProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SynchonizeExternalProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_ConfigureExternalProject = function(seqid, input, output) {
  var args = new ProjectManager_ConfigureExternalProject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ConfigureExternalProject.length === 2) {
    Q.fcall(this._handler.ConfigureExternalProject.bind(this._handler),
      args.prj,
      args.force
    ).then(function(result) {
      var result_obj = new ProjectManager_ConfigureExternalProject_result({success: result});
      output.writeMessageBegin("ConfigureExternalProject", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("ConfigureExternalProject", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.ConfigureExternalProject(args.prj, args.force, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_ConfigureExternalProject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ConfigureExternalProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ConfigureExternalProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_AddControlFile = function(seqid, input, output) {
  var args = new ProjectManager_AddControlFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.AddControlFile.length === 3) {
    Q.fcall(this._handler.AddControlFile.bind(this._handler),
      args.prj,
      args.file,
      args.pluginId
    ).then(function(result) {
      var result_obj = new ProjectManager_AddControlFile_result({success: result});
      output.writeMessageBegin("AddControlFile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("AddControlFile", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.AddControlFile(args.prj, args.file, args.pluginId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_AddControlFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("AddControlFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AddControlFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_HasControlFileFor = function(seqid, input, output) {
  var args = new ProjectManager_HasControlFileFor_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.HasControlFileFor.length === 2) {
    Q.fcall(this._handler.HasControlFileFor.bind(this._handler),
      args.prj,
      args.pluginId
    ).then(function(result) {
      var result_obj = new ProjectManager_HasControlFileFor_result({success: result});
      output.writeMessageBegin("HasControlFileFor", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("HasControlFileFor", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.HasControlFileFor(args.prj, args.pluginId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_HasControlFileFor_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("HasControlFileFor", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("HasControlFileFor", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_IsProjectConnectionsEnabled = function(seqid, input, output) {
  var args = new ProjectManager_IsProjectConnectionsEnabled_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.IsProjectConnectionsEnabled.length === 0) {
    Q.fcall(this._handler.IsProjectConnectionsEnabled.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ProjectManager_IsProjectConnectionsEnabled_result({success: result});
      output.writeMessageBegin("IsProjectConnectionsEnabled", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("IsProjectConnectionsEnabled", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.IsProjectConnectionsEnabled(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_IsProjectConnectionsEnabled_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("IsProjectConnectionsEnabled", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("IsProjectConnectionsEnabled", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetControlFilePlugins = function(seqid, input, output) {
  var args = new ProjectManager_GetControlFilePlugins_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetControlFilePlugins.length === 0) {
    Q.fcall(this._handler.GetControlFilePlugins.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ProjectManager_GetControlFilePlugins_result({success: result});
      output.writeMessageBegin("GetControlFilePlugins", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetControlFilePlugins", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetControlFilePlugins(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetControlFilePlugins_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetControlFilePlugins", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetControlFilePlugins", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetOptionsForProject = function(seqid, input, output) {
  var args = new ProjectManager_GetOptionsForProject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetOptionsForProject.length === 2) {
    Q.fcall(this._handler.GetOptionsForProject.bind(this._handler),
      args.prj,
      args.optionIds
    ).then(function(result) {
      var result_obj = new ProjectManager_GetOptionsForProject_result({success: result});
      output.writeMessageBegin("GetOptionsForProject", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetOptionsForProject", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetOptionsForProject(args.prj, args.optionIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetOptionsForProject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetOptionsForProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetOptionsForProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_ApplyOptionsForProject = function(seqid, input, output) {
  var args = new ProjectManager_ApplyOptionsForProject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ApplyOptionsForProject.length === 2) {
    Q.fcall(this._handler.ApplyOptionsForProject.bind(this._handler),
      args.prj,
      args.options
    ).then(function(result) {
      var result_obj = new ProjectManager_ApplyOptionsForProject_result({success: result});
      output.writeMessageBegin("ApplyOptionsForProject", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("ApplyOptionsForProject", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.ApplyOptionsForProject(args.prj, args.options, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_ApplyOptionsForProject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ApplyOptionsForProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ApplyOptionsForProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetUserArgVarInfo = function(seqid, input, output) {
  var args = new ProjectManager_GetUserArgVarInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetUserArgVarInfo.length === 1) {
    Q.fcall(this._handler.GetUserArgVarInfo.bind(this._handler),
      args.category
    ).then(function(result) {
      var result_obj = new ProjectManager_GetUserArgVarInfo_result({success: result});
      output.writeMessageBegin("GetUserArgVarInfo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetUserArgVarInfo", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetUserArgVarInfo(args.category, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetUserArgVarInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetUserArgVarInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetUserArgVarInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_SetUserArgVarInfo = function(seqid, input, output) {
  var args = new ProjectManager_SetUserArgVarInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetUserArgVarInfo.length === 1) {
    Q.fcall(this._handler.SetUserArgVarInfo.bind(this._handler),
      args.info
    ).then(function(result) {
      var result_obj = new ProjectManager_SetUserArgVarInfo_result({success: result});
      output.writeMessageBegin("SetUserArgVarInfo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SetUserArgVarInfo", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SetUserArgVarInfo(args.info, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_SetUserArgVarInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SetUserArgVarInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetUserArgVarInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_ImportUserArgVarInfo = function(seqid, input, output) {
  var args = new ProjectManager_ImportUserArgVarInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ImportUserArgVarInfo.length === 2) {
    Q.fcall(this._handler.ImportUserArgVarInfo.bind(this._handler),
      args.category,
      args.argVarFilePath
    ).then(function(result) {
      var result_obj = new ProjectManager_ImportUserArgVarInfo_result({success: result});
      output.writeMessageBegin("ImportUserArgVarInfo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_ImportUserArgVarInfo_result(err);
        output.writeMessageBegin("ImportUserArgVarInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ImportUserArgVarInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.ImportUserArgVarInfo(args.category, args.argVarFilePath, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_ImportUserArgVarInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ImportUserArgVarInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ImportUserArgVarInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_ExportUserArgVarInfo = function(seqid, input, output) {
  var args = new ProjectManager_ExportUserArgVarInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ExportUserArgVarInfo.length === 2) {
    Q.fcall(this._handler.ExportUserArgVarInfo.bind(this._handler),
      args.category,
      args.argVarFilePath
    ).then(function(result) {
      var result_obj = new ProjectManager_ExportUserArgVarInfo_result({success: result});
      output.writeMessageBegin("ExportUserArgVarInfo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("ExportUserArgVarInfo", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.ExportUserArgVarInfo(args.category, args.argVarFilePath, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_ExportUserArgVarInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ExportUserArgVarInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ExportUserArgVarInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetExternalTools = function(seqid, input, output) {
  var args = new ProjectManager_GetExternalTools_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetExternalTools.length === 0) {
    Q.fcall(this._handler.GetExternalTools.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ProjectManager_GetExternalTools_result({success: result});
      output.writeMessageBegin("GetExternalTools", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetExternalTools", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetExternalTools(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetExternalTools_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetExternalTools", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetExternalTools", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_SetExternalTools = function(seqid, input, output) {
  var args = new ProjectManager_SetExternalTools_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetExternalTools.length === 1) {
    Q.fcall(this._handler.SetExternalTools.bind(this._handler),
      args.tools
    ).then(function(result) {
      var result_obj = new ProjectManager_SetExternalTools_result({success: result});
      output.writeMessageBegin("SetExternalTools", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SetExternalTools", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SetExternalTools(args.tools, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_SetExternalTools_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SetExternalTools", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetExternalTools", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetWizards = function(seqid, input, output) {
  var args = new ProjectManager_GetWizards_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetWizards.length === 1) {
    Q.fcall(this._handler.GetWizards.bind(this._handler),
      args.toolchainId
    ).then(function(result) {
      var result_obj = new ProjectManager_GetWizards_result({success: result});
      output.writeMessageBegin("GetWizards", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetWizards", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetWizards(args.toolchainId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetWizards_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetWizards", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetWizards", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_RunWizard = function(seqid, input, output) {
  var args = new ProjectManager_RunWizard_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RunWizard.length === 1) {
    Q.fcall(this._handler.RunWizard.bind(this._handler),
      args.wizard
    ).then(function(result) {
      var result_obj = new ProjectManager_RunWizard_result({success: result});
      output.writeMessageBegin("RunWizard", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("RunWizard", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.RunWizard(args.wizard, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_RunWizard_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("RunWizard", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RunWizard", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetGlobalOptions = function(seqid, input, output) {
  var args = new ProjectManager_GetGlobalOptions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetGlobalOptions.length === 0) {
    Q.fcall(this._handler.GetGlobalOptions.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ProjectManager_GetGlobalOptions_result({success: result});
      output.writeMessageBegin("GetGlobalOptions", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetGlobalOptions", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetGlobalOptions(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetGlobalOptions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetGlobalOptions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetGlobalOptions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetGlobalOption = function(seqid, input, output) {
  var args = new ProjectManager_GetGlobalOption_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetGlobalOption.length === 1) {
    Q.fcall(this._handler.GetGlobalOption.bind(this._handler),
      args.id
    ).then(function(result) {
      var result_obj = new ProjectManager_GetGlobalOption_result({success: result});
      output.writeMessageBegin("GetGlobalOption", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetGlobalOption", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetGlobalOption(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetGlobalOption_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetGlobalOption", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetGlobalOption", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_ApplyGlobalOptions = function(seqid, input, output) {
  var args = new ProjectManager_ApplyGlobalOptions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ApplyGlobalOptions.length === 1) {
    Q.fcall(this._handler.ApplyGlobalOptions.bind(this._handler),
      args.options
    ).then(function(result) {
      var result_obj = new ProjectManager_ApplyGlobalOptions_result({success: result});
      output.writeMessageBegin("ApplyGlobalOptions", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_ApplyGlobalOptions_result(err);
        output.writeMessageBegin("ApplyGlobalOptions", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ApplyGlobalOptions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.ApplyGlobalOptions(args.options, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_ApplyGlobalOptions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ApplyGlobalOptions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ApplyGlobalOptions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetTargetVersion = function(seqid, input, output) {
  var args = new ProjectManager_GetTargetVersion_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetTargetVersion.length === 2) {
    Q.fcall(this._handler.GetTargetVersion.bind(this._handler),
      args.prj,
      args.configuration
    ).then(function(result) {
      var result_obj = new ProjectManager_GetTargetVersion_result({success: result});
      output.writeMessageBegin("GetTargetVersion", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_GetTargetVersion_result(err);
        output.writeMessageBegin("GetTargetVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetTargetVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetTargetVersion(args.prj, args.configuration, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_GetTargetVersion_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetTargetVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetTargetVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetProjectAliases = function(seqid, input, output) {
  var args = new ProjectManager_GetProjectAliases_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetProjectAliases.length === 1) {
    Q.fcall(this._handler.GetProjectAliases.bind(this._handler),
      args.prj
    ).then(function(result) {
      var result_obj = new ProjectManager_GetProjectAliases_result({success: result});
      output.writeMessageBegin("GetProjectAliases", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetProjectAliases", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetProjectAliases(args.prj, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetProjectAliases_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetProjectAliases", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetProjectAliases", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetProjectFolderAliases = function(seqid, input, output) {
  var args = new ProjectManager_GetProjectFolderAliases_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetProjectFolderAliases.length === 1) {
    Q.fcall(this._handler.GetProjectFolderAliases.bind(this._handler),
      args.prj
    ).then(function(result) {
      var result_obj = new ProjectManager_GetProjectFolderAliases_result({success: result});
      output.writeMessageBegin("GetProjectFolderAliases", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetProjectFolderAliases", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetProjectFolderAliases(args.prj, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetProjectFolderAliases_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetProjectFolderAliases", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetProjectFolderAliases", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_SetProjectFolderAliases = function(seqid, input, output) {
  var args = new ProjectManager_SetProjectFolderAliases_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetProjectFolderAliases.length === 3) {
    Q.fcall(this._handler.SetProjectFolderAliases.bind(this._handler),
      args.prj,
      args.aliases,
      args.forceUpdate
    ).then(function(result) {
      var result_obj = new ProjectManager_SetProjectFolderAliases_result({success: result});
      output.writeMessageBegin("SetProjectFolderAliases", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SetProjectFolderAliases", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SetProjectFolderAliases(args.prj, args.aliases, args.forceUpdate, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_SetProjectFolderAliases_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SetProjectFolderAliases", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetProjectFolderAliases", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
