//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var shared_ttypes = require('./shared_types');


var ttypes = module.exports = {};
ttypes.DeviceState = {
  '0' : 'Available',
  'Available' : 0,
  '1' : 'Installed',
  'Installed' : 1,
  '2' : 'Incompatible',
  'Incompatible' : 2
};
ttypes.RepositoryType = {
  '0' : 'Unknown',
  'Unknown' : 0,
  '1' : 'Local',
  'Local' : 1,
  '2' : 'Remote',
  'Remote' : 2
};
var DeviceManagerError = module.exports.DeviceManagerError = function(args) {
  Thrift.TException.call(this, "DeviceManagerError");
  this.name = "DeviceManagerError";
  this.detailMessage = null;
  if (args) {
    if (args.detailMessage !== undefined && args.detailMessage !== null) {
      this.detailMessage = args.detailMessage;
    }
  }
};
Thrift.inherits(DeviceManagerError, Thrift.TException);
DeviceManagerError.prototype.name = 'DeviceManagerError';
DeviceManagerError.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.detailMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceManagerError.prototype.write = function(output) {
  output.writeStructBegin('DeviceManagerError');
  if (this.detailMessage !== null && this.detailMessage !== undefined) {
    output.writeFieldBegin('detailMessage', Thrift.Type.STRING, 1);
    output.writeString(this.detailMessage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Device = module.exports.Device = function(args) {
  this.tag = null;
  this.displayName = null;
  this.manufacturer = null;
  this.path = null;
  this.data = null;
  this.state = null;
  this.toolchainId = null;
  if (args) {
    if (args.tag !== undefined && args.tag !== null) {
      this.tag = args.tag;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.manufacturer !== undefined && args.manufacturer !== null) {
      this.manufacturer = args.manufacturer;
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.toolchainId !== undefined && args.toolchainId !== null) {
      this.toolchainId = args.toolchainId;
    }
  }
};
Device.prototype = {};
Device.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.manufacturer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.toolchainId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Device.prototype.write = function(output) {
  output.writeStructBegin('Device');
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 1);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.manufacturer !== null && this.manufacturer !== undefined) {
    output.writeFieldBegin('manufacturer', Thrift.Type.STRING, 3);
    output.writeString(this.manufacturer);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 4);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 5);
    output.writeString(this.data);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 6);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.toolchainId !== null && this.toolchainId !== undefined) {
    output.writeFieldBegin('toolchainId', Thrift.Type.STRING, 7);
    output.writeString(this.toolchainId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Repository = module.exports.Repository = function(args) {
  this.uri = null;
  this.displayName = null;
  this.toolchainId = null;
  this.type = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.toolchainId !== undefined && args.toolchainId !== null) {
      this.toolchainId = args.toolchainId;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
Repository.prototype = {};
Repository.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.toolchainId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Repository.prototype.write = function(output) {
  output.writeStructBegin('Repository');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.toolchainId !== null && this.toolchainId !== undefined) {
    output.writeFieldBegin('toolchainId', Thrift.Type.STRING, 3);
    output.writeString(this.toolchainId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.DEVICEMANAGER_ID = 'com.iar.devicemanager.service';
