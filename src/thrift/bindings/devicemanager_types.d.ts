//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import shared_ttypes = require('./shared_types');



/**
 * The possible states of a device.
 */
declare enum DeviceState {
  Available = 0,
  Installed = 1,
  Incompatible = 2,
}

/**
 * Describes the possible repository variants
 */
declare enum RepositoryType {
  Unknown = 0,
  Local = 1,
  Remote = 2,
}

/**
 * Generic error thrown by the device service.
 */
declare class DeviceManagerError extends Thrift.TException {
  public detailMessage: string;

    constructor(args?: { detailMessage: string; });
  read(input: Object): void;
  write(input: Object): void;
}

/**
 */
declare class Device {
  public tag: string;
  public displayName: string;
  public manufacturer: string;
  public path: string;
  public data: string;
  public state: DeviceState;
  public toolchainId: string;

    constructor(args?: { tag: string; displayName: string; manufacturer: string; path: string; data: string; state: DeviceState; toolchainId: string; });
  read(input: Object): void;
  write(input: Object): void;
}

/**
 */
declare class Repository {
  public uri: string;
  public displayName: string;
  public toolchainId: string;
  public type: RepositoryType;

    constructor(args?: { uri: string; displayName: string; toolchainId: string; type: RepositoryType; });
  read(input: Object): void;
  write(input: Object): void;
}

declare var DEVICEMANAGER_ID: string;
