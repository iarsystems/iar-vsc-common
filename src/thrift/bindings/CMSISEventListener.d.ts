//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import shared_ttypes = require('./shared_types');


import ttypes = require('./cmsisagent_types');
import OutputType = ttypes.OutputType
import FileCategory = ttypes.FileCategory
import CMSISPACK_AGENT2_SERVICE = ttypes.CMSISPACK_AGENT2_SERVICE
import CMSISPACK_AGENT2_EVENTLISTENER_SERVICE = ttypes.CMSISPACK_AGENT2_EVENTLISTENER_SERVICE
import PROJECT_ADDED = ttypes.PROJECT_ADDED
import PROJECT_REMOVED = ttypes.PROJECT_REMOVED
import PROJECT_UPDATED = ttypes.PROJECT_UPDATED
import PACKS_UPDATED = ttypes.PACKS_UPDATED
import PACKS_RELOADED = ttypes.PACKS_RELOADED
import PROTOCOL_VERSION = ttypes.PROTOCOL_VERSION
import CMSISAgentException = ttypes.CMSISAgentException
import FileInfo = ttypes.FileInfo
import ComponentInfo = ttypes.ComponentInfo
import CompileInfo = ttypes.CompileInfo
import ProcessorInfo = ttypes.ProcessorInfo
import DeviceInfo = ttypes.DeviceInfo
import ValidationStatus = ttypes.ValidationStatus
import Api = ttypes.Api
import FileInPack = ttypes.FileInPack
import RteFile = ttypes.RteFile
import RteEvent = ttypes.RteEvent

declare class Client {
  #output: thrift.TTransport;
  #pClass: thrift.TProtocol;
  #_seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  onRteEvent(event: RteEvent): Q.Promise<void>;

  onRteEvent(event: RteEvent, callback?: (error: void, response: void)=>void): void;
}

declare class Processor {
  #_handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_onRteEvent(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
