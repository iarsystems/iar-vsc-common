//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import shared_ttypes = require('./shared_types');
import themes_ttypes = require('./themes_types');



/**
 * Which icon to display in the message box
 */
declare enum MsgIcon {
  kMsgIconInfo = 0,
  kMsgIconQuestion = 1,
  kMsgIconExclaim = 2,
  kMsgIconStop = 3,
}

/**
 * What set of buttons to use in the message box
 */
declare enum MsgKind {
  kMsgOk = 0,
  kMsgOkCancel = 1,
  kMsgYesNo = 2,
  kMsgYesNoCancel = 3,
}

/**
 * Which button was used to dismiss the message box
 */
declare enum MsgResult {
  kMsgResOk = 0,
  kMsgResCancel = 1,
  kMsgResYes = 2,
  kMsgResNo = 3,
}

/**
 * The type of dialog to open
 */
declare enum FileDialogType {
  kOpen = 0,
  kSaveAs = 1,
}

/**
 * The set of allowed return types. kExistingFiles
 * allows returning multiple file
 */
declare enum FileDialogReturnType {
  kAny = 0,
  kExistingFile = 1,
  kDirectory = 2,
  kExistingFiles = 3,
}

/**
 * The set of allowed options which the backend is expecting.
 */
declare enum FileDialogOptions {
  kNoOverwritePrompt = 0,
  kFileMustExist = 1,
  kPathMustExist = 2,
  kAllowReturningReadOnlyFile = 3,
}

declare enum GenericDialogReturnType {
  kOk = 0,
  kCancel = 1,
  kUnknown = 2,
}

/**
 * Small helper struct for filters. The display name is
 * the readable name of the filter and the files allowed
 * are listed in the filtering vector.
 */
declare class FileDialogFilter {
  public displayName: string;
  public filtering: string[];

    constructor(args?: { displayName: string; filtering: string[]; });
  read(input: Object): void;
  write(input: Object): void;
}

declare class GenericDialogResults {
  public type: GenericDialogReturnType;
  public items: shared_ttypes.PropertyTreeItem;

    constructor(args?: { type: GenericDialogReturnType; items: shared_ttypes.PropertyTreeItem; });
  read(input: Object): void;
  write(input: Object): void;
}

declare var FRONTEND_SERVICE: string;
